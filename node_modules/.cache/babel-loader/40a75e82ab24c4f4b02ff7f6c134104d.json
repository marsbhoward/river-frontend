{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/components/DarkmodeSwitch.js\";\nimport React, { useState, useEffect } from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst DarkmodeSwitch = props => {\n  const [state, setState] = useState({\n    DarkmodeChecked: false\n  });\n  useEffect(() => {\n    console.log(state);\n  }, []);\n\n  const handleChange = event => {\n    //returns if dark mode is true or false\n    sessionStorage.setItem('darkmode', event.target.checked);\n    setState({ ...state,\n      [event.target.name]: event.target.checked\n    });\n    props.updateDarkmode(event.target.checked); //adapter.editStream(stream.id,stream.selected,stream.user_id,stream.stream_id).then(data => data)\n    //console.log(event.target.checked)\n\n    adapter.toggleDarkmode(sessionStorage.currentUserID, event.target.checked).then(data => console.log(data));\n  };\n\n  const adapter = {\n    toggleDarkmode: (user_id, darkmodeValue) => {\n      return fetch(`https://river-api.herokuapp.com/users/${user_id}?darkmode=${darkmodeValue}`, {\n        method: 'PATCH',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => res.json());\n    }\n  };\n  const Darkmode = withStyles({\n    switchBase: {\n      color: \"#fe2d56\",\n      '&$checked': {\n        color: '#202125'\n      },\n      '$track': {\n        backgroundColor: '#202125'\n      },\n      '&$checked + $track': {\n        backgroundColor: '#ffffff',\n        color: '#333438'\n      }\n    },\n    checked: {},\n    track: {}\n  })(Switch);\n  return /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Darkmode, {\n      checked: state.DarkmodeChecked,\n      onChange: handleChange,\n      name: \"DarkmodeChecked\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 26\n      }\n    }),\n    label: \"Darkmode\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  });\n};\n\nexport default DarkmodeSwitch;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/components/DarkmodeSwitch.js"],"names":["React","useState","useEffect","FormControlLabel","Switch","withStyles","DarkmodeSwitch","props","state","setState","DarkmodeChecked","console","log","handleChange","event","sessionStorage","setItem","target","checked","name","updateDarkmode","adapter","toggleDarkmode","currentUserID","then","data","user_id","darkmodeValue","fetch","method","headers","res","json","Darkmode","switchBase","color","backgroundColor","track"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AAEA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC;AAC/BS,IAAAA,eAAe,EAAE;AADc,GAAD,CAAlC;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACD,GAFQ,EAEP,EAFO,CAAT;;AAKA,QAAMK,YAAY,GAAIC,KAAD,IAAW;AAC5B;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCF,KAAK,CAACG,MAAN,CAAaC,OAAhD;AACAT,IAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAY,OAACM,KAAK,CAACG,MAAN,CAAaE,IAAd,GAAqBL,KAAK,CAACG,MAAN,CAAaC;AAA9C,KAAD,CAAR;AACAX,IAAAA,KAAK,CAACa,cAAN,CAAqBN,KAAK,CAACG,MAAN,CAAaC,OAAlC,EAJ4B,CAK5B;AACA;;AACAG,IAAAA,OAAO,CAACC,cAAR,CAAuBP,cAAc,CAACQ,aAAtC,EAAoDT,KAAK,CAACG,MAAN,CAAaC,OAAjE,EAA0EM,IAA1E,CAA+EC,IAAI,IAAId,OAAO,CAACC,GAAR,CAAYa,IAAZ,CAAvF;AACD,GARH;;AAUE,QAAMJ,OAAO,GAAG;AACdC,IAAAA,cAAc,EAAE,CAACI,OAAD,EAASC,aAAT,KAA2B;AACzC,aAAOC,KAAK,CAAE,yCAAwCF,OAAQ,aAAYC,aAAc,EAA5E,EAA+E;AACzFE,QAAAA,MAAM,EAAE,OADiF;AAEzFC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAFgF,OAA/E,CAAL,CAKRN,IALQ,CAKHO,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALJ,CAAP;AAMD;AARa,GAAhB;AAWF,QAAMC,QAAQ,GAAG5B,UAAU,CAAC;AAC5B6B,IAAAA,UAAU,EAAE;AACRC,MAAAA,KAAK,EAAE,SADC;AAER,mBAAa;AACTA,QAAAA,KAAK,EAAE;AADE,OAFL;AAKR,gBAAU;AACNC,QAAAA,eAAe,EAAE;AADX,OALF;AAQR,4BAAsB;AACjBA,QAAAA,eAAe,EAAE,SADA;AAEjBD,QAAAA,KAAK,EAAE;AAFU;AARd,KADgB;AAc5BjB,IAAAA,OAAO,EAAE,EAdmB;AAe5BmB,IAAAA,KAAK,EAAE;AAfqB,GAAD,CAAV,CAgBdjC,MAhBc,CAAjB;AAkBE,sBAEM,oBAAC,gBAAD;AACI,IAAA,OAAO,eAAE,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAEI,KAAK,CAACE,eAAzB;AAA0C,MAAA,QAAQ,EAAEG,YAApD;AAAkE,MAAA,IAAI,EAAC,iBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADb;AAEI,IAAA,KAAK,EAAC,UAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFN;AASL,CA1DD;;AA6DA,eAAeP,cAAf","sourcesContent":["import React,{ useState, useEffect } from 'react';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst DarkmodeSwitch = (props) => { \n    const [state, setState] = useState({\n        DarkmodeChecked: false,\n    });\n\n    useEffect(() => {\n      console.log(state)\n    },[])\n\n\n    const handleChange = (event) => {\n        //returns if dark mode is true or false\n        sessionStorage.setItem('darkmode', event.target.checked)\n        setState({ ...state, [event.target.name]: event.target.checked });\n        props.updateDarkmode(event.target.checked)\n        //adapter.editStream(stream.id,stream.selected,stream.user_id,stream.stream_id).then(data => data)\n        //console.log(event.target.checked)\n        adapter.toggleDarkmode(sessionStorage.currentUserID,event.target.checked).then(data => console.log(data))\n      };\n\n      const adapter = {\n        toggleDarkmode: (user_id,darkmodeValue) => {\n          return fetch(`https://river-api.herokuapp.com/users/${user_id}?darkmode=${darkmodeValue}`, {\n            method: 'PATCH',\n            headers: { \"Content-Type\": \"application/json\" },\n            \n          })\n        .then(res => res.json())       \n        },\n    }      \n    \n    const Darkmode = withStyles({\n    switchBase: {\n        color: \"#fe2d56\",\n        '&$checked': {\n            color: '#202125',\n        },\n        '$track': {\n            backgroundColor: '#202125'\n        },\n        '&$checked + $track': {\n             backgroundColor: '#ffffff',\n             color: '#333438',\n        },\n    },\n    checked: {},\n    track: {},\n    })(Switch);      \n\n      return (\n       \n            <FormControlLabel\n                control={<Darkmode checked={state.DarkmodeChecked} onChange={handleChange} name=\"DarkmodeChecked\" />}\n                label=\"Darkmode\"\n            />            \n       \n      );\n          \n}\n\n\nexport default DarkmodeSwitch"]},"metadata":{},"sourceType":"module"}