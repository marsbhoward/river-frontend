{"ast":null,"code":"const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams';\nconst URL = PROXY + streamsAPI; //\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies(id) {\n  let listOfMovieIds = [];\n  let newTitle = '';\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`${streamsAPI}/${id}/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      Promise.all(responseJSON.map((movie, index) => {\n        let movie_id = movie.id;\n        let title;\n        let poster = null;\n\n        if (movie.poster !== \"null\" && movie.poster !== \"N/A\") {\n          poster = movie.poster;\n        }\n\n        if (responseJSON[index].title === 'undefined' || responseJSON[index].poster === \"null\") {\n          if (movie.slug === 'skylin3s') {\n            movie.slug = 'skylines';\n          } else if (movie.slug === 'the-sputnik') {\n            movie.slug = 'Sputnik';\n          } else if (movie.slug === 'charlies-angels') {\n            movie.slug = \"charlie's-angels\";\n          }\n\n          fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`).then(response => {\n            return response.json();\n          }).then(moreInfo => {\n            title = moreInfo.Title;\n            poster = moreInfo.Poster;\n            return moreInfo;\n          }).then(movieInfo => {\n            let newReturn = Promise.resolve(getNewData(movieInfo, title, poster, movie));\n            console.log(newReturn);\n            console.log(title);\n            return newReturn;\n          }).then(newmovieInfo => {\n            //console.log(newmovieInfo)\n            fetch(`${URL}/${id}/movies/${movie_id}?poster=${poster}&title=${title}`, {\n              method: 'PATCH',\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n          });\n        }\n\n        listOfMovieIds.push(movie_id);\n      })).then(response => {\n        try {\n          localStorage.setItem('currentMovieList', JSON.stringify(responseJSON));\n          localStorage.setItem('listOfMovieIds', JSON.stringify(listOfMovieIds));\n          dispatch({\n            type: 'ADD_MOVIES',\n            movies: responseJSON,\n            currentMovieList: responseJSON,\n            ids: listOfMovieIds\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      });\n    });\n  };\n}\n\nfunction returnValue(info, original, title, poster) {\n  if (info.Title !== undefined) {\n    console.log('got new info');\n    title = info.Title;\n    poster = info.Poster;\n    return info;\n  } else {\n    return original;\n  }\n}\n\nasync function getNewData(dataResponce, title, poster, movie) {\n  fetch(`https://www.omdbapi.com/?t=${movie.slug}&type=movie+&apikey=6b46131b`).then(response => {\n    return response.json();\n  }).then(passInfo => {\n    let result = returnValue(passInfo, dataResponce, title, poster);\n    return result;\n  });\n}\n\nexport function listMovies() {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'ADD_MOVIES',\n        movies: responseJSON\n      });\n    });\n  };\n} //send specific movie to omdb and retrieve all the data\n// for use with movie search\n\nexport function fetchTitle(movieInfo) {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      if (responseJSON.Title !== null) {\n        try {\n          dispatch({\n            type: 'ADD_MOVIES',\n            movies: [],\n            ids: [],\n            currentTitle: responseJSON\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        console.log('didnt have a title');\n        console.log(responseJSON);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/actions/movieActions.js"],"names":["PROXY","streamsAPI","URL","fetchMovies","id","listOfMovieIds","newTitle","dispatch","type","fetch","then","response","json","responseJSON","Promise","all","map","movie","index","movie_id","title","poster","slug","year","moreInfo","Title","Poster","movieInfo","newReturn","resolve","getNewData","console","log","newmovieInfo","method","headers","push","localStorage","setItem","JSON","stringify","movies","currentMovieList","ids","error","returnValue","info","original","undefined","dataResponce","passInfo","result","listMovies","fetchTitle","currentTitle"],"mappings":"AAAA,MAAMA,KAAK,GAAG,yCAAd;AACA,MAAMC,UAAU,GAAG,yCAAnB;AACA,MAAMC,GAAG,GAAGF,KAAK,GAAGC,UAApB,C,CAGA;;AAEA,OAAO,SAASE,WAAT,CAAsBC,EAAtB,EAA0B;AAC7B,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,QAAQ,GAAG,EAAf;AAEA,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,GAAER,UAAW,IAAGG,EAAG,SAArB,CAAL,CAAoCM,IAApC,CAAyCC,QAAQ,IAAI;AACjD,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACpBC,MAAAA,OAAO,CAACC,GAAR,CACAF,YAAY,CAACG,GAAb,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3B,YAAIC,QAAQ,GAAGF,KAAK,CAACb,EAArB;AAGA,YAAIgB,KAAJ;AACA,YAAIC,MAAM,GAAG,IAAb;;AACA,YAAIJ,KAAK,CAACI,MAAN,KAAiB,MAAjB,IAA2BJ,KAAK,CAACI,MAAN,KAAiB,KAAhD,EAAsD;AAClDA,UAAAA,MAAM,GAAGJ,KAAK,CAACI,MAAf;AACH;;AACD,YAAGR,YAAY,CAACK,KAAD,CAAZ,CAAoBE,KAApB,KAA8B,WAA9B,IAA6CP,YAAY,CAACK,KAAD,CAAZ,CAAoBG,MAApB,KAA+B,MAA/E,EAAsF;AAClF,cAAIJ,KAAK,CAACK,IAAN,KAAc,UAAlB,EAA6B;AACzBL,YAAAA,KAAK,CAACK,IAAN,GAAa,UAAb;AACH,WAFD,MAGK,IAAGL,KAAK,CAACK,IAAN,KAAc,aAAjB,EAA+B;AAChCL,YAAAA,KAAK,CAACK,IAAN,GAAa,SAAb;AACH,WAFI,MAGA,IAAGL,KAAK,CAACK,IAAN,KAAc,iBAAjB,EAAmC;AACpCL,YAAAA,KAAK,CAACK,IAAN,GAAa,kBAAb;AACH;;AACDb,UAAAA,KAAK,CAAE,8BAA6BQ,KAAK,CAACK,IAAK,MAAKL,KAAK,CAACM,IAAK,8BAA1D,CAAL,CAA8Fb,IAA9F,CAAmGC,QAAQ,IAAE;AAAC,mBAAOA,QAAQ,CAACC,IAAT,EAAP;AAAuB,WAArI,EAAuIF,IAAvI,CAA4Ic,QAAQ,IAAG;AACnJJ,YAAAA,KAAK,GAAGI,QAAQ,CAACC,KAAjB;AACAJ,YAAAA,MAAM,GAAGG,QAAQ,CAACE,MAAlB;AACA,mBAAOF,QAAP;AACH,WAJD,EAIGd,IAJH,CAIQiB,SAAS,IAAE;AACf,gBAAIC,SAAS,GAAGd,OAAO,CAACe,OAAR,CAAgBC,UAAU,CAACH,SAAD,EAAWP,KAAX,EAAiBC,MAAjB,EAAwBJ,KAAxB,CAA1B,CAAhB;AACAc,YAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACAG,YAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACA,mBAAOQ,SAAP;AACC,WATL,EASOlB,IATP,CASYuB,YAAY,IAAE;AACtB;AACAxB,YAAAA,KAAK,CAAE,GAAEP,GAAI,IAAGE,EAAG,WAAUe,QAAS,WAAUE,MAAO,UAASD,KAAM,EAAjE,EAAoE;AACrEc,cAAAA,MAAM,EAAE,OAD6D;AAErEC,cAAAA,OAAO,EAAE;AAAE,gCAAgB;AAAlB;AAF4D,aAApE,CAAL;AAIH,WAfD;AAgBH;;AACD9B,QAAAA,cAAc,CAAC+B,IAAf,CAAoBjB,QAApB;AAEH,OAtCL,CADA,EAwCMT,IAxCN,CAwCWC,QAAQ,IAAI;AACf,YAAI;AACA0B,UAAAA,YAAY,CAACC,OAAb,CAAsB,kBAAtB,EAA0CC,IAAI,CAACC,SAAL,CAAe3B,YAAf,CAA1C;AACAwB,UAAAA,YAAY,CAACC,OAAb,CAAsB,gBAAtB,EAAwCC,IAAI,CAACC,SAAL,CAAenC,cAAf,CAAxC;AACAE,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,IAAI,EAAE,YAAR;AAAsBiC,YAAAA,MAAM,EAAE5B,YAA9B;AAA4C6B,YAAAA,gBAAgB,EAAE7B,YAA9D;AAA2E8B,YAAAA,GAAG,EAAEtC;AAAhF,WAAD,CAAR;AACH,SAJD,CAKA,OAAMuC,KAAN,EAAY;AACRb,UAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACH;AACJ,OAjDL;AAkDC,KArDL;AAsDC,GAxDL;AAyDH;;AAED,SAASC,WAAT,CAAqBC,IAArB,EAA0BC,QAA1B,EAAmC3B,KAAnC,EAAyCC,MAAzC,EAAgD;AAC5C,MAAIyB,IAAI,CAACrB,KAAL,KAAeuB,SAAnB,EAA6B;AACzBjB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAZ,IAAAA,KAAK,GAAG0B,IAAI,CAACrB,KAAb;AACAJ,IAAAA,MAAM,GAAGyB,IAAI,CAACpB,MAAd;AACA,WAAQoB,IAAR;AACH,GALD,MAMI;AACA,WAAOC,QAAP;AACH;AACJ;;AAED,eAAejB,UAAf,CAA0BmB,YAA1B,EAAuC7B,KAAvC,EAA6CC,MAA7C,EAAoDJ,KAApD,EAA0D;AAClDR,EAAAA,KAAK,CAAE,8BAA6BQ,KAAK,CAACK,IAAK,8BAA1C,CAAL,CAA8EZ,IAA9E,CAAmFC,QAAQ,IAAE;AAAC,WAAOA,QAAQ,CAACC,IAAT,EAAP;AAAuB,GAArH,EAAuHF,IAAvH,CAA4HwC,QAAQ,IAAG;AACnI,QAAIC,MAAM,GAAIN,WAAW,CAACK,QAAD,EAAUD,YAAV,EAAuB7B,KAAvB,EAA6BC,MAA7B,CAAzB;AACA,WAAO8B,MAAP;AACH,GAHD;AAIP;;AAID,OAAO,SAASC,UAAT,GAAqB;AACxB,SAAQ7C,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,wCAAF,CAAL,CAAgDC,IAAhD,CAAqDC,QAAQ,IAAI;AAC7D,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACpBN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,YAAR;AAAsBiC,QAAAA,MAAM,EAAE5B;AAA9B,OAAD,CAAR;AACH,KAJD;AAKH,GAPD;AAQH,C,CAED;AACA;;AACA,OAAO,SAASwC,UAAT,CAAqB1B,SAArB,EAA+B;AAClC,SAAQpB,QAAD,IAAc;AACbA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,8BAA6BkB,SAAS,CAACL,IAAK,MAAKK,SAAS,CAACJ,IAAK,mBAAlE,CAAL,CAA2Fb,IAA3F,CAAgGC,QAAQ,IAAI;AACxG,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACR,UAAGA,YAAY,CAACY,KAAb,KAAuB,IAA1B,EAA+B;AAC/B,YAAI;AACAlB,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,IAAI,EAAE,YAAR;AAAsBiC,YAAAA,MAAM,EAAE,EAA9B;AAAkCE,YAAAA,GAAG,EAAE,EAAvC;AAA2CW,YAAAA,YAAY,EAAEzC;AAAzD,WAAD,CAAR;AACH,SAFD,CAGA,OAAM+B,KAAN,EAAY;AACRb,UAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACH;AACJ,OAPG,MAQA;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYnB,YAAZ;AACH;AACA,KAfb;AAgBH,GAlBL;AAmBH","sourcesContent":["const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams'\nconst URL = PROXY + streamsAPI\n\n\n//\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies (id) {\n    let listOfMovieIds = []\n    let newTitle = ''\n    \n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`${streamsAPI}/${id}/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            Promise.all(\n            responseJSON.map((movie, index) => {\n                    let movie_id = movie.id\n                    \n\n                    let title\n                    let poster = null\n                    if (movie.poster !== \"null\" && movie.poster !== \"N/A\"){\n                        poster = movie.poster\n                    }\n                    if(responseJSON[index].title === 'undefined' || responseJSON[index].poster === \"null\"){   \n                        if (movie.slug=== 'skylin3s'){\n                            movie.slug = 'skylines'\n                        }\n                        else if(movie.slug=== 'the-sputnik'){\n                            movie.slug = 'Sputnik'\n                        }\n                        else if(movie.slug=== 'charlies-angels'){\n                            movie.slug = \"charlie's-angels\"\n                        }\n                        fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`).then(response=>{return response.json()}).then(moreInfo =>{\n                            title = moreInfo.Title\n                            poster = moreInfo.Poster\n                            return moreInfo\n                        }).then(movieInfo=>{\n                            let newReturn = Promise.resolve(getNewData(movieInfo,title,poster,movie))\n                            console.log(newReturn)\n                            console.log(title)\n                            return newReturn \n                            }).then(newmovieInfo=>{\n                            //console.log(newmovieInfo)\n                            fetch(`${URL}/${id}/movies/${movie_id}?poster=${poster}&title=${title}`, {\n                                method: 'PATCH',\n                                headers: { \"Content-Type\": \"application/json\" },\n                            })                            \n                        })\n                    }\n                    listOfMovieIds.push(movie_id)\n\n                })\n                ).then(response => {\n                    try {\n                        localStorage.setItem ('currentMovieList', JSON.stringify(responseJSON))\n                        localStorage.setItem ('listOfMovieIds', JSON.stringify(listOfMovieIds))\n                        dispatch({ type: 'ADD_MOVIES', movies: responseJSON, currentMovieList: responseJSON,ids: listOfMovieIds})\n                    }\n                    catch(error){\n                        console.log(error)\n                    }\n                })\n            })\n        }\n}\n\nfunction returnValue(info,original,title,poster){\n    if (info.Title !== undefined){\n        console.log('got new info')\n        title = info.Title\n        poster = info.Poster\n        return  info\n    }\n    else{\n        return original\n    }\n}\n\nasync function getNewData(dataResponce,title,poster,movie){\n        fetch(`https://www.omdbapi.com/?t=${movie.slug}&type=movie+&apikey=6b46131b`).then(response=>{return response.json()}).then(passInfo =>{\n            let result = (returnValue(passInfo,dataResponce,title,poster))\n            return result\n        })\n}\n\n\n\nexport function listMovies(){\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            dispatch({ type: 'ADD_MOVIES', movies: responseJSON})\n        })\n    }\n}\n\n//send specific movie to omdb and retrieve all the data\n// for use with movie search\nexport function fetchTitle (movieInfo){\n    return (dispatch) => {\n            dispatch({ type: 'LOADING_MOVIES'})\n            fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n                return response.json()\n            }).then(responseJSON => {\n                            if(responseJSON.Title !== null){ \n                            try {\n                                dispatch({ type: 'ADD_MOVIES', movies: [], ids: [], currentTitle: responseJSON})\n                            }\n                            catch(error){\n                                console.log(error)\n                            }\n                        }\n                        else{\n                            console.log('didnt have a title')\n                            console.log(responseJSON)\n                        }\n                        })\n        }\n}"]},"metadata":{},"sourceType":"module"}