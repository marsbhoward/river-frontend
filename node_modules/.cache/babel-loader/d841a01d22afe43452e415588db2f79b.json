{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js\";\nimport React, { useState, useEffect } from 'react'; //import { connect } from 'react-redux';\n\nimport { fetchMovies } from '../actions/movieActions';\nimport { fetchTitle } from '../actions/movieActions';\nimport MovieList from '../components/MovieList';\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux';\n\nconst MoviesPage = props => {\n  const movieData = useSelector(state => state.MoviesReducer, []) || [];\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [movieDataArray, setMovieDataArray] = useState([]);\n  const [currentMovie, setCurrentMovie] = useState('');\n  useEffect(() => {\n    if (location.state.currentMovie !== undefined) {\n      //dispatch(fetchTitle())\n      setCliked(location.state.clicked);\n      CurrentMovie(movieData);\n    } else {\n      console.log(location);\n      getMoviesArray();\n    }\n  }, []); //dispatch({type: 'LOADING_MOVIES'})\n  //props.fetchMovies(localStorage.currentStream)\n  //console.log(props)\n  //console.log(movieData)\n  //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n\n  function trailerID(trailer) {//link trailer to backend\n  }\n\n  function getMoviesArray() {\n    dispatch(fetchMovies(Promise.resolve(location.state).then(location.state.state.currentMovie)));\n    setMovieDataArray(movieData.movies);\n  }\n\n  function CurrentMovie(data) {\n    if (data.currentTitle !== undefined) {\n      setCurrentMovie(data.currentTitle);\n    }\n  } //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n\n\n  function handleLoading() {\n    if (movieData.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 14\n        }\n      }, \"Loading Movies...\");\n    } else {\n      if (location.state !== undefined) {\n        if (movieData.currentTitle !== undefined) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(MovieList, {\n            passedMovie: movieData.currentTitle,\n            streamID: localStorage.currentStream,\n            isClicked: clicked,\n            trailerID: trailerID,\n            movieCards: movieData.movies,\n            movieIds: movieData.ids,\n            currentStream: localStorage.currentStreamName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 13\n            }\n          }));\n        } else console.log(location.state);\n\n        console.log(movieData);\n        let cti;\n        Promise.resolve(location.state).then(cti = location.state.state.currentMovie);\n        console.log(cti);\n        let ctit = cti.title;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }\n        }, ctit), /*#__PURE__*/React.createElement(MovieList, {\n          passedMovie: cti,\n          streamID: localStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: localStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(MovieList, {\n          streamID: localStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: localStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 19\n          }\n        }));\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"banner-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, localStorage.currentStreamName.toUpperCase()), handleLoading());\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies.sort(),\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  };\n};\n\nexport default MoviesPage;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js"],"names":["React","useState","useEffect","fetchMovies","fetchTitle","MovieList","useLocation","useSelector","useDispatch","useStore","MoviesPage","props","movieData","state","MoviesReducer","dispatch","location","clicked","setCliked","movieDataArray","setMovieDataArray","currentMovie","setCurrentMovie","undefined","CurrentMovie","console","log","getMoviesArray","trailerID","trailer","Promise","resolve","then","movies","data","currentTitle","handleLoading","loading","localStorage","currentStream","ids","currentStreamName","cti","ctit","title","toUpperCase","mapDispatchToProps","movieCards","sort","movieIds"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect } from 'react';\n//import { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions'\nimport { fetchTitle } from '../actions/movieActions'\nimport MovieList from '../components/MovieList'\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux'\n\nconst MoviesPage = (props) => { \n  const movieData = useSelector(state => state.MoviesReducer, []) || []; \n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [movieDataArray,setMovieDataArray] = useState([]); \n  const [currentMovie, setCurrentMovie] = useState('');  \n\n  useEffect(() => {\n      if (location.state.currentMovie !== undefined){\n        //dispatch(fetchTitle())\n        setCliked(location.state.clicked)\n        CurrentMovie(movieData)\n\n      }\n      else{\n        console.log(location)\n        getMoviesArray()\n      }        \n    }, []);\n    //dispatch({type: 'LOADING_MOVIES'})\n    //props.fetchMovies(localStorage.currentStream)\n    //console.log(props)\n    //console.log(movieData)\n    //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n  \n\n  function trailerID(trailer){ \n    //link trailer to backend\n  }\n\n  function getMoviesArray(){\n    dispatch(fetchMovies(Promise.resolve(location.state).then(location.state.state.currentMovie)));\n    setMovieDataArray(movieData.movies)  \n  }\n\n  function CurrentMovie(data){\n    if (data.currentTitle !== undefined){\n      setCurrentMovie(data.currentTitle)\n    }\n  }\n\n\n\n  //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n  function handleLoading (){\n    \n    if(movieData.loading) {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      if (location.state !== undefined){\n        if (movieData.currentTitle !== undefined){\n          return(\n          <div>\n            <MovieList passedMovie={movieData.currentTitle} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n          </div>\n          )\n        }\n        else\n        console.log(location.state)\n        console.log( movieData)\n        let cti\n        Promise.resolve(location.state).then( cti =location.state.state.currentMovie)\n        console.log(cti)\n        let ctit = cti.title \n          return(\n            <div>\n              <h1>{ctit}</h1>\n              <MovieList passedMovie={cti} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n            </div>\n          )\n      }\n        else{\n            return (\n              <div>\n                  <MovieList streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n              </div>\n            )\n        }\n      \n    }\n  }\n\n  \n    return (\n      <div className=\"App\">\n        <div className=\"banner-2\">{localStorage.currentStreamName.toUpperCase()}</div>\n        {handleLoading()}\n      </div>\n    );\n  }\n\n\n\n\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies.sort(),\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  }\n}\n\nexport default(MoviesPage)"]},"metadata":{},"sourceType":"module"}