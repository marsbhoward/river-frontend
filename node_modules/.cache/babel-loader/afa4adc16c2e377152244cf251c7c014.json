{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/UserStreamsPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions';\nimport Profile from '../components/Profile';\nimport User from '../components/User';\n\nclass UserStreamsPage extends Component {\n  constructor(props) {\n    super(props); //binds passed handler to UserStreamsPage handler\n\n    this.handler = (id, name) => {\n      this.setState({\n        currentStream: id,\n        currentStreamName: name\n      }); //returns the selected Stream id to App       \n\n      this.props.handler(id, name);\n    };\n\n    this.handleLoading = id => {\n      if (this.props.loading) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 14\n          }\n        }, \"Loading Streams...\");\n      } else {\n        let selectedStreams = [];\n        this.props.userStreams.forEach(stream => {\n          if (stream.selected === true) {\n            selectedStreams.push(stream);\n          }\n        });\n        return /*#__PURE__*/React.createElement(Profile, {\n          userID: id,\n          userStreams: selectedStreams,\n          handleLists: this.handleLists,\n          handler: this.handler,\n          streamLinks: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.handleFunctions = e => {\n      this.props.pointer(e);\n      this.props.resetCount();\n    };\n\n    this.handler = this.handler.bind(this);\n    this.state = {\n      cssColor: \"\"\n    };\n  }\n\n  componentDidMount() {\n    sessionStorage.setItem('currentStream', ' ');\n    sessionStorage.setItem('currentStreamName', ' ');\n    this.props.fetchUserStreams(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setState({\n        cssColor: this.props.css('UserStreams', this.props.darkmodeProp)\n      });\n      sessionStorage.setItem('currentStream', ' ');\n      sessionStorage.setItem('currentStreamName', ' ');\n    }\n  } // recieves id from passed handler\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        background: this.state.cssColor.background\n      },\n      className: \"App\",\n      onClick: this.handleFunctions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(User, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }), this.handleLoading(this.props.userId));\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams.sort(),\n    loading: state.StreamsReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchUserStreams\n})(UserStreamsPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/UserStreamsPage.js"],"names":["React","Component","connect","fetchUserStreams","Profile","User","UserStreamsPage","constructor","props","handler","id","name","setState","currentStream","currentStreamName","handleLoading","loading","selectedStreams","userStreams","forEach","stream","selected","push","handleLists","handleFunctions","e","pointer","resetCount","bind","state","cssColor","componentDidMount","sessionStorage","setItem","userId","componentDidUpdate","prevProps","css","darkmodeProp","render","background","mapDispatchToProps","StreamsReducer","streams","sort"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions'\nimport Profile from '../components/Profile';\nimport User from '../components/User';\n\nclass UserStreamsPage extends Component {   \n  constructor(props){\n    super(props)\n    //binds passed handler to UserStreamsPage handler\n    this.handler = this.handler.bind(this)\n    this.state = {\n      cssColor: \"\"\n    }\n  } \n\n  \n  componentDidMount() {\n    sessionStorage.setItem('currentStream', ' ');\n    sessionStorage.setItem('currentStreamName', ' ');\n    this.props.fetchUserStreams(this.props.userId)\n  }\n\n  componentDidUpdate(prevProps){\n    if (prevProps!== this.props){\n     \n      this.setState({cssColor: this.props.css('UserStreams',this.props.darkmodeProp)}) \n      sessionStorage.setItem('currentStream', ' ');\n      sessionStorage.setItem('currentStreamName', ' '); \n    }\n  }   \n\n\n// recieves id from passed handler\n  handler = (id,name) => {\n    this.setState({\n      currentStream: id,\n      currentStreamName: name\n    })\n //returns the selected Stream id to App       \n    this.props.handler(id,name)\n  }\n  \n\n\n  handleLoading = (id) => {\n    if(this.props.loading) {\n      return <div>Loading Streams...</div>\n    } else {\n      let selectedStreams = []\n      this.props.userStreams.forEach ( stream =>{\n\t  \tif (stream.selected === true){\n\t  \t\tselectedStreams.push(stream)\n\t  \t}\n\n      })  \n      return <Profile userID={id} userStreams={selectedStreams} handleLists={this.handleLists} handler={this.handler} streamLinks={true}/>\n    }\n  }\n\n  handleFunctions = (e) =>{\n    this.props.pointer(e)\n    this.props.resetCount()\n  }\n\n  render() {\n    return (\n      <div style={{background:this.state.cssColor.background}}  className=\"App\" onClick={this.handleFunctions}>\n        <User/>\n        {this.handleLoading(this.props.userId)}\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams.sort(),\n    loading: state.StreamsReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, {fetchUserStreams})(UserStreamsPage)"]},"metadata":{},"sourceType":"module"}