{"ast":null,"code":"hasProp = {}.hasOwnProperty;\n\nvar Cluster = function (maxConcurrent, rateLimit, priorityRange, defaultPriority, homogeneous) {\n  this.maxConcurrent = maxConcurrent;\n  this.rateLimit = rateLimit;\n  this.priorityRange = priorityRange;\n  this.defaultPrioty = defaultPriority;\n  this.homogeneous = homogeneous ? true : false;\n  this.limiters = {};\n  this.Bottleneck = require(\"./Bottleneck\");\n};\n\nCluster.prototype.key = function (key) {\n  var ref;\n\n  if (key == null) {\n    key = \"\";\n  }\n\n  if ((ref = this.limiters[key]) == null) {\n    ref = this.limiters[key] = new this.Bottleneck(this.maxConcurrent, this.rateLimit, this.priorityRange, this.defaultPriority, this.homogeneous ? this : null);\n    ref.setName(key);\n  }\n\n  return ref;\n};\n\nCluster.prototype.deleteKey = function (key) {\n  if (key == null) {\n    key = \"\";\n  }\n\n  return delete this.limiters[key];\n};\n\nCluster.prototype.all = function (cb) {\n  var k, ref, results, v;\n  ref = this.limiters;\n  results = [];\n\n  for (k in ref) {\n    if (!hasProp.call(ref, k)) continue;\n    v = ref[k];\n    results.push(cb(v));\n  }\n\n  return results;\n};\n\nCluster.prototype.keys = function () {\n  return Object.keys(this.limiters);\n};\n\nCluster.prototype._waitingClients = function () {\n  var count = 0;\n  var keys = this.keys();\n  keys.forEach(function (key) {\n    count += this.limiters[key]._waitingClients.size();\n  }, this);\n  return count;\n};\n\nCluster.prototype._unfinishedClients = function () {\n  var count = 0;\n  var keys = this.keys();\n  keys.forEach(function (key) {\n    count += this.limiters[key]._waitingClients.size();\n    count += this.limiters[key]._tasksRunning;\n  }, this);\n  return count;\n};\n\nCluster.prototype.dequeue = function (name) {\n  var keys = this.keys();\n\n  for (var i = 0; i < keys.length; ++i) {\n    if (this.limiters[keys[i]]._waitingClients.size()) {\n      return {\n        next: this.limiters[keys[i]]._waitingClients.dequeue(),\n        limiter: name\n      };\n    }\n  }\n};\n\nCluster.prototype._status = function () {\n  var status = [];\n  var keys = this.keys();\n  keys.forEach(function (key) {\n    status.push(['key: ' + key, 'running: ' + this.limiters[key]._tasksRunning, 'waiting: ' + this.limiters[key]._waitingClients.size()].join());\n  }, this);\n  return status.join(';');\n};\n\nCluster.prototype.startAutoCleanup = function () {\n  var base;\n  this.stopAutoCleanup();\n  return typeof (base = this.interval = setInterval(function (_this) {\n    return function () {\n      var k, ref, results, time, v;\n      time = Date.now();\n      ref = _this.limiters;\n      results = [];\n\n      for (k in ref) {\n        v = ref[k];\n\n        if (v._nextRequest + 1000 * 60 * 5 < time) {\n          results.push(_this.deleteKey(k));\n        } else {\n          results.push(void 0);\n        }\n      }\n\n      return results;\n    };\n  }(this), 1000 * 30)).unref === \"function\" ? base.unref() : void 0;\n};\n\nCluster.prototype.stopAutoCleanup = function () {\n  return clearInterval(this.interval);\n};\n\nObject.defineProperty(Cluster.prototype, 'waitingClients', {\n  get: function () {\n    return this._waitingClients();\n  }\n});\nObject.defineProperty(Cluster.prototype, 'unfinishedClients', {\n  get: function () {\n    return this._unfinishedClients();\n  }\n});\nObject.defineProperty(Cluster.prototype, 'status', {\n  get: function () {\n    return this._status();\n  }\n});\nObject.defineProperty(Cluster.prototype, 'empty', {\n  get: function () {\n    return this._unfinishedClients() > 0 ? false : true;\n  }\n});\nmodule.exports = Cluster;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river/frontend/app/node_modules/bottleneckp/lib/Cluster.js"],"names":["hasProp","hasOwnProperty","Cluster","maxConcurrent","rateLimit","priorityRange","defaultPriority","homogeneous","defaultPrioty","limiters","Bottleneck","require","prototype","key","ref","setName","deleteKey","all","cb","k","results","v","call","push","keys","Object","_waitingClients","count","forEach","size","_unfinishedClients","_tasksRunning","dequeue","name","i","length","next","limiter","_status","status","join","startAutoCleanup","base","stopAutoCleanup","interval","setInterval","_this","time","Date","now","_nextRequest","unref","clearInterval","defineProperty","get","module","exports"],"mappings":"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","sourcesContent":["hasProp = {}.hasOwnProperty;\n\nvar Cluster = function(maxConcurrent, rateLimit, priorityRange, defaultPriority, homogeneous) {\n    this.maxConcurrent = maxConcurrent;\n    this.rateLimit = rateLimit;\n    this.priorityRange = priorityRange;\n    this.defaultPrioty = defaultPriority;\n    this.homogeneous = homogeneous ? true : false;\n    this.limiters = {};\n    this.Bottleneck = require(\"./Bottleneck\");\n}\n\nCluster.prototype.key = function(key) {\n    var ref;\n    if (key == null) {\n        key = \"\";\n    }\n    if((ref = this.limiters[key]) == null)  {\n\tref = this.limiters[key] = new this.Bottleneck(this.maxConcurrent, this.rateLimit, this.priorityRange, this.defaultPriority, this.homogeneous ? this : null);\n\tref.setName(key);\n    }\n    return ref;\n};\n\nCluster.prototype.deleteKey = function(key) {\n    if (key == null) {\n        key = \"\";\n    }\n    return delete this.limiters[key];\n};\n\nCluster.prototype.all = function(cb) {\n    var k, ref, results, v;\n    ref = this.limiters;\n    results = [];\n    for (k in ref) {\n        if (!hasProp.call(ref, k)) continue;\n        v = ref[k];\n        results.push(cb(v));\n    }\n    return results;\n};\n\nCluster.prototype.keys = function() {\n    return Object.keys(this.limiters);\n};\n\nCluster.prototype._waitingClients = function() {\n    var count = 0;\n    var keys = this.keys();\n    keys.forEach(function(key) {\n\tcount += this.limiters[key]._waitingClients.size();\n    }, this);\n    return count;\n};\n\nCluster.prototype._unfinishedClients = function() {\n    var count = 0;\n    var keys = this.keys();\n    keys.forEach(function(key) {\n\tcount += this.limiters[key]._waitingClients.size();\n\tcount += this.limiters[key]._tasksRunning;\n    }, this);\n    return count;\n};\n\nCluster.prototype.dequeue = function(name) {\n    var keys = this.keys();\n    for(var i = 0; i < keys.length; ++i) {\n\tif(this.limiters[keys[i]]._waitingClients.size()) {\n\t    return {\n\t\tnext: this.limiters[keys[i]]._waitingClients.dequeue(),\n\t\tlimiter: name\n\t    };\n\t}\n    }\n}\n\nCluster.prototype._status = function() {\n    var status = [];\n    var keys = this.keys();\n    keys.forEach(function(key) {\n\tstatus.push([\n\t    'key: '+key,\n\t    'running: '+this.limiters[key]._tasksRunning,\n\t    'waiting: '+this.limiters[key]._waitingClients.size()\n\t].join());\n    }, this);\n    return status.join(';');\n}\n\nCluster.prototype.startAutoCleanup = function() {\n    var base;\n    this.stopAutoCleanup();\n    return typeof (base = (this.interval = setInterval((function(_this) {\n        return function() {\n            var k, ref, results, time, v;\n            time = Date.now();\n            ref = _this.limiters;\n            results = [];\n            for (k in ref) {\n                v = ref[k];\n                if ((v._nextRequest + (1000 * 60 * 5)) < time) {\n                  results.push(_this.deleteKey(k));\n                } else {\n                  results.push(void 0);\n                }\n            }\n            return results;\n        };\n    })(this), 1000 * 30))).unref === \"function\" ? base.unref() : void 0;\n};\n\nCluster.prototype.stopAutoCleanup = function() {\n    return clearInterval(this.interval);\n};\n\nObject.defineProperty(Cluster.prototype, 'waitingClients', {\n    get:function() {\n\treturn this._waitingClients()\n    }\n})\n\nObject.defineProperty(Cluster.prototype, 'unfinishedClients', {\n    get:function() {\n\treturn this._unfinishedClients()\n    }\n})\n\nObject.defineProperty(Cluster.prototype, 'status', {\n    get:function() {\n\treturn this._status()\n    }\n})\n\nObject.defineProperty(Cluster.prototype, 'empty', {\n    get:function() {\n\treturn this._unfinishedClients() > 0 ? false : true\n    }\n})\n\nmodule.exports = Cluster;\n"]},"metadata":{},"sourceType":"script"}