{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.logMovie = selectedMovie => {\n      if (selectedMovie.youtube_id === null) {\n        //if youtube_id on api is empty\n        //not getting updated trailer here\n        console.log('youtube_id null');\n        this.fetchTrailer();\n      } else {\n        console.log('youtube_id has value and state set');\n        this.setState({\n          selectedMovie: selectedMovie\n        });\n      }\n    };\n\n    this.trailerPath = selectedMovie => {\n      console.log(selectedMovie);\n      console.log(this.props.trailer);\n\n      if (this.props.trailer !== 'kJQP7kiw5Fk' && selectedMovie !== \"\") {\n        console.log('trailer updated on backend');\n      } else if (this.props.trailer === 'kJQP7kiw5Fk') {\n        console.log('did not update backend');\n        console.log('error loading video from youtube');\n      } else {\n        console.log('did not update backend');\n        console.log('trailer was loaded from backend');\n      }\n    };\n\n    this.fetchTrailer = () => {\n      this.props.fetchTrailers(this.props.currentMovie.Title, this.props.currentMovie.Year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, \"Loading Movies...\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(MovieInfo, {\n          path: this.trailerPath,\n          selectedMovie: this.state.selectedMovie,\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }));\n      }\n    };\n\n    this.state = {\n      selectedMovie: \"\"\n    };\n  }\n\n  componentDidMount() {\n    //pass stream id and movie id in props\n    console.log(this);\n    let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie)); //if current movie does not have a youtube_id on the backend\n    //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title) {\n      let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"banner-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.props.currentMovie.Title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  },\n  updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n    return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        movie_id,\n        youtube_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","constructor","props","logMovie","selectedMovie","youtube_id","console","log","fetchTrailer","setState","trailerPath","trailer","currentMovie","Title","Year","handler","trailerID","handleLoading","loading","state","componentDidMount","apiMovieID","movieID","streamID","adapter","getYoutubeID","then","movie","componentDidUpdate","prevProps","render","toUpperCase","mapDispatchToProps","TrailersReducer","stream_id","movie_id","fetch","headers","resp","json","updateYoutubeID","method","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component { \n\n  constructor(props){\n    super(props)\n    this.state = {selectedMovie: \"\"}\n\n  } \n  \n  componentDidMount() {\n    //pass stream id and movie id in props\n    console.log(this)\n    let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n\n    //if current movie does not have a youtube_id on the backend\n  \t  \n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n\n  \tif (this.props.currentMovie.Title !== prevProps.currentMovie.Title)\n  \t{\n      let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n  \t}\n  }\n\n  logMovie = (selectedMovie) => {\n      if(selectedMovie.youtube_id === null){\n        //if youtube_id on api is empty\n        //not getting updated trailer here\n        console.log('youtube_id null')\n        this.fetchTrailer()\n      }\n      else {\n        console.log('youtube_id has value and state set')\n        this.setState({\n          selectedMovie: selectedMovie\n        })\n      }\n  }\n\n\n  trailerPath = (selectedMovie) =>{\n    console.log(selectedMovie)\n    console.log(this.props.trailer)\n\n    if (this.props.trailer !== 'kJQP7kiw5Fk' && selectedMovie !== \"\"){ \n      \n      console.log('trailer updated on backend') \n    }\n    else if (this.props.trailer === 'kJQP7kiw5Fk') {\n      console.log('did not update backend')\n      console.log('error loading video from youtube')\n    }\n    else {\n      console.log('did not update backend')\n      console.log('trailer was loaded from backend')\n    }\n  }\n\n  fetchTrailer = () => {\n  \tthis.props.fetchTrailers(this.props.currentMovie.Title,this.props.currentMovie.Year)\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    if(this.props.loading) \n    {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      return (\n      \t<div>\n      \t\t<MovieInfo path={this.trailerPath} selectedMovie = {this.state.selectedMovie} currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    return (\n    <div className= \"Info\">\n    \t<div className=\"banner-3\">{this.props.currentMovie.Title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    },\n\n    updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n      return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, movie_id, youtube_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}