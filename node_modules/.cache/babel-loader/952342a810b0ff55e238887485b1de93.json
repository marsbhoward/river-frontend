{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js\";\nimport React, { Component } from 'react';\nimport Video from './Video';\n\nclass MovieInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.shouldTrailerLoad = passedMovie => {\n      if (!!passedMovie !== !!null) {\n        if (this.props.youtube !== null) {\n          console.log('youtube id is present on backend');\n          return 'https://www.youtube.com/embed/' + this.props.youtube;\n        } else {\n          console.log('trailer fetched from youtube');\n          return 'https://www.youtube.com/embed/' + this.props.trailer;\n        }\n      } else {\n        if (this.props.youtube !== null) {\n          console.log(this.props.youtube);\n          return 'https://www.youtube.com/embed/' + this.props.youtube;\n        }\n\n        console.log('got null');\n        console.log(this.props.trailer);\n        return 'https://www.youtube.com/embed/' + this.props.trailer;\n      }\n    };\n\n    this.state = {\n      fullSrc: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      fullSrc: this.shouldTrailerLoad(this.props.selectedMovie)\n    });\n    console.log('movie info mounted');\n\n    if (this.props.selectedMovie !== null) {\n      console.log(this.props.selectedMovie);\n      this.props.path(this.props.selectedMovie);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title && this.props.selectedMovie === \"\") {\n      console.log('different title'); //this.props.path(this.props.selectedMovie)\n    }\n  }\n\n  render() {\n    let currentMovie = this.props.currentMovie;\n    let videoId; //console.log(this.props.selectedMovie )\n    //error when selecting from search\n\n    let errorMsg;\n\n    if (this.props.trailer === \"kJQP7kiw5Fk\") {\n      errorMsg = \"due to an issue with this sites connection to youtube the trailer can not be viewed at this time\";\n      this.props.handler(\"default\");\n      videoId = this.props.trailer;\n    } else {\n      this.props.handler(this.props.trailer);\n    }\n\n    const ratings = currentMovie.Ratings.map((rating, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }\n    }, \"\\xBB \", rating.Source, \": \", rating.Value, \" \\xAB\"));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"show_Movie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"selected_Movie\",\n      alt: currentMovie.Title,\n      src: currentMovie.Poster,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \" Rated: \", currentMovie.Rated), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, \" Year: \", currentMovie.Year), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, \" Genre: \", currentMovie.Genre, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, \" Actors: \", currentMovie.Actors, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \" Director: \", currentMovie.Director, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, \" Awards: \", currentMovie.Awards, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, \" Ratings \"), /*#__PURE__*/React.createElement(\"ul\", {\n      style: {\n        display: 'inline',\n        margin: 40,\n        listStyle: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \" \", ratings, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \" Plot\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, currentMovie.Plot, \" \"), /*#__PURE__*/React.createElement(Video, {\n      fullSrc: this.state.fullSrc,\n      videoID: videoId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, errorMsg));\n  }\n\n}\n\nexport default MovieInfo;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js"],"names":["React","Component","Video","MovieInfo","constructor","props","shouldTrailerLoad","passedMovie","youtube","console","log","trailer","state","fullSrc","componentDidMount","setState","selectedMovie","path","componentDidUpdate","prevProps","currentMovie","Title","render","videoId","errorMsg","handler","ratings","Ratings","map","rating","index","Source","Value","Poster","Rated","Year","Genre","Actors","Director","Awards","display","margin","listStyle","Plot"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Video from './Video';\n\nclass MovieInfo extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      fullSrc: \"\"\n    }\n    \n  } \n\n  componentDidMount() {\n    this.setState({\n      fullSrc:this.shouldTrailerLoad(this.props.selectedMovie)\n    })\n    console.log('movie info mounted')\n    if (this.props.selectedMovie!== null){\n      console.log(this.props.selectedMovie)\n      this.props.path(this.props.selectedMovie)\n    }\n  }\n\n   componentDidUpdate(prevProps){\n\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title && this.props.selectedMovie === \"\")\n    {\n      console.log('different title')\n      //this.props.path(this.props.selectedMovie)\n    } \n  }\n\n  shouldTrailerLoad = (passedMovie) => {\n    if (!!passedMovie !== !!null){\n      if (this.props.youtube !== null) {\n        console.log('youtube id is present on backend')\n        return ('https://www.youtube.com/embed/' + this.props.youtube)\n      }\n      else{\n        console.log('trailer fetched from youtube')\n        return ('https://www.youtube.com/embed/' + this.props.trailer)\n      }\n    }\n    else{\n      if (this.props.youtube!== null){\n        console.log(this.props.youtube)\n        return ('https://www.youtube.com/embed/' + this.props.youtube)\n      }\n      console.log('got null')\n      console.log(this.props.trailer)\n      return ('https://www.youtube.com/embed/' + this.props.trailer)\n    }\n  }\n\n  render() {\n  \tlet currentMovie = this.props.currentMovie\n    let videoId \n    \n\n    //console.log(this.props.selectedMovie )\n    //error when selecting from search\n\n\n    let errorMsg\n\n    if (this.props.trailer === \"kJQP7kiw5Fk\"){\n      errorMsg = \"due to an issue with this sites connection to youtube the trailer can not be viewed at this time\";\n      this.props.handler(\"default\")\n      videoId = this.props.trailer\n    }\n    else{\n      this.props.handler(this.props.trailer)\n    }\n\n  \tconst ratings = currentMovie.Ratings.map((rating, index) =>(\n  \t\t<li  key={index}>» {rating.Source}: {rating.Value} «</li>  \n \t  ));    \n\n    return (\n    \t<div className = \"show_Movie\" >\n        <img className= \"selected_Movie\" alt={currentMovie.Title} src={currentMovie.Poster}></img>\n          <h4> Rated: {currentMovie.Rated}</h4>   \n          <h4> Year: {currentMovie.Year}</h4> \n          <h4> Genre: {currentMovie.Genre} </h4>\n          <h5> Actors: {currentMovie.Actors} </h5>\n          <h5> Director: {currentMovie.Director} </h5>\n          <h5> Awards: {currentMovie.Awards} </h5>\n\t\t    <h4> Ratings </h4>\n        <ul style={{display: 'inline',margin: 40, listStyle: 'none'}}> {ratings} </ul>\n          <h4> Plot</h4>\n          <h5>{currentMovie.Plot} </h5>\n        <Video fullSrc= {this.state.fullSrc} videoID = {videoId}/>\n        <p>{errorMsg}</p>        \n      </div>\n    )\n  }\n}\nexport default MovieInfo;\n\n"]},"metadata":{},"sourceType":"module"}