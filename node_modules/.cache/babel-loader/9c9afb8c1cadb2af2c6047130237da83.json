{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js\";\nimport React, { Component } from 'react';\nimport Video from './Video';\n\nclass MovieInfo extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.shouldTrailerLoad = passedMovie => {\n      console.log(passedMovie);\n\n      if (passedMovie != null) {\n        if (this.props.youtube !== null) {\n          console.log('youtube id is present on backend');\n          window.location.reload();\n          return 'https://www.youtube.com/embed/' + this.props.youtube;\n        } else {\n          //mars trigged incoreectly\n          console.log('trailer fetched from youtube');\n          window.location.reload();\n          return 'https://www.youtube.com/embed/' + this.props.trailer;\n        }\n      } else {\n        //mars\n        console.log('youtube id retrieved from session');\n        let list = JSON.parse(sessionStorage.currentMovieList);\n        window.location.reload();\n        return 'https://www.youtube.com/embed/' + list.find(element => element = sessionStorage.currentMovie).youtube_id;\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.path(this.props.selectedMovie);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title && this.props.selectedMovie === \"\") {\n      console.log('different title'); //this.props.path(this.props.selectedMovie)\n    }\n  }\n\n  /*\n    shouldTrailerLoad = (passedMovie) => {\n      if (!!passedMovie !== !!null){\n        if (this.props.youtube !== null) {\n          console.log('youtube id is present on backend')\n          return ('https://www.youtube.com/embed/' + this.props.youtube)\n        }\n        else{\n          console.log('trailer fetched from youtube')\n          return ('https://www.youtube.com/embed/' + this.props.trailer)\n        }\n      }\n      else{\n        if (this.props.youtube!== null){\n          console.log(this.props.youtube)\n          return ('https://www.youtube.com/embed/' + this.props.youtube)\n        }\n        console.log('got null')\n        console.log(this.props)\n        //return ('https://www.youtube.com/embed/' + this.props.trailer)\n      }\n    }\n  */\n  render() {\n    let currentMovie = this.props.currentMovie;\n    let videoId;\n    let errorMsg;\n    let fullSrc = this.shouldTrailerLoad(this.props.selectedMovie);\n\n    if (this.props.trailer === \"kJQP7kiw5Fk\") {\n      errorMsg = \"due to an issue with this sites connection to youtube the trailer can not be viewed at this time\";\n      this.props.handler(\"default\");\n      videoId = this.props.trailer;\n    } else {\n      this.props.handler(this.props.trailer);\n    }\n\n    const ratings = currentMovie.Ratings.map((rating, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }\n    }, \"\\xBB \", rating.Source, \": \", rating.Value, \" \\xAB\"));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"show_Movie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"selected_Movie\",\n      alt: currentMovie.Title,\n      src: currentMovie.Poster,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, \" Rated: \", currentMovie.Rated), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \" Year: \", currentMovie.Year), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \" Genre: \", currentMovie.Genre, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, \" Actors: \", currentMovie.Actors, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \" Director: \", currentMovie.Director, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, \" Awards: \", currentMovie.Awards, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, \" Ratings \"), /*#__PURE__*/React.createElement(\"ul\", {\n      style: {\n        display: 'inline',\n        margin: 40,\n        listStyle: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \" \", ratings, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, \" Plot\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, currentMovie.Plot, \" \"), /*#__PURE__*/React.createElement(Video, {\n      fullSrc: fullSrc,\n      videoID: videoId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, errorMsg));\n  }\n\n}\n\nexport default MovieInfo;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js"],"names":["React","Component","Video","MovieInfo","shouldTrailerLoad","passedMovie","console","log","props","youtube","window","location","reload","trailer","list","JSON","parse","sessionStorage","currentMovieList","find","element","currentMovie","youtube_id","componentDidMount","path","selectedMovie","componentDidUpdate","prevProps","Title","render","videoId","errorMsg","fullSrc","handler","ratings","Ratings","map","rating","index","Source","Value","Poster","Rated","Year","Genre","Actors","Director","Awards","display","margin","listStyle","Plot"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Video from './Video';\n\nclass MovieInfo extends Component {\n\n  componentDidMount() {\n    this.props.path(this.props.selectedMovie)\n  }\n\n   componentDidUpdate(prevProps){\n\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title && this.props.selectedMovie === \"\")\n    {\n      console.log('different title')\n      //this.props.path(this.props.selectedMovie)\n    } \n  }\n\n  shouldTrailerLoad = (passedMovie) => {\n    console.log(passedMovie)\n    if (passedMovie != null){\n      if (this.props.youtube !== null) {\n        console.log('youtube id is present on backend')\n        window.location.reload()\n        return ('https://www.youtube.com/embed/' + this.props.youtube)\n        \n      }\n      else{\n        //mars trigged incoreectly\n        console.log('trailer fetched from youtube')\n        window.location.reload()\n        return ('https://www.youtube.com/embed/' + this.props.trailer)\n      }\n      }\n    else{\n      //mars\n      console.log('youtube id retrieved from session')\n      let list = JSON.parse(sessionStorage.currentMovieList)\n      window.location.reload()\n      return ('https://www.youtube.com/embed/' + list.find(element => element = sessionStorage.currentMovie).youtube_id)\n    }\n  }\n  \n  \n/*\n  shouldTrailerLoad = (passedMovie) => {\n    if (!!passedMovie !== !!null){\n      if (this.props.youtube !== null) {\n        console.log('youtube id is present on backend')\n        return ('https://www.youtube.com/embed/' + this.props.youtube)\n      }\n      else{\n        console.log('trailer fetched from youtube')\n        return ('https://www.youtube.com/embed/' + this.props.trailer)\n      }\n    }\n    else{\n      if (this.props.youtube!== null){\n        console.log(this.props.youtube)\n        return ('https://www.youtube.com/embed/' + this.props.youtube)\n      }\n      console.log('got null')\n      console.log(this.props)\n      //return ('https://www.youtube.com/embed/' + this.props.trailer)\n    }\n  }\n*/\n  render() {\n  \tlet currentMovie = this.props.currentMovie\n    let videoId \n    let errorMsg\n    let fullSrc = this.shouldTrailerLoad(this.props.selectedMovie)\n\n    if (this.props.trailer === \"kJQP7kiw5Fk\"){\n      errorMsg = \"due to an issue with this sites connection to youtube the trailer can not be viewed at this time\";\n      this.props.handler(\"default\")\n      videoId = this.props.trailer\n    }\n    else{\n      this.props.handler(this.props.trailer)\n    }\n\n  \tconst ratings = currentMovie.Ratings.map((rating, index) =>(\n  \t\t<li  key={index}>» {rating.Source}: {rating.Value} «</li>  \n \t  ));    \n\n    return (\n    \t<div className = \"show_Movie\" >\n        <img className= \"selected_Movie\" alt={currentMovie.Title} src={currentMovie.Poster}></img>\n          <h4> Rated: {currentMovie.Rated}</h4>   \n          <h4> Year: {currentMovie.Year}</h4> \n          <h4> Genre: {currentMovie.Genre} </h4>\n          <h5> Actors: {currentMovie.Actors} </h5>\n          <h5> Director: {currentMovie.Director} </h5>\n          <h5> Awards: {currentMovie.Awards} </h5>\n\t\t    <h4> Ratings </h4>\n        <ul style={{display: 'inline',margin: 40, listStyle: 'none'}}> {ratings} </ul>\n          <h4> Plot</h4>\n          <h5>{currentMovie.Plot} </h5>\n        <Video fullSrc= {fullSrc} videoID = {videoId}/>\n        <p>{errorMsg}</p>        \n      </div>\n    )\n  }\n}\nexport default MovieInfo;\n\n"]},"metadata":{},"sourceType":"module"}