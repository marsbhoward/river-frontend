{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/HomePage.js\";\nimport React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Button } from 'semantic-ui-react';\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { useHistory } from \"react-router-dom\";\nconst streamsList = [{\n  id: 1,\n  name: \"netflix\"\n}, {\n  id: 2,\n  name: \"hulu\"\n}, {\n  id: 3,\n  name: \"amazon\"\n}, {\n  id: 4,\n  name: \"hbo\"\n}, {\n  id: 5,\n  name: \"disney\"\n}, {\n  id: 6,\n  name: \"showtime\"\n}, {\n  id: 7,\n  name: \"starz\"\n}, {\n  id: 8,\n  name: \"cinimax\"\n}, {\n  id: 9,\n  name: \"dc\"\n}, {\n  id: 10,\n  name: \"apple\"\n}, {\n  id: 11,\n  name: \"epix\"\n}, {\n  id: 12,\n  name: \"cbs\"\n}, {\n  id: 13,\n  name: \"tbs\"\n}, {\n  id: 14,\n  name: \"tnt\"\n}, {\n  id: 15,\n  name: \"shudder\"\n}, {\n  id: 16,\n  name: \"amc\"\n}, {\n  id: 17,\n  name: \"fx\"\n}, {\n  id: 18,\n  name: \"syfy\"\n}, {\n  id: 19,\n  name: \"ifc\"\n}];\n\nfunction HomePage(props) {\n  const {\n    isAuthenticated,\n    loginWithRedirect\n  } = useAuth0();\n  const {\n    loading,\n    user\n  } = useAuth0();\n  const history = useHistory();\n  let stlyes = {\n    backgroundImage: \"url('https://raw.githubusercontent.com/marsbhoward/river-frontend/master/src/streams_logos/streamsBackground.png')\"\n  };\n\n  function handleClick() {\n    history.push(\"/streams\");\n    adapter.createUser(`user.email ${Date.now()} `, \"guest\").then(res => {});\n  }\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      className: \"home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"home\",\n    style: stlyes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, !isAuthenticated && React.createElement(\"div\", {\n    className: \"home-col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), !isAuthenticated && React.createElement(\"div\", {\n    className: \"home-col-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Find Your Streams\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"River is the pathway to all of your streaming platforms. create an account and you will be able to browse your selected providers movie catalogs, or you can click the streams button to view all available platforms.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), \"Select a movie and you can get the trailer, ratings, and more!\"), React.createElement(\"button\", {\n    onClick: () => loginWithRedirect({}),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Log in\"), React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Streams\"), React.createElement(Button.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button.Or, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(Button, {\n    positive: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Save\")))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, isAuthenticated && (adapter.createUser(user.email, user.name).then(res => {\n    user.id = res.id;\n    getUserStreams(user.id);\n    props.userID(user.id);\n  }), React.createElement(\"div\", {\n    className: \"greeting\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \" Hi \", user.name, \" \"), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \" Please wait to be redirected \")), history.push('/profile'))));\n}\n\nfunction getUserStreams(userID) {\n  streamsList.forEach(stream => {\n    adapter.createUserStream(userID, stream.id).then(res => {});\n  });\n}\n\nconst adapter = {\n  createUser: (email, username) => {\n    return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/users`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        username\n      })\n    }).then(res => res.json());\n  },\n  createUserStream: (user_id, stream_id) => {\n    return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/users/${user_id}/user_streams`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user_id,\n        stream_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default HomePage;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/HomePage.js"],"names":["React","Button","useAuth0","useHistory","streamsList","id","name","HomePage","props","isAuthenticated","loginWithRedirect","loading","user","history","stlyes","backgroundImage","handleClick","push","adapter","createUser","Date","now","then","res","email","getUserStreams","userID","forEach","stream","createUserStream","username","fetch","method","headers","body","JSON","stringify","json","user_id","stream_id","resp"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Button } from 'semantic-ui-react'\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { useHistory } from \"react-router-dom\";\n\n  const streamsList = [\n  {id: 1,name:\"netflix\"},{id: 2,name:\"hulu\"},{id: 3,name:\"amazon\"},\n  {id: 4,name:\"hbo\"},{id: 5,name:\"disney\"},{id: 6,name:\"showtime\"},\n  {id: 7,name:\"starz\"},{id: 8,name:\"cinimax\"},{id: 9,name:\"dc\"},\n  {id: 10,name:\"apple\"},{id: 11,name:\"epix\"},{id: 12,name:\"cbs\"},\n  {id: 13,name:\"tbs\"},{id: 14,name:\"tnt\"},{id: 15,name:\"shudder\"},\n  {id: 16,name:\"amc\"},{id: 17,name:\"fx\"},{id: 18,name:\"syfy\"},{id: 19,name:\"ifc\"}\n  ]\n\nfunction HomePage(props) {  \n  const { isAuthenticated, loginWithRedirect} = useAuth0();\n  const { loading, user } = useAuth0();\n  const history = useHistory();\n\n  let stlyes = {\n    backgroundImage: \"url('https://raw.githubusercontent.com/marsbhoward/river-frontend/master/src/streams_logos/streamsBackground.png')\",\n  }\n\n  function handleClick() {\n    history.push(\"/streams\");    \n    adapter.createUser(`user.email ${Date.now()} `,\"guest\").then(res=> {});\n  }\n\n\n  if (loading) {\n    return <div className = \"home\">Loading...</div>;\n  }\n\n \n    return (\n    <div>\n        <div className = \"home\" style={stlyes}>\n        {!isAuthenticated && (\n          <div className = \"home-col\"> \n          </div>\n           )}\n           {!isAuthenticated && (\n          <div className = \"home-col-2\"> \n            <h1>Find Your Streams</h1>\n            <p> \n              River is the pathway to all of your streaming platforms.\n              create an account and you will be able to browse your selected providers \n              movie catalogs, or you can click the streams button to view all available platforms. \n              <br/><br/>Select a movie and you can get the trailer, ratings, and more! \n            </p>\n            <button onClick={() => loginWithRedirect({})}>Log in</button>\n            <button onClick={handleClick}>Streams</button>\n  <Button.Group>\n    <Button>Cancel</Button>\n    <Button.Or />\n    <Button positive>Save</Button>\n  </Button.Group>            \n          </div>\n          \n        )}    \n      </div>\n      <div>\n         {isAuthenticated && (\n            adapter.createUser(user.email,user.name).then(res=> {\n              user.id = res.id\n              getUserStreams(user.id)\n              props.userID(user.id)\n            }),            \n            <div className=\"greeting\">\n              <h2> Hi {user.name} </h2>\n              <h4> Please wait to be redirected </h4>\n            </div>,\n            history.push('/profile')\n        )}     \n      </div>\n    </div>\n    );\n  }\n\n  function getUserStreams(userID){\n    streamsList.forEach(stream =>{ \n      adapter.createUserStream(userID,stream.id).then(res=> {\n      })\n    })  \n  }\n\n  const adapter = {\n    createUser: (email,username) => {\n      return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/users`, {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({email, username})\n      })\n    .then(res => res.json())       \n    },\n\n    createUserStream: (user_id,stream_id) => {\n      return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/users/${user_id}/user_streams`, {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({user_id, stream_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\n\nexport default HomePage\n\n"]},"metadata":{},"sourceType":"module"}