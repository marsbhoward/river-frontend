{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.logMovie = selectedMovie => {\n      //mars rerender problem?\n      this.setState({\n        selectedMovie: selectedMovie\n      });\n\n      if (selectedMovie.youtube_id === null) {\n        console.log(selectedMovie); //if youtube_id on api is empty\n        //not getting updated trailer here\n\n        this.fetchTrailer(selectedMovie.title, selectedMovie.year);\n        console.log('got trailer');\n      } else {\n        this.setState({\n          youtube: selectedMovie.youtube_id\n        });\n      }\n    };\n\n    this.trailerPath = passedMovie => {\n      let newMovieList = JSON.parse(sessionStorage.currentMovieList);\n      console.log(this); //mars passed movie is coming back null on occation\n\n      if (passedMovie) {\n        if (this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie.youtube_id === null) {\n          adapter.updateYoutubeID(passedMovie.stream_id, passedMovie.id, this.props.trailer).then(data => data);\n          passedMovie.youtube_id = this.props.trailer;\n          sessionStorage.setItem('currentMovieList', JSON.stringify(newMovieList));\n          console.log('trailer updated on backend');\n        } else if (this.props.trailer === 'kJQP7kiw5Fk') {\n          console.log('error loading video from youtube');\n        } else {\n          console.log('trailer was loaded from backend');\n        }\n\n        this.setState({\n          youtube: this.props.trailer\n        });\n      }\n    };\n\n    this.fetchTrailer = (title, year) => {\n      console.log('grabbing trailer');\n      console.log(title);\n      this.props.fetchTrailers(title, year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loading === true) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 14\n          }\n        }, \"Loading Info...\");\n      } else {\n        // change selected movie to backend movie\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(MovieInfo, {\n          youtube: this.state.youtube,\n          path: this.trailerPath,\n          selectedMovie: this.state.selectedMovie,\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 9\n          }\n        }));\n      }\n    };\n\n    this.trailerPath = this.trailerPath.bind(this);\n    this.state = {\n      selectedMovie: JSON.parse(sessionStorage.currentMovieList).find(element => element = sessionStorage.currentMovie),\n      youtube: null,\n      cssColor: \"\"\n    };\n  }\n\n  componentDidMount() {\n    //pass stream id and movie id in props\n    // only works with db complete reset\n    let apiMovieID = parseInt(sessionStorage.currentMovie); //if current movie does not have a youtube_id on the backend\n    //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      let apiMovieID = sessionStorage.currentMovie;\n\n      if (prevProps.currentBackend !== this.props.currentBackend) {\n        console.log(this.props);\n        console.log('updated');\n        adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => {\n          this.logMovie(movie);\n        });\n      } //if (prevProps.darkmodeProp !== this.props.darkmodeProp){\n\n\n      this.setState({\n        cssColor: this.props.css('Info', this.props.darkmodeProp)\n      }); //}\n    }\n  }\n\n  render() {\n    let title = 'title';\n\n    if (this.props.currentMovie.Title !== undefined) {\n      title = this.props.currentMovie.Title;\n    } else {\n      if (sessionStorage.selectedMovie.title) {\n        title = JSON.parse(sessionStorage.selectedMovie.title);\n        console.log(title);\n      } else {\n        console.log('reached');\n        window.location.reload();\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        background: this.state.cssColor.background,\n        color: this.state.cssColor.color\n      },\n      className: \"Info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"banner-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 6\n      }\n    }, title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  },\n  updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n    return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        movie_id,\n        youtube_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","constructor","props","logMovie","selectedMovie","setState","youtube_id","console","log","fetchTrailer","title","year","youtube","trailerPath","passedMovie","newMovieList","JSON","parse","sessionStorage","currentMovieList","trailer","adapter","updateYoutubeID","stream_id","id","then","data","setItem","stringify","handler","trailerID","handleLoading","loading","state","currentMovie","bind","find","element","cssColor","componentDidMount","apiMovieID","parseInt","componentDidUpdate","prevProps","currentBackend","getYoutubeID","streamID","movie","css","darkmodeProp","render","Title","undefined","window","location","reload","background","color","toUpperCase","mapDispatchToProps","TrailersReducer","movie_id","fetch","headers","resp","json","method","body"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component { \n\n  constructor(props){\n    super(props)\n    this.trailerPath = this.trailerPath.bind(this)\n    this.state = {\n      selectedMovie: JSON.parse(sessionStorage.currentMovieList).find(element => element = sessionStorage.currentMovie),\n      youtube: null,\n      cssColor: \"\"\n    }\n\n  } \n  \n  componentDidMount() {\n    \n    //pass stream id and movie id in props\n    // only works with db complete reset\n    let apiMovieID = parseInt(sessionStorage.currentMovie )\n\n\n    //if current movie does not have a youtube_id on the backend\n  \t  \n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n  \tif (prevProps!== this.props)\n  \t{\n      \n      let apiMovieID = sessionStorage.currentMovie \n      if (prevProps.currentBackend !== this.props.currentBackend){\n        console.log(this.props)\n        console.log('updated')\n        adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => {\n          this.logMovie(movie)\n        })\n      }\n      \n      //if (prevProps.darkmodeProp !== this.props.darkmodeProp){\n        this.setState({cssColor: this.props.css('Info',this.props.darkmodeProp)}) \n      //}\n  \t}\n  }\n\n  logMovie = (selectedMovie) => {    \n    //mars rerender problem?\n      this.setState({\n        selectedMovie: selectedMovie\n      })\n    if(selectedMovie.youtube_id === null){\n      console.log(selectedMovie)\n      //if youtube_id on api is empty\n      //not getting updated trailer here\n      this.fetchTrailer(selectedMovie.title,selectedMovie.year)\n      console.log('got trailer')\n    }\n    else {\n      this.setState({youtube: selectedMovie.youtube_id})\n    }        \n  }\n\n\n  trailerPath = (passedMovie) =>{\n    let newMovieList = JSON.parse(sessionStorage.currentMovieList)\n    console.log(this)\n    //mars passed movie is coming back null on occation\n    if (passedMovie){\n      if (this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie.youtube_id === null){ \n        adapter.updateYoutubeID(passedMovie.stream_id,passedMovie.id,this.props.trailer).then(data => data)\n        passedMovie.youtube_id = this.props.trailer\n        sessionStorage.setItem('currentMovieList',JSON.stringify(newMovieList)) \n        console.log('trailer updated on backend') \n      }\n      else if (this.props.trailer === 'kJQP7kiw5Fk') {\n     \n        console.log('error loading video from youtube')\n      }\n      else {\n        console.log('trailer was loaded from backend') \n      }\n      this.setState({\n        youtube:this.props.trailer\n      })\n    }\n  }\n\n  fetchTrailer = (title, year) => {\n    console.log('grabbing trailer')\n    console.log(title)\n  \tthis.props.fetchTrailers(title,year)\n\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    if(this.props.loading===true) \n    {\n      return <div>Loading Info...</div>\n    } \n    else {\n      // change selected movie to backend movie\n      return (\n      \t<div>\n      \t\t<MovieInfo youtube={this.state.youtube} path={this.trailerPath} selectedMovie ={this.state.selectedMovie} currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    let title = 'title'\n    if (this.props.currentMovie.Title !== undefined){\n      title = this.props.currentMovie.Title \n    }\n    else{\n      if (sessionStorage.selectedMovie.title){\n        title =  JSON.parse (sessionStorage.selectedMovie.title)\n        console.log(title)\n      }\n      else{\n        console.log('reached')\n        window.location.reload()\n      }\n    }\n    \n    return (\n    <div style={{background:this.state.cssColor.background,color:this.state.cssColor.color}}  className= \"Info\">\n    \t<div className=\"banner-3\">{title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    },\n\n    updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n      return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {  \n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, movie_id, youtube_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}