{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js\";\nimport React, { Component } from 'react';\nimport Video from './Video';\n\nclass MovieInfo extends Component {\n  componentDidMount() {\n    this.props.path(this.props.selectedMovie);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title && this.props.selectedMovie === \"\") {\n      console.log('different title'); //this.props.path(this.props.selectedMovie)\n    }\n  }\n\n  render() {\n    if (his.props.currentMovie) {\n      let currentMovie = this.props.currentMovie;\n      let videoId;\n      let fullSrc;\n      console.log(this.props.selectedMovie);\n\n      if (this.props.youtube !== null && this.props.selectedMovie !== null) {\n        fullSrc = 'https://www.youtube.com/embed/' + this.props.selectedMovie.youtube_id;\n        console.log('trailer was not fetched from youtube because it youtube id is present');\n      } else {\n        fullSrc = 'https://www.youtube.com/embed/' + this.props.trailer;\n        console.log(this.props.trailer);\n        console.log('trailer fetched from youtube');\n      }\n\n      let errorMsg;\n\n      if (this.props.trailer === \"kJQP7kiw5Fk\") {\n        errorMsg = \"due to an issue with this sites connection to youtube the trailer can not be viewed at this time\";\n        this.props.handler(\"default\");\n        videoId = this.props.trailer;\n      } else {\n        this.props.handler(this.props.trailer);\n      }\n\n      const ratings = currentMovie.Ratings.map((rating, index) => /*#__PURE__*/React.createElement(\"li\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 5\n        }\n      }, \"\\xBB \", rating.Source, \": \", rating.Value, \" \\xAB\"));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"show_Movie\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"selected_Movie\",\n        alt: currentMovie.Title,\n        src: currentMovie.Poster,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }, \" Rated: \", currentMovie.Rated), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, \" Year: \", currentMovie.Year), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, \" Genre: \", currentMovie.Genre, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, \" Actors: \", currentMovie.Actors, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }, \" Director: \", currentMovie.Director, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }, \" Awards: \", currentMovie.Awards, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }, \" Ratings \"), /*#__PURE__*/React.createElement(\"ul\", {\n        style: {\n          display: 'inline',\n          margin: 40,\n          listStyle: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, \" \", ratings, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }, \" Plot\"), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }, currentMovie.Plot, \" \"), /*#__PURE__*/React.createElement(Video, {\n        fullSrc: fullSrc,\n        videoID: videoId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }, errorMsg));\n    } else {\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, \"loading\");\n    }\n  }\n\n}\n\nexport default MovieInfo;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js"],"names":["React","Component","Video","MovieInfo","componentDidMount","props","path","selectedMovie","componentDidUpdate","prevProps","currentMovie","Title","console","log","render","his","videoId","fullSrc","youtube","youtube_id","trailer","errorMsg","handler","ratings","Ratings","map","rating","index","Source","Value","Poster","Rated","Year","Genre","Actors","Director","Awards","display","margin","listStyle","Plot"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Video from './Video';\n\nclass MovieInfo extends Component {\n\n  componentDidMount() {\n    this.props.path(this.props.selectedMovie)\n  }\n\n   componentDidUpdate(prevProps){\n\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title && this.props.selectedMovie === \"\")\n    {\n      console.log('different title')\n      //this.props.path(this.props.selectedMovie)\n    } \n  }\n\n  render() {\n    if(his.props.currentMovie){\n  \tlet currentMovie = this.props.currentMovie\n    let videoId \n    let fullSrc\n\n    console.log(this.props.selectedMovie )\n    if (this.props.youtube !== null && this.props.selectedMovie !== null){\n      fullSrc = 'https://www.youtube.com/embed/' + this.props.selectedMovie.youtube_id\n      console.log('trailer was not fetched from youtube because it youtube id is present')\n    }\n    else{\n      fullSrc = 'https://www.youtube.com/embed/' + this.props.trailer\n      console.log(this.props.trailer)\n      console.log('trailer fetched from youtube')\n    }\n    let errorMsg\n\n    if (this.props.trailer === \"kJQP7kiw5Fk\"){\n      errorMsg = \"due to an issue with this sites connection to youtube the trailer can not be viewed at this time\";\n      this.props.handler(\"default\")\n      videoId = this.props.trailer\n    }\n    else{\n      this.props.handler(this.props.trailer)\n    }\n    \n  \tconst ratings = currentMovie.Ratings.map((rating, index) =>(\n  \t\t<li  key={index}>» {rating.Source}: {rating.Value} «</li>  \n \t  ));    \n\n    return (\n    \t<div className = \"show_Movie\" >\n        <img className= \"selected_Movie\" alt={currentMovie.Title} src={currentMovie.Poster}></img>\n          <h4> Rated: {currentMovie.Rated}</h4>   \n          <h4> Year: {currentMovie.Year}</h4> \n          <h4> Genre: {currentMovie.Genre} </h4>\n          <h5> Actors: {currentMovie.Actors} </h5>\n          <h5> Director: {currentMovie.Director} </h5>\n          <h5> Awards: {currentMovie.Awards} </h5>\n\t\t    <h4> Ratings </h4>\n        <ul style={{display: 'inline',margin: 40, listStyle: 'none'}}> {ratings} </ul>\n          <h4> Plot</h4>\n          <h5>{currentMovie.Plot} </h5>\n        <Video fullSrc= {fullSrc} videoID = {videoId}/>\n        <p>{errorMsg}</p>        \n      </div>\n    )\n  }\n\n  else{\n    return (<h1>loading</h1>)\n  }\n}\n}\nexport default MovieInfo;\n\n"]},"metadata":{},"sourceType":"module"}