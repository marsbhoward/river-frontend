{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/ProfilePage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions';\nimport Profile from '../components/Profile';\nimport { Auth0Context } from \"../react-auth0-spa\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Button } from 'semantic-ui-react';\nimport $ from 'jquery';\nlet selectList = [];\n\nclass ProfilePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchUserStreams = id => {\n      this.setState({\n        userID: id\n      });\n    };\n\n    this.findTarget = e => {\n      // access to e.target here\n      console.log($(e.currentTarget)[0].className);\n    };\n\n    this.handleSwitch = (dom, stream) => {\n      switch (stream.selected) {\n        case true:\n          dom.style.borderStyle = 'outset';\n          dom.style.background = \"lightgray\";\n          dom.className = \"stream false\";\n          stream.selected = false;\n          break;\n\n        default:\n          dom.style.borderStyle = 'inset';\n          dom.style.background = \"white\";\n          dom.className = \"stream true\";\n          stream.selected = true;\n          break;\n      }\n    };\n\n    this.handleLists = stream => {\n      //can use stream.selected\n      let streamDom = document.getElementById(stream.stream_id);\n      this.handleSwitch(streamDom, stream);\n\n      if (selectList.indexOf(stream) === -1) {\n        selectList.push(stream);\n      } else {\n        let index = selectList.indexOf(stream);\n        selectList.splice(index, 1);\n      }\n    };\n\n    this.handleClick = () => {\n      let selectedStreams = document.getElementsByClassName(\"true\");\n      let unSelectedStreams = document.getElementsByClassName(\"false\");\n\n      for (let i = 0, len = selectedStreams.length; i < len; i++) {\n        selectedStreams[i].style.borderStyle = 'inset';\n      }\n\n      for (let i = 0, len = unSelectedStreams.length; i < len; i++) {\n        unSelectedStreams[i].style.borderStyle = 'outset';\n        unSelectedStreams[i].style.background = \"lightgray\";\n      }\n\n      this.setState({\n        streamEdit: true\n      });\n    };\n\n    this.handleDone = () => {\n      let streams = document.getElementsByClassName(\"stream\");\n\n      for (let i = 0, len = streams.length; i < len; i++) {\n        streams[i].style.borderStyle = 'none';\n        streams[i].style.background = \"white\";\n      }\n\n      this.setState({\n        streamEdit: false\n      }, function () {\n        document.body.scrollTop = 0;\n        document.documentElement.scrollTop = 0;\n      });\n      selectList.forEach(stream => {\n        adapter.editStream(stream.id, stream.selected, stream.user_id, stream.stream_id).then(data => data);\n      });\n\n      if (selectList.length > 0) {\n        alert(\"changes saved\");\n      }\n\n      selectList = [];\n    };\n\n    this.handleLoading = id => {\n      if (this.props.loading) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 14\n          }\n        }, \"Loading Streams...\");\n      } else {\n        return /*#__PURE__*/React.createElement(Profile, {\n          userID: id,\n          userStreams: this.props.userStreams,\n          handleLists: this.handleLists,\n          editClicked: this.state.streamEdit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.state = {\n      streamEdit: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchUserStreams(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps) {\n    localStorage.setItem('currentStream', ' ');\n    localStorage.setItem('currentStreamName', ' ');\n  }\n\n  render() {\n    const {\n      loading,\n      user\n    } = this.context; //const { isAuthenticated, loginWithRedirect} = this.context;\n\n    if (loading || !user) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    }\n\n    if (this.state.streamEdit === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"profile\",\n        onClick: this.props.pointer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: user.picture,\n        alt: \"Profile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }\n      }, \"Hi, \", user.name), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }\n      }, \"email: \", user.email), /*#__PURE__*/React.createElement(Button, {\n        basic: true,\n        loading: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      }, \"Loading\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }\n      }, \"click the buttons below to make changes, scroll to the bottom and click done when finished.\"), this.handleLoading(this.props.userId), /*#__PURE__*/React.createElement(Button, {\n        className: \"done-button\",\n        onClick: this.handleDone,\n        color: \"black\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }\n      }, \"Done\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"profile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: user.picture,\n        alt: \"Profile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }\n      }, \"Hi, \", user.name), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }, \"email: \", user.email), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"search\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleClick,\n        color: \"black\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }\n      }, \"Edit Streams\"), this.handleLoading(this.props.userId));\n    }\n  }\n\n}\n\nProfilePage.contextType = Auth0Context;\nconst adapter = {\n  editStream: (id, selected, user_id, stream_id) => {\n    return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/users/${user_id}/user_streams/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        id,\n        selected,\n        user_id,\n        stream_id\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json());\n  }\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams,\n    loading: state.StreamsReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchUserStreams\n})(ProfilePage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/ProfilePage.js"],"names":["React","Component","connect","fetchUserStreams","Profile","Auth0Context","Button","$","selectList","ProfilePage","constructor","props","id","setState","userID","findTarget","e","console","log","currentTarget","className","handleSwitch","dom","stream","selected","style","borderStyle","background","handleLists","streamDom","document","getElementById","stream_id","indexOf","push","index","splice","handleClick","selectedStreams","getElementsByClassName","unSelectedStreams","i","len","length","streamEdit","handleDone","streams","body","scrollTop","documentElement","forEach","adapter","editStream","user_id","then","data","alert","handleLoading","loading","userStreams","state","componentDidMount","userId","componentDidUpdate","prevProps","localStorage","setItem","render","user","context","pointer","picture","name","email","contextType","fetch","method","JSON","stringify","headers","res","json","mapDispatchToProps","StreamsReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions'\nimport Profile from '../components/Profile';\nimport { Auth0Context } from \"../react-auth0-spa\";\nimport 'semantic-ui-css/semantic.min.css'\nimport { Button } from 'semantic-ui-react'\nimport $ from 'jquery'; \n\n\nlet selectList = []\nclass ProfilePage extends Component {\n static contextType = Auth0Context; \n\n  constructor(props){\n    super(props)\n    this.state = {\n      streamEdit: false\n    }\n  } \n\n  \n  componentDidMount() {\n    this.props.fetchUserStreams(this.props.userId)\n  }\n\n\n  componentDidUpdate(prevProps){\n    localStorage.setItem('currentStream', ' ');\n    localStorage.setItem('currentStreamName', ' ');\n  }\n\n  fetchUserStreams = (id) => {\n    this.setState({\n      userID: id\n    })\n  }\n\n  findTarget = (e) => {\n    // access to e.target here\n    console.log($(e.currentTarget)[0].className);\n}\n\n  handleSwitch = (dom,stream) => {\n    switch (stream.selected) {\n      case true:\n        dom.style.borderStyle = 'outset';\n        dom.style.background = \"lightgray\";\n\n        dom.className =  \"stream false\"\n        stream.selected = false; \n        break;\n      default:\n        dom.style.borderStyle = 'inset'\n        dom.style.background = \"white\";\n        \n        dom.className =  \"stream true\"        \n        stream.selected = true; \n        break;\n    }\n  }\n\n  handleLists = (stream) => {\n    //can use stream.selected\n    let streamDom = document.getElementById(stream.stream_id)\n\n    this.handleSwitch(streamDom,stream)\n\n    if(selectList.indexOf(stream) === -1){\n      selectList.push(stream)\n    }\n    else {\n      let index = selectList.indexOf(stream);\n      selectList.splice(index,1);\n    }            \n  }\n\n\n  handleClick = () => {\n    let selectedStreams = document.getElementsByClassName(\"true\");\n    let unSelectedStreams = document.getElementsByClassName(\"false\");\n\n    for (let i = 0, len = selectedStreams.length; i < len; i++) {\n      selectedStreams[i].style.borderStyle = 'inset'\n    }\n\n    for (let i = 0, len = unSelectedStreams.length; i < len; i++) {\n      unSelectedStreams[i].style.borderStyle = 'outset';\n      unSelectedStreams[i].style.background = \"lightgray\"; \n    }\n\n    this.setState({\n      streamEdit: true\n    })            \n\n  } \n\n  handleDone = () => {\n    let streams = document.getElementsByClassName(\"stream\")\n    \n    for (let i = 0, len = streams.length; i < len; i++) {\n      streams[i].style.borderStyle = 'none';\n      streams[i].style.background = \"white\"; \n    }\n    this.setState({\n      streamEdit: false\n    },function () {\n    document.body.scrollTop = 0;\n    document.documentElement.scrollTop = 0;\n    })  \n\n    selectList.forEach( stream =>{\n      adapter.editStream(stream.id,stream.selected,stream.user_id,stream.stream_id).then(data => data)\n    })\n    if (selectList.length>0){\n        alert(\"changes saved\")\n    }\n    selectList = [];\n    \n  }\n\n\n  handleLoading = (id) => {\n    if(this.props.loading) {\n      return <div>Loading Streams...</div>\n    } else {\n      return <Profile userID={id} userStreams={this.props.userStreams} handleLists={this.handleLists} editClicked={this.state.streamEdit}/>\n    }\n  }\n\n  render() {\n    const { loading, user } = this.context;\n    //const { isAuthenticated, loginWithRedirect} = this.context;\n    \n    if (loading || !user) {\n      return <div>Loading...</div>;\n    }\n\n    if (this.state.streamEdit === true){\n      return ( \n        <div className= \"profile\" onClick={this.props.pointer}>\n          <img src={user.picture} alt=\"Profile\" />\n          <h2>Hi, {user.name}</h2>\n          <p>email: {user.email}</p>\n          <Button basic loading>\n            Loading\n          </Button>\n          <p>click the buttons below to make changes, scroll to the bottom and click done when finished.</p>\n          {this.handleLoading(this.props.userId)}\n          <Button className=\"done-button\" onClick={this.handleDone} color='black'>Done</Button>\n        </div>             \n      );\n    }\n    else{\n      return ( \n        <div className= \"profile\">\n          <img src={user.picture} alt=\"Profile\" />\n          <h2>Hi, {user.name}</h2>\n          <p>email: {user.email}</p>\n          <div className= \"search\">\n            \n          </div>\n          <Button onClick={this.handleClick} color='black'>Edit Streams</Button>\n          {this.handleLoading(this.props.userId)}\n        </div>             \n      );\n    }\n  }\n}\n\n  const adapter = {\n    editStream: (id,selected,user_id,stream_id) => {\n      return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/users/${user_id}/user_streams/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify({id,selected,user_id,stream_id}),\n        headers: { \"Content-Type\": \"application/json\" },\n        \n      })\n    .then(res => res.json())       \n    },\n  }\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams,\n    loading: state.StreamsReducer.loading\n  }\n}\n\n\nexport default connect(mapDispatchToProps, {fetchUserStreams})(ProfilePage)"]},"metadata":{},"sourceType":"module"}