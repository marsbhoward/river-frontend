{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/ProfilePage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions';\nimport Profile from '../components/Profile';\nimport { Auth0Context } from \"../react-auth0-spa\";\nimport { Fragment } from \"react\";\n\nclass ProfilePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchUserStreams = id => {\n      this.setState({\n        userID: id\n      });\n    };\n\n    this.handleClick = () => {\n      let selectedStreams = document.getElementsByClassName(\"true\");\n      let unSelectedStreams = document.getElementsByClassName(\"false\");\n\n      for (let i = 0, len = selectedStreams.length; i < len; i++) {\n        selectedStreams[i].style.borderStyle = 'inset';\n      }\n\n      for (let i = 0, len = unSelectedStreams.length; i < len; i++) {\n        unSelectedStreams[i].style.borderStyle = 'outset';\n        unSelectedStreams[i].background = \"lightgray\";\n      }\n\n      this.setState({\n        streamEdit: true\n      });\n    };\n\n    this.handleDone = () => {\n      let streams = document.getElementsByClassName(\"stream\");\n\n      for (let i = 0, len = streams.length; i < len; i++) {\n        streams[i].style.borderStyle = 'none';\n        streams[i].background = \"white\";\n      }\n    };\n\n    this.handleLoading = id => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"Loading Streams...\");\n      } else {\n        return React.createElement(Profile, {\n          userID: id,\n          userStreams: this.props.userStreams,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.state = {\n      streamEdit: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchUserStreams(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this);\n  }\n\n  render() {\n    const {\n      loading,\n      user\n    } = this.context;\n    const {\n      isAuthenticated,\n      loginWithRedirect\n    } = this.context;\n\n    if (loading || !user) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    if (this.state.streamEdit == true) {\n      return React.createElement(\"div\", {\n        className: \"profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: user.picture,\n        alt: \"Profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Hi, \", user.name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"email: \", user.email), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Edit Streams\"), this.handleLoading(this.props.userId), React.createElement(\"button\", {\n        className: \"done-button\",\n        onClick: this.handleDone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Done\"));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: user.picture,\n        alt: \"Profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Hi, \", user.name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"email: \", user.email), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Edit Streams\"), this.handleLoading(this.props.userId));\n    }\n  }\n\n}\n\nProfilePage.contextType = Auth0Context;\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams,\n    loading: state.StreamsReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchUserStreams\n})(ProfilePage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/ProfilePage.js"],"names":["React","Component","connect","fetchUserStreams","Profile","Auth0Context","Fragment","ProfilePage","constructor","props","id","setState","userID","handleClick","selectedStreams","document","getElementsByClassName","unSelectedStreams","i","len","length","style","borderStyle","background","streamEdit","handleDone","streams","handleLoading","loading","userStreams","state","componentDidMount","userId","componentDidUpdate","prevProps","console","log","render","user","context","isAuthenticated","loginWithRedirect","picture","name","email","contextType","mapDispatchToProps","StreamsReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions'\nimport Profile from '../components/Profile';\nimport { Auth0Context } from \"../react-auth0-spa\";\nimport { Fragment } from \"react\";\n\n\n\nclass ProfilePage extends Component {\n static contextType = Auth0Context; \n\n  constructor(props){\n    super(props)\n    this.state = {\n      streamEdit: false\n    }\n  } \n  \n  componentDidMount() {\n    this.props.fetchUserStreams(this.props.userId)\n  }\n\n  componentDidUpdate(prevProps){\n    console.log(this)\n  }\n\n  fetchUserStreams = (id) => {\n    this.setState({\n      userID: id\n    })\n  }\n\n  handleClick = () => {\n    let selectedStreams = document.getElementsByClassName(\"true\");\n    let unSelectedStreams = document.getElementsByClassName(\"false\");\n\n    for (let i = 0, len = selectedStreams.length; i < len; i++) {\n      selectedStreams[i].style.borderStyle = 'inset'\n    }\n\n    for (let i = 0, len = unSelectedStreams.length; i < len; i++) {\n      unSelectedStreams[i].style.borderStyle = 'outset';\n      unSelectedStreams[i].background = \"lightgray\"; \n    }\n\n    this.setState({\n      streamEdit: true\n    })            \n\n  } \n\n  handleDone = () => {\n    let streams = document.getElementsByClassName(\"stream\")\n    \n    for (let i = 0, len = streams.length; i < len; i++) {\n      streams[i].style.borderStyle = 'none';\n      streams[i].background = \"white\"; \n    }  \n  }\n\n  handleLoading = (id) => {\n    if(this.props.loading) {\n      return <div>Loading Streams...</div>\n    } else {\n      return <Profile userID={id} userStreams={this.props.userStreams}/>\n    }\n  }\n\n  render() {\n    const { loading, user } = this.context;\n    const { isAuthenticated, loginWithRedirect} = this.context;\n    \n    if (loading || !user) {\n      return <div>Loading...</div>;\n    }\n\n    if (this.state.streamEdit == true){\n      return ( \n        <div className= \"profile\">\n          <img src={user.picture} alt=\"Profile\" />\n          <h2>Hi, {user.name}</h2>\n          <p>email: {user.email}</p>\n          <button onClick={this.handleClick}>Edit Streams</button>\n          {this.handleLoading(this.props.userId)}\n          <button className=\"done-button\" onClick={this.handleDone}>Done</button>\n        </div>             \n      );\n    }\n    else{\n      return ( \n        <div className= \"profile\">\n          <img src={user.picture} alt=\"Profile\" />\n          <h2>Hi, {user.name}</h2>\n          <p>email: {user.email}</p>\n          <button onClick={this.handleClick}>Edit Streams</button>\n          {this.handleLoading(this.props.userId)}\n        </div>             \n      );\n    }\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams,\n    loading: state.StreamsReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, {fetchUserStreams})(ProfilePage)"]},"metadata":{},"sourceType":"module"}