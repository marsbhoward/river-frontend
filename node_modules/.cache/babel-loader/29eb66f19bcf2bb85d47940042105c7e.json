{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js\";\nimport React, { Component } from 'react';\nimport Video from './Video';\n\nclass MovieInfo extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.ratingsFuction = currentMovie => {\n      if (currentMovie.Ratings) {\n        return currentMovie.Ratings.map((rating, index) => /*#__PURE__*/React.createElement(\"li\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 11\n          }\n        }, \"\\xBB \", rating.Source, \": \", rating.Value, \" \\xAB\"));\n      } else {\n        return [0, 0, 0];\n      }\n    };\n\n    this.shouldTrailerLoad = passedMovie => {\n      if (passedMovie !== null) {\n        if (this.props.youtube !== null) {\n          console.log('youtube id is present on backend');\n          return 'https://www.youtube.com/embed/' + this.props.youtube;\n        } else {//mars trigged incoreectly\n          //happens when grabbing new movies info\n          //console.log('trailer fetched from youtube')\n          //this.props.path(passedMovie)\n          //return ('https://www.youtube.com/embed/' + this.props.trailer)\n        }\n      } else {\n        //mars\n        let list = JSON.parse(sessionStorage.currentMovieList);\n        let movie = list.find(element => element.id === parseInt(sessionStorage.currentMovie));\n\n        if (movie.youtube_id !== null) {\n          return 'https://www.youtube.com/embed/' + movie.youtube_id;\n        } else {\n          this.props.path(movie); //return ('https://www.youtube.com/embed/' + this.props.trailer)\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.path(this.props.selectedMovie);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title && this.props.selectedMovie === \"\") {\n      console.log('different title'); //this.props.path(this.props.selectedMovie)\n    }\n  }\n\n  /*\n    shouldTrailerLoad = (passedMovie) => {\n      if (!!passedMovie !== !!null){\n        if (this.props.youtube !== null) {\n          console.log('youtube id is present on backend')\n          return ('https://www.youtube.com/embed/' + this.props.youtube)\n        }\n        else{\n          console.log('trailer fetched from youtube')\n          return ('https://www.youtube.com/embed/' + this.props.trailer)\n        }\n      }\n      else{\n        if (this.props.youtube!== null){\n          console.log(this.props.youtube)\n          return ('https://www.youtube.com/embed/' + this.props.youtube)\n        }\n        console.log('got null')\n        console.log(this.props)\n        //return ('https://www.youtube.com/embed/' + this.props.trailer)\n      }\n    }\n  */\n  render() {\n    let currentMovie = this.props.selectedMovie;\n    let videoId;\n    let errorMsg;\n    let fullSrc = this.shouldTrailerLoad(this.props.selectedMovie);\n\n    if (this.props.trailer === \"kJQP7kiw5Fk\") {\n      errorMsg = \"due to an issue with this sites connection to youtube the trailer can not be viewed at this time\";\n      this.props.handler(\"default\");\n      videoId = this.props.trailer;\n    } else {\n      this.props.handler(this.props.trailer);\n    }\n\n    const ratings = this.ratingsFunction(currentMovie);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"show_Movie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"selected_Movie\",\n      alt: currentMovie.Title,\n      src: currentMovie.Poster,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, \" Rated: \", currentMovie.Rated), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, \" Year: \", currentMovie.Year), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \" Genre: \", currentMovie.Genre, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, \" Actors: \", currentMovie.Actors, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, \" Director: \", currentMovie.Director, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, \" Awards: \", currentMovie.Awards, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, \" Ratings \"), /*#__PURE__*/React.createElement(\"ul\", {\n      style: {\n        display: 'inline',\n        margin: 40,\n        listStyle: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, \" \", ratings, \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, \" Plot\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, currentMovie.Plot, \" \"), /*#__PURE__*/React.createElement(Video, {\n      fullSrc: fullSrc,\n      videoID: videoId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, errorMsg));\n  }\n\n}\n\nexport default MovieInfo;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js"],"names":["React","Component","Video","MovieInfo","ratingsFuction","currentMovie","Ratings","map","rating","index","Source","Value","shouldTrailerLoad","passedMovie","props","youtube","console","log","list","JSON","parse","sessionStorage","currentMovieList","movie","find","element","id","parseInt","youtube_id","path","componentDidMount","selectedMovie","componentDidUpdate","prevProps","Title","render","videoId","errorMsg","fullSrc","trailer","handler","ratings","ratingsFunction","Poster","Rated","Year","Genre","Actors","Director","Awards","display","margin","listStyle","Plot"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Video from './Video';\n\nclass MovieInfo extends Component {\n\n  componentDidMount() {\n    this.props.path(this.props.selectedMovie)\n    \n  }\n\n   componentDidUpdate(prevProps){\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title && this.props.selectedMovie === \"\")\n    {\n      console.log('different title')\n      //this.props.path(this.props.selectedMovie)\n    }\n     \n  }\n\n  ratingsFuction = (currentMovie) => {\n    if (currentMovie.Ratings){\n      return currentMovie.Ratings.map((rating, index) =>(\n          <li  key={index}>» {rating.Source}: {rating.Value} «</li>  \n        ));\n      }\n    else{\n      return [0,0,0]\n    }\n  }\n\n  shouldTrailerLoad = (passedMovie) => {\n    if (passedMovie !== null){\n      if (this.props.youtube !== null) {\n        console.log('youtube id is present on backend')\n        \n        return ('https://www.youtube.com/embed/' + this.props.youtube)\n        \n      }\n      else{\n        //mars trigged incoreectly\n        //happens when grabbing new movies info\n        //console.log('trailer fetched from youtube')\n        //this.props.path(passedMovie)\n        //return ('https://www.youtube.com/embed/' + this.props.trailer)\n        \n      }\n      }\n    else{\n      //mars\n      let list = JSON.parse(sessionStorage.currentMovieList)\n      let movie = list.find(element => element.id === parseInt(sessionStorage.currentMovie))\n\n      if(movie.youtube_id!== null){\n        return ('https://www.youtube.com/embed/' + movie.youtube_id)\n      }\n      else{\n        this.props.path(movie)\n        //return ('https://www.youtube.com/embed/' + this.props.trailer)\n      }\n    }\n  }\n  \n  \n/*\n  shouldTrailerLoad = (passedMovie) => {\n    if (!!passedMovie !== !!null){\n      if (this.props.youtube !== null) {\n        console.log('youtube id is present on backend')\n        return ('https://www.youtube.com/embed/' + this.props.youtube)\n      }\n      else{\n        console.log('trailer fetched from youtube')\n        return ('https://www.youtube.com/embed/' + this.props.trailer)\n      }\n    }\n    else{\n      if (this.props.youtube!== null){\n        console.log(this.props.youtube)\n        return ('https://www.youtube.com/embed/' + this.props.youtube)\n      }\n      console.log('got null')\n      console.log(this.props)\n      //return ('https://www.youtube.com/embed/' + this.props.trailer)\n    }\n  }\n*/\n  render() {\n  \tlet currentMovie = this.props.selectedMovie\n    let videoId \n    let errorMsg\n    let fullSrc = this.shouldTrailerLoad(this.props.selectedMovie)\n\n    if (this.props.trailer === \"kJQP7kiw5Fk\"){\n      errorMsg = \"due to an issue with this sites connection to youtube the trailer can not be viewed at this time\";\n      this.props.handler(\"default\")\n      videoId = this.props.trailer\n    }\n    else{\n      this.props.handler(this.props.trailer)\n    }\n\n   const ratings = this.ratingsFunction(currentMovie)\n\n\n    return (\n    \t<div className = \"show_Movie\" >\n        <img className= \"selected_Movie\" alt={currentMovie.Title} src={currentMovie.Poster}></img>\n          <h4> Rated: {currentMovie.Rated}</h4>   \n          <h4> Year: {currentMovie.Year}</h4> \n          <h4> Genre: {currentMovie.Genre} </h4>\n          <h5> Actors: {currentMovie.Actors} </h5>\n          <h5> Director: {currentMovie.Director} </h5>\n          <h5> Awards: {currentMovie.Awards} </h5>\n\t\t    <h4> Ratings </h4>\n        <ul style={{display: 'inline',margin: 40, listStyle: 'none'}}> {ratings} </ul>\n          <h4> Plot</h4>\n          <h5>{currentMovie.Plot} </h5>\n        <Video fullSrc= {fullSrc} videoID = {videoId}/>\n        <p>{errorMsg}</p>        \n      </div>\n    )\n  }\n}\nexport default MovieInfo;\n\n"]},"metadata":{},"sourceType":"module"}