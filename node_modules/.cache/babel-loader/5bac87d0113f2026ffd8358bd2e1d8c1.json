{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.logMovie = selectedMovie => {\n      if (selectedMovie.youtube_id === null) {\n        //if youtube_id on api is empty\n        console.log('came back null');\n        this.fetchTrailer();\n      } else {\n        console.log('not null');\n      }\n    };\n\n    this.fetchTrailer = () => {\n      this.props.fetchTrailers(this.props.currentMovie.Title, this.props.currentMovie.Year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, \"Loading Movies...\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(MovieInfo, {\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }));\n      }\n    };\n  }\n\n  componentDidMount() {\n    //pass stream id and movie id in props\n    let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie)); //if current movie does not have a youtube_id on the backend\n    //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title) {\n      let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"banner-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.props.currentMovie.Title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  },\n  updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n    return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        movie_id,\n        youtube_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","logMovie","selectedMovie","youtube_id","console","log","fetchTrailer","props","currentMovie","Title","Year","handler","trailer","trailerID","handleLoading","loading","componentDidMount","apiMovieID","movieID","streamID","adapter","getYoutubeID","then","movie","componentDidUpdate","prevProps","render","toUpperCase","mapDispatchToProps","state","TrailersReducer","stream_id","movie_id","fetch","headers","resp","json","updateYoutubeID","method","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {  \n  \n  componentDidMount() {\n    //pass stream id and movie id in props\n    let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n\n    //if current movie does not have a youtube_id on the backend\n  \t  \n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n\n  \tif (this.props.currentMovie.Title !== prevProps.currentMovie.Title)\n  \t{\n      let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n  \t}\n  }\n\n  logMovie = (selectedMovie) => {\n      if(selectedMovie.youtube_id === null){\n        //if youtube_id on api is empty\n        console.log('came back null')\n        this.fetchTrailer()\n      }\n      else {\n        console.log('not null')\n      }\n  }\n\n  fetchTrailer = () => {\n  \tthis.props.fetchTrailers(this.props.currentMovie.Title,this.props.currentMovie.Year)\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    if(this.props.loading) \n    {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      return (\n      \t<div>\n      \t\t<MovieInfo currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    return (\n    <div className= \"Info\">\n    \t<div className=\"banner-3\">{this.props.currentMovie.Title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    },\n\n    updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n      return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, movie_id, youtube_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}