{"ast":null,"code":"const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams';\nconst URL = PROXY + streamsAPI; //\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies(id) {\n  console.log('fetchMovies');\n  let listOfMovieIds = [];\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`${streamsAPI}/${id}/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      Promise.all(responseJSON.map(movie => fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}+&apikey=6b46131b`).then(resp => {\n        //write movie title to backend\n        return resp.json();\n      }))).then(listOfMovies => {\n        listOfMovies.map((movie, index) => {\n          let stream_id = id;\n          let movie_id = responseJSON[index].id;\n          let title = movie.Title;\n\n          if (responseJSON[index].title === null) {\n            fetch(`${URL}/${id}/movies/${responseJSON[index].id}?title=${title}`, {\n              method: 'PATCH',\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            }).then(response => {\n              listOfMovieIds.push(movie_id);\n\n              try {\n                dispatch({\n                  type: 'ADD_MOVIES',\n                  movies: listOfMovies,\n                  ids: listOfMovieIds\n                });\n              } catch (error) {\n                console.log(error);\n              }\n            });\n          } else {\n            listOfMovieIds.push(movie_id);\n\n            try {\n              dispatch({\n                type: 'ADD_MOVIES',\n                movies: listOfMovies,\n                ids: listOfMovieIds\n              });\n            } catch (error) {\n              console.log(error);\n            }\n          }\n        });\n      });\n    });\n  };\n}\nexport function listMovies() {\n  console.log('listMovies');\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'ADD_MOVIES',\n        movies: responseJSON\n      });\n    });\n  };\n} //send specific movie to omdb and retrieve all the data\n// for use with movie search\n\nexport function fetchTitle(movieInfo) {\n  console.log(movieInfo);\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`${streamsAPI}/${movieInfo.stream_id}/movies/${movieInfo.id}`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      Promise.all(console.log(responseJSON), responseJSON.map(movie => fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}+&apikey=6b46131b`).then(response => {\n        console.log(response);\n\n        try {\n          dispatch({\n            type: 'ADD_MOVIES',\n            currentTitle: response,\n            ids: movieInfo.id\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      })));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/actions/movieActions.js"],"names":["PROXY","streamsAPI","URL","fetchMovies","id","console","log","listOfMovieIds","dispatch","type","fetch","then","response","json","responseJSON","Promise","all","map","movie","slug","year","resp","listOfMovies","index","stream_id","movie_id","title","Title","method","headers","push","movies","ids","error","listMovies","fetchTitle","movieInfo","currentTitle"],"mappings":"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","sourcesContent":["const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams'\nconst URL = PROXY + streamsAPI\n\n\n//\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies (id) {\n    console.log('fetchMovies')\n    let listOfMovieIds = []\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`${streamsAPI}/${id}/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            Promise.all(\n                responseJSON.map(\n                    movie => fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}+&apikey=6b46131b`)\n                    .then(resp => {\n                        //write movie title to backend\n                        return resp.json()\n                    })\n                )\n            ).then(listOfMovies => {\n                listOfMovies.map((movie, index) => {\n                    let stream_id = id \n                    let movie_id = responseJSON[index].id\n                    let title = movie.Title\n                    if(responseJSON[index].title === null){   \n                        fetch(`${URL}/${id}/movies/${responseJSON[index].id}?title=${title}`, {\n                            method: 'PATCH',\n                            headers: { \"Content-Type\": \"application/json\" },\n                        }).then(response => {\n                            listOfMovieIds.push(movie_id)\n                        try {\n                            dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, ids: listOfMovieIds})\n                        }\n                        catch(error){\n                            console.log(error)\n                        }\n                    })\n                    }\n                    else {\n                        listOfMovieIds.push(movie_id)\n                        try {\n                            dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, ids: listOfMovieIds})\n                        }\n                        catch(error){\n                            console.log(error)\n                        }\n                    }  \n                })\n            })\n        })\n    }\n}\n\n\n\n\nexport function listMovies(){\n    console.log('listMovies')\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            dispatch({ type: 'ADD_MOVIES', movies: responseJSON})\n        })\n    }\n}\n\n//send specific movie to omdb and retrieve all the data\n// for use with movie search\nexport function fetchTitle(movieInfo){\n    console.log(movieInfo)\n    return (dispatch) => {\n            dispatch({ type: 'LOADING_MOVIES'})\n            fetch(`${streamsAPI}/${movieInfo.stream_id}/movies/${movieInfo.id}`).then(response => {\n                return response.json()\n            }).then(responseJSON => {\n                Promise.all(\n                    console.log(responseJSON),\n                    responseJSON.map(\n                        movie => fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}+&apikey=6b46131b`)\n                        .then(response => {\n                            console.log(response)\n                            try {\n                                dispatch({ type: 'ADD_MOVIES', currentTitle: response, ids: movieInfo.id})\n                            }\n                            catch(error){\n                                console.log(error)\n                            }\n                        })\n                    )\n                )    \n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}