{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions';\nimport { fetchTitle } from '../actions/movieActions';\nimport MovieList from '../components/MovieList';\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux';\n\nconst MoviesPage = props => {\n  const movieData = useSelector(state => state.MoviesReducer, []) || [];\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [movieDataArray, setMovieDataArray] = useState([]);\n  const [currentTitle, setCurrentTitle] = useState([]);\n  useEffect(() => {\n    if (typeof location.state !== \"undefined\") {\n      //set clicked\n      changeClicked();\n      getTitleData(); // CurrentMovie(movieData)\n    } else {\n      getMoviesArray();\n    }\n  }, []); //dispatch({type: 'LOADING_MOVIES'})\n  //props.fetchMovies(localStorage.currentStream)\n  //console.log(props)\n  //console.log(movieData)\n  //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n\n  function changeClicked() {\n    setCliked(true);\n  }\n\n  function trailerID(trailer) {//link trailer to backend\n  }\n\n  function getMoviesArray() {\n    dispatch(fetchMovies(localStorage.currentStream));\n    setMovieDataArray(movieData.movies);\n  }\n\n  function getTitleData() {\n    dispatch(fetchTitle(location.state.state.currentMovie)); //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n\n    setCurrentTitle(movieData.currentTitle);\n  }\n\n  function getcurrentTitle(movieData) {\n    dispatch(fetchTitle(movieData)); //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n\n    setCurrentTitle(movieData.currentTitle);\n    localStorage.setItem('selectedMovie', movieData.currentTitle);\n  }\n\n  function handleFunctions(e) {\n    props.pointer(e);\n    props.resetCount();\n  } //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n\n\n  function handleLoading() {\n    if (movieData.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 14\n        }\n      }, \"Loading Movies...\");\n    } else {\n      if (typeof location.state !== \"undefined\") {\n        if (typeof movieData.currentTitle !== \"undefined\") {\n          //getTitleData()\n          //getcurrentTitle(movieData.currentTitle)\n          console.log('yes');\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"moviesPage\",\n            onClick: handleFunctions,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(MovieList, {\n            passedMovie: JSON.parse(localStorage.selectedMovie),\n            streamID: localStorage.currentStream,\n            isClicked: clicked,\n            trailerID: trailerID,\n            movieCards: movieData.movies,\n            movieIds: movieData.ids,\n            currentStream: localStorage.currentStreamName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 13\n            }\n          }));\n        } else getTitleData();\n\n        console.log(2);\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"moviesPage\",\n          onClick: handleFunctions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(MovieList, {\n          passedMovie: movieData.currentTitle,\n          streamID: localStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: localStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        //getMoviesArray()\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"moviesPage\",\n          onClick: handleFunctions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(MovieList, {\n          passGetData: getcurrentTitle,\n          streamID: localStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: JSON.parse(localStorage.currentMovieList),\n          movieIds: movieData.ids,\n          currentStream: localStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 19\n          }\n        }));\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, handleLoading());\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchMovies,\n  fetchTitle\n})(MoviesPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js"],"names":["React","useState","useEffect","connect","fetchMovies","fetchTitle","MovieList","useLocation","useSelector","useDispatch","useStore","MoviesPage","props","movieData","state","MoviesReducer","dispatch","location","clicked","setCliked","movieDataArray","setMovieDataArray","currentTitle","setCurrentTitle","changeClicked","getTitleData","getMoviesArray","trailerID","trailer","localStorage","currentStream","movies","currentMovie","getcurrentTitle","setItem","handleFunctions","e","pointer","resetCount","handleLoading","loading","console","log","JSON","parse","selectedMovie","ids","currentStreamName","currentMovieList","mapDispatchToProps","movieCards","movieIds"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions'\nimport { fetchTitle } from '../actions/movieActions'\nimport MovieList from '../components/MovieList'\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux'\n\nconst MoviesPage = (props) => { \n  const movieData = useSelector(state => state.MoviesReducer, []) || []; \n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [movieDataArray,setMovieDataArray] = useState([]); \n  const [currentTitle, setCurrentTitle] = useState([]); \n\n  useEffect(() => {\n      if (typeof location.state !== \"undefined\"){\n        //set clicked\n        changeClicked()\n        getTitleData()\n       \n        \n        \n       // CurrentMovie(movieData)\n        \n\n      }\n      else{\n        getMoviesArray()\n      }       \n    }, []);\n    //dispatch({type: 'LOADING_MOVIES'})\n    //props.fetchMovies(localStorage.currentStream)\n    //console.log(props)\n    //console.log(movieData)\n    //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n  \n  function changeClicked(){\n    setCliked(true)\n  }\n\n  function trailerID(trailer){ \n    //link trailer to backend\n  }\n\n  function getMoviesArray(){\n    dispatch(fetchMovies(localStorage.currentStream));\n    setMovieDataArray(movieData.movies)  \n  }\n  function getTitleData(){\n    dispatch(fetchTitle(location.state.state.currentMovie))\n    //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    setCurrentTitle(movieData.currentTitle)\n  }\n\n  function getcurrentTitle(movieData){\n    dispatch(fetchTitle(movieData))\n    //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    setCurrentTitle(movieData.currentTitle)\n    localStorage.setItem('selectedMovie', movieData.currentTitle)\n  }\n\n  function handleFunctions (e){\n    props.pointer(e)\n    props.resetCount()\n  }\n\n\n  //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n  function handleLoading (){\n    \n    if(movieData.loading) {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      if (typeof location.state !== \"undefined\"){\n        if (typeof movieData.currentTitle !== \"undefined\"){\n          //getTitleData()\n          //getcurrentTitle(movieData.currentTitle)\n          console.log('yes')\n          return(\n          <div className=\"moviesPage\" onClick={handleFunctions}>\n            <MovieList  passedMovie={JSON.parse(localStorage.selectedMovie)} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n          </div>\n          )\n        }\n        else\n        getTitleData()\n        console.log(2)\n          return(\n            <div className=\"moviesPage\" onClick={handleFunctions}>\n              <MovieList passedMovie={movieData.currentTitle} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n            </div>\n          )\n      }\n        else{\n          //getMoviesArray()\n            return (\n              <div className=\"moviesPage\" onClick={handleFunctions}>\n                  <MovieList passGetData={getcurrentTitle} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={JSON.parse(localStorage.currentMovieList)} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n              </div>\n            )\n        }\n      \n    }\n  }\n\n  \n    return (\n      <div className=\"App\">\n        {handleLoading()}\n      </div>\n    );\n  }\n\n\n\n\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, { fetchMovies,fetchTitle })(MoviesPage)"]},"metadata":{},"sourceType":"module"}