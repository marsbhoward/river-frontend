{"ast":null,"code":"const currentStreams = {\n  streams: []\n};\nvar streamsList = [];\n\nclass Stream {\n  constructor(name) {\n    this.name = name;\n  }\n\n}\n\nvar getStreamsList = new Promise((resolve, reject) => {\n  const xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", \"http://localhost:3000/streams\");\n\n  xhr.onload = () => resolve(JSON.parse(xhr.responseText));\n\n  xhr.onerror = () => reject(xhr.statusText);\n\n  xhr.send();\n});\nvar getStreamDetails = getStreamsList.then(function (fulfilledList) {\n  console.log(fulfilledList);\n}).catch(function (error) {\n  console.log(error.message);\n});\nexport default streamsList;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/data.js"],"names":["currentStreams","streams","streamsList","Stream","constructor","name","getStreamsList","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","JSON","parse","responseText","onerror","statusText","send","getStreamDetails","then","fulfilledList","console","log","catch","error","message"],"mappings":"AAAA,MAAMA,cAAc,GAAG;AACtBC,EAAAA,OAAO,EAAE;AADa,CAAvB;AAGA,IAAIC,WAAW,GAAG,EAAlB;;AAEA,MAAMC,MAAN,CAAY;AACXC,EAAAA,WAAW,CAACC,IAAD,EAAM;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA;;AAHU;;AAOZ,IAAIC,cAAc,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtD,QAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AAEAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgB,+BAAhB;;AACAF,EAAAA,GAAG,CAACG,MAAJ,GAAa,MAAML,OAAO,CAACM,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACM,YAAf,CAAD,CAA1B;;AACAN,EAAAA,GAAG,CAACO,OAAJ,GAAc,MAAMR,MAAM,CAACC,GAAG,CAACQ,UAAL,CAA1B;;AACAR,EAAAA,GAAG,CAACS,IAAJ;AACC,CAPoB,CAArB;AAUA,IAAIC,gBAAgB,GAAGd,cAAc,CACpCe,IADsB,CACjB,UAAUC,aAAV,EAAyB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AAEG,CAJY,EAKlBG,KALkB,CAKZ,UAAUC,KAAV,EAAiB;AACpBH,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,OAAlB;AACH,CAPkB,CAAvB;AAYA,eAAezB,WAAf","sourcesContent":["const currentStreams = {\n\tstreams: [],\n};\nvar streamsList = [];\n\nclass Stream{\n\tconstructor(name){\n\t\tthis.name = name;\n\t}\n\t\n}\n\nvar getStreamsList = new Promise((resolve, reject) => {\nconst xhr = new XMLHttpRequest();\n\nxhr.open(\"GET\", \"http://localhost:3000/streams\");\nxhr.onload = () => resolve(JSON.parse(xhr.responseText));\nxhr.onerror = () => reject(xhr.statusText);\nxhr.send();\n});\n\n\nvar getStreamDetails = getStreamsList\n.then(function (fulfilledList) {\n        console.log(fulfilledList);\n\n          })\n    .catch(function (error) {\n        console.log(error.message);\n    });\n\n\n\n\nexport default streamsList"]},"metadata":{},"sourceType":"module"}