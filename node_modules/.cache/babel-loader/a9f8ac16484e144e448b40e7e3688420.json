{"ast":null,"code":"var casper = {}; // ==================================\n// General\n// ==================================\n// ==================================\n// Send data or and empty response\n// ==================================\n\ncasper.send = casper.noop = function (data) {\n  return function (req, res) {\n    res.jsonp(data || {});\n  };\n}; // ==================================\n// Generic response handler.\n// Use in a database callback to automatically serve the retrieved data, or a\n// 404 if none is found. You can also supply a callback to be called when no\n// error was generated and some data was returned, and an errorback for any\n// other situation.\n//\n// Example:\n//\n//   User.find({}).exec(casper.respond(req, res))\n//\n//   User.find({}).exec(casper.respond(req, res, function (err, data) {\n//     // err will always be falsey\n//     . . .\n//   }));\n//\n//   User.find({}).exec(casper.respond(req, res, function (err, data) {\n//     . . .\n//   }, function (err) {\n//     // This will called if there was an error or no data.\n//     . . .\n//   }));\n//\n//  Returns a function that accepts two parameters. error  dat\n// ==================================\n\n\ncasper.respond = casper.db = function (req, res, cb, errb) {\n  return function (err, data) {\n    if (err) {\n      return errb ? errb(err) : res.jsonp(500, {\n        error: err.message\n      });\n    }\n\n    if (!data) {\n      return errb ? errb(err, data) : res.jsonp(404, {\n        error: 'Not found.'\n      });\n    }\n\n    if (cb) return cb(err, data);\n    return res.jsonp(data);\n  };\n}; // ==================================\n// Database\n// ==================================\n// ==================================\n// Generic model creator\n// Supply a model object (a constructor) that accepts an object for its data.\n// ==================================\n\n\ncasper.create = function (Model, data, allowBody, cb) {\n  return function (req, res) {\n    var raw = new Model(data || (allowBody ? req.body : {}));\n    raw.save(cb || function (err, obj) {\n      if (err) return res.jsonp(500, err);\n      res.jsonp(obj);\n    });\n  };\n}; // ==================================\n// Checks & filters\n// ==================================\n\n\ncasper.check = function (property, keys, cb) {\n  if (typeof keys === 'string') keys = [keys];\n  return function (req, res, next) {\n    if (!req[property]) return next();\n    var missing = [];\n    keys.forEach(function (key) {\n      var ok = true;\n      if (cb) ok = cb(req[property][key], req[property]);\n\n      if (!ok || typeof req[property][key] === \"undefined\") {\n        missing.push(key);\n      }\n    });\n    if (!missing.length) return next();\n    casper.error.badRequest('Missing ' + missing.join(', ') + ' from ' + property + '.')(req, res);\n  };\n}; // ==================================\n// Parameter checking callback\n// Optional checking function. Defaults to truth checking with !\n// ==================================\n\n\ncasper.check.params = casper.check.bind(null, 'params'); // ==================================\n// Body checking.\n// Like above, suports cb checking function.\n// ==================================\n\ncasper.check.body = casper.check.bind(null, 'body'); // ==================================\n// Query checking.\n// Like above, suports cb checking function.\n// ==================================\n\ncasper.check.query = casper.check.bind(null, 'query'); // ==================================\n// Remove\n// ==================================\n\ncasper.rm = function (property, keys) {\n  if (typeof keys === 'string') keys = [keys];\n  return function (req, res, next) {\n    if (!req[property]) return next();\n    keys.forEach(function (key) {\n      if (req[property][key]) {\n        delete req[property][key];\n      }\n    });\n    next();\n  };\n};\n\n; // ==================================\n// Remove key from req.body\n// ==================================\n\ncasper.rm.body = casper.rm.bind(null, 'body'); // ==================================\n// Allow\n// ==================================\n\ncasper.allow = function (property, keys) {\n  if (typeof keys === 'string') keys = [keys];\n  return function (req, res, next) {\n    if (!req[property]) return next(); // Remove all unwanted keys from the body\n\n    Object.keys(req[property]).forEach(function (key) {\n      if (keys.indexOf(key) === -1) {\n        delete req[property][key];\n      }\n    });\n    next();\n  };\n}; // ==================================\n// Only allow certain keys on the body\n// ==================================\n\n\ncasper.allow.body = casper.allow.bind(null, 'body'); // ==================================\n// Errors\n// ==================================\n\ncasper.error = function (code, msg) {\n  return function (req, res) {\n    res.jsonp(code, {\n      error: msg\n    });\n  };\n}; // ==================================\n// 400 Bad Request\n// ==================================\n\n\ncasper.error.badRequest = casper.error.bind(null, 400); // ==================================\n// Logging\n// ==================================\n// ==================================\n// Log a key from the request\n// ==================================\n\ncasper.log = function (key) {\n  return function (req, res, next) {\n    console.log(key, casper.util.atString(req, key));\n    next();\n  };\n};\n\ncasper.log.the = casper.log; // ==================================\n// Utils\n// ==================================\n\ncasper.util = {}; // ==================================\n// Get or set object key via string.\n//\n// Examples:\n//\n//   var user = { name: { first: 'Tom' } },\n//       firstname;\n//   firstname = casper.util.at(user, 'name.first'); // Tom\n//   casper.util.at(user, 'name.first', 'Joe')\n//   firstname = casper.util.at(user, 'name.first'); // Joe\n//\n// Returns the original object.\n// ==================================\n\ncasper.util.at = casper.util.atString = function (obj, str, val) {\n  var args = [].slice.call(arguments);\n  str = str.replace(/\\[(\\w+)\\]/g, '.$1').replace(/^\\./, '');\n  var arr = str.split('.'),\n      parent,\n      key;\n\n  while (arr.length) {\n    key = arr.shift();\n\n    if (key in obj) {\n      parent = obj;\n      obj = obj[key];\n    } else {\n      return;\n    }\n  }\n\n  if (args.length > 2) {\n    parent[key] = val;\n  }\n\n  return obj;\n};\n\nmodule.exports = casper;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river/frontend/app/node_modules/casper/index.js"],"names":["casper","send","noop","data","req","res","jsonp","respond","db","cb","errb","err","error","message","create","Model","allowBody","raw","body","save","obj","check","property","keys","next","missing","forEach","key","ok","push","length","badRequest","join","params","bind","query","rm","allow","Object","indexOf","code","msg","log","console","util","atString","the","at","str","val","args","slice","call","arguments","replace","arr","split","parent","shift","module","exports"],"mappings":"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","sourcesContent":["var casper = {};\n\n// ==================================\n// General\n// ==================================\n\n// ==================================\n// Send data or and empty response\n// ==================================\ncasper.send = casper.noop = function (data) {\n  return function (req, res) {\n    res.jsonp(data || {});\n  };\n};\n\n// ==================================\n// Generic response handler.\n// Use in a database callback to automatically serve the retrieved data, or a\n// 404 if none is found. You can also supply a callback to be called when no\n// error was generated and some data was returned, and an errorback for any\n// other situation.\n//\n// Example:\n//\n//   User.find({}).exec(casper.respond(req, res))\n//\n//   User.find({}).exec(casper.respond(req, res, function (err, data) {\n//     // err will always be falsey\n//     . . .\n//   }));\n//\n//   User.find({}).exec(casper.respond(req, res, function (err, data) {\n//     . . .\n//   }, function (err) {\n//     // This will called if there was an error or no data.\n//     . . .\n//   }));\n//\n//  Returns a function that accepts two parameters. error  dat\n// ==================================\ncasper.respond = casper.db = function (req, res, cb, errb) {\n  return function (err, data) {\n    if (err) {\n      return (errb ? errb(err) : res.jsonp(500, { error: err.message }));\n    }\n    if (!data) {\n      return (errb ? errb(err, data) : res.jsonp(404, { error: 'Not found.' }));\n    }\n    if (cb) return cb(err, data);\n    return res.jsonp(data);\n  };\n};\n\n// ==================================\n// Database\n// ==================================\n\n// ==================================\n// Generic model creator\n// Supply a model object (a constructor) that accepts an object for its data.\n// ==================================\ncasper.create = function (Model, data, allowBody, cb) {\n  return function (req, res) {\n    var raw = new Model(data || (allowBody ? req.body : {}));\n    raw.save(cb || function (err, obj) {\n      if (err) return res.jsonp(500, err);\n      res.jsonp(obj);\n    });\n  };\n};\n\n// ==================================\n// Checks & filters\n// ==================================\n\ncasper.check = function (property, keys, cb) {\n  if (typeof keys === 'string') keys = [keys];\n  return function (req, res, next) {\n    if (!req[property]) return next();\n    var missing = [];\n    keys.forEach(function (key) {\n      var ok = true;\n      if (cb) ok = cb(req[property][key], req[property]);\n      if(!ok || typeof req[property][key] === \"undefined\") {\n        missing.push(key);\n      }\n    });\n    if (!missing.length) return next();\n    casper.error\n     .badRequest('Missing ' + missing.join(', ') + ' from ' + property + '.')(req, res);\n  };\n};\n\n// ==================================\n// Parameter checking callback\n// Optional checking function. Defaults to truth checking with !\n// ==================================\ncasper.check.params = casper.check.bind(null, 'params');\n\n// ==================================\n// Body checking.\n// Like above, suports cb checking function.\n// ==================================\ncasper.check.body = casper.check.bind(null, 'body');\n\n// ==================================\n// Query checking.\n// Like above, suports cb checking function.\n// ==================================\ncasper.check.query = casper.check.bind(null, 'query');\n\n// ==================================\n// Remove\n// ==================================\n\ncasper.rm = function (property, keys) {\n  if (typeof keys === 'string') keys = [keys];\n  return function (req, res, next) {\n    if (!req[property]) return next();\n    keys.forEach(function (key) {\n      if (req[property][key]) {\n        delete req[property][key];\n      }\n    });\n    next();\n  };\n};;\n\n// ==================================\n// Remove key from req.body\n// ==================================\ncasper.rm.body = casper.rm.bind(null, 'body');\n\n// ==================================\n// Allow\n// ==================================\n\ncasper.allow = function (property, keys) {\n  if (typeof keys === 'string') keys = [keys];\n  return function (req, res, next) {\n    if (!req[property]) return next();\n    // Remove all unwanted keys from the body\n    Object.keys(req[property]).forEach(function (key) {\n      if (keys.indexOf(key) === -1) {\n        delete req[property][key];\n      }\n    });\n    next();\n  };\n};\n\n// ==================================\n// Only allow certain keys on the body\n// ==================================\n\ncasper.allow.body = casper.allow.bind(null, 'body');\n\n// ==================================\n// Errors\n// ==================================\n\ncasper.error = function (code, msg) {\n  return function (req, res) {\n    res.jsonp(code, { error: msg });\n  };\n};\n\n// ==================================\n// 400 Bad Request\n// ==================================\ncasper.error.badRequest = casper.error.bind(null, 400);\n\n// ==================================\n// Logging\n// ==================================\n\n// ==================================\n// Log a key from the request\n// ==================================\ncasper.log = function (key) {\n  return function (req, res, next) {\n    console.log(key, casper.util.atString(req, key));\n    next();\n  };\n};\n\ncasper.log.the = casper.log;\n\n// ==================================\n// Utils\n// ==================================\n\ncasper.util = {};\n\n// ==================================\n// Get or set object key via string.\n//\n// Examples:\n//\n//   var user = { name: { first: 'Tom' } },\n//       firstname;\n//   firstname = casper.util.at(user, 'name.first'); // Tom\n//   casper.util.at(user, 'name.first', 'Joe')\n//   firstname = casper.util.at(user, 'name.first'); // Joe\n//\n// Returns the original object.\n// ==================================\ncasper.util.at = casper.util.atString = function(obj, str, val) {\n  var args = [].slice.call(arguments);\n  str = str.replace(/\\[(\\w+)\\]/g, '.$1')\n           .replace(/^\\./, '');\n  var arr = str.split('.'),\n      parent, key;\n  while (arr.length) {\n    key = arr.shift();\n    if (key in obj) {\n      parent = obj;\n      obj = obj[key];\n    } else {\n      return;\n    }\n  }\n  if (args.length > 2) {\n    parent[key] = val;\n  }\n  return obj;\n};\n\nmodule.exports = casper;"]},"metadata":{},"sourceType":"script"}