{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions';\nimport { fetchTitle } from '../actions/movieActions';\nimport MovieList from '../components/MovieList';\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\n\nconst MoviesPage = props => {\n  const history = useHistory();\n  const movieData = useSelector(state => state.MoviesReducer, []) || [];\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [cssColor, setCssColor] = useState(\"\"); //const [movieDataArray,setMovieDataArray] = useState([]); \n  //const [currentTitle, setCurrentTitle] = useState([]); \n\n  const [count, setCount] = useState(0);\n  const [pageCount, setPageCount] = useState(0);\n  useEffect(() => {\n    setCssColor(props.css('Movies', props.darkmodeProp));\n    console.log(props.css('Movies', props.darkmodeProp));\n    console.log(sessionStorage.currentStreamName);\n\n    if (sessionStorage.currentStreamName === \" \") {\n      alert(\"error selecting stream please try again\");\n      history.push(`/userstreams`);\n    }\n\n    if (typeof location.state !== \"undefined\") {\n      //set clicked\n      changeClicked();\n      getTitleData();\n      console.log('default'); // CurrentMovie(movieData)\n    } else {\n      console.log('got array');\n      getMoviesArray();\n    }\n  }, []); //dispatch({type: 'LOADING_MOVIES'})\n  //props.fetchMovies(sessionStorage.currentStream)\n  //console.log(props)\n  //console.log(movieData)\n  //console.log(dispatch(fetchMovies(sessionStorage.currentStream)))\n\n  function changeClicked() {\n    setCliked(true);\n  }\n\n  function trailerID(trailer) {//link trailer to backend\n  }\n\n  function getMoviesArray() {\n    dispatch(fetchMovies(sessionStorage.currentStream)); //setMovieDataArray(movieData.movies)  \n  }\n\n  function getTitleData() {\n    dispatch(fetchTitle(location.state.state.currentMovie)); //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    //setCurrentTitle(movieData.currentTitle)\n  }\n\n  function getcurrentTitle(movieData) {\n    dispatch(fetchTitle(movieData)); //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    //setCurrentTitle(movieData.currentTitle)\n\n    sessionStorage.setItem('selectedMovie', movieData.currentTitle);\n  }\n\n  function handleFunctions(e) {\n    props.pointer(e);\n    props.resetCount();\n  }\n\n  function handler() {\n    changeClicked();\n    setCount(0);\n  } //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n\n\n  function handleLoading() {\n    if (count < 1 && typeof location.state !== \"undefined\") {\n      getTitleData();\n      getMoviesArray();\n      setCount(count + 1);\n    }\n\n    if (movieData.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 14\n        }\n      }, \"Loading Movies...\");\n    }\n\n    if (typeof location.state !== \"undefined\") {\n      if (typeof movieData.currentTitle !== \"undefined\") {\n        console.log('movielist1'); //getTitleData()\n        //getcurrentTitle(movieData.currentTitle)\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"moviesPage\",\n          onClick: handleFunctions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(MovieList, {\n          handler: handler,\n          darkmodeProp: props.darkmodeProp,\n          css: props.css,\n          movieBackend: location.state.state.currentMovie,\n          passedMovie: JSON.parse(sessionStorage.selectedMovie),\n          streamID: sessionStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: sessionStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }\n        }));\n      }\n    } else {\n      console.log('movielist3'); //getMoviesArray()\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"moviesPage\",\n        onClick: handleFunctions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MovieList, {\n        handler: handler,\n        darkmodeProp: props.darkmodeProp,\n        css: props.css,\n        passGetData: getcurrentTitle,\n        streamID: sessionStorage.currentStream,\n        isClicked: clicked,\n        trailerID: trailerID,\n        movieCards: movieData.movies,\n        movieIds: movieData.ids,\n        currentStream: sessionStorage.currentStreamName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 19\n        }\n      }));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      background: cssColor.background\n    },\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, handleLoading());\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchMovies,\n  fetchTitle\n})(MoviesPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js"],"names":["React","useState","useEffect","connect","fetchMovies","fetchTitle","MovieList","useLocation","useSelector","useDispatch","useHistory","MoviesPage","props","history","movieData","state","MoviesReducer","dispatch","location","clicked","setCliked","cssColor","setCssColor","count","setCount","pageCount","setPageCount","css","darkmodeProp","console","log","sessionStorage","currentStreamName","alert","push","changeClicked","getTitleData","getMoviesArray","trailerID","trailer","currentStream","currentMovie","getcurrentTitle","setItem","currentTitle","handleFunctions","e","pointer","resetCount","handler","handleLoading","loading","JSON","parse","selectedMovie","movies","ids","background","mapDispatchToProps","movieCards","movieIds"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions'\nimport { fetchTitle } from '../actions/movieActions'\nimport MovieList from '../components/MovieList'\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory} from \"react-router-dom\";\n\nconst MoviesPage = (props) => { \n  const history = useHistory();\n  const movieData = useSelector(state => state.MoviesReducer, []) || []; \n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [cssColor, setCssColor] = useState(\"\")\n  //const [movieDataArray,setMovieDataArray] = useState([]); \n  //const [currentTitle, setCurrentTitle] = useState([]); \n  const [count, setCount]= useState(0);\n  const [pageCount, setPageCount]= useState(0);\n\n  useEffect(() => {\n    setCssColor(props.css('Movies',props.darkmodeProp))\n    console.log(props.css('Movies',props.darkmodeProp))\n    console.log(sessionStorage.currentStreamName)\n      if (sessionStorage.currentStreamName === \" \"){\n        alert(\"error selecting stream please try again\")\n        history.push(`/userstreams`\n        )\n      }\n\n\n      if (typeof location.state !== \"undefined\"){\n        //set clicked\n        changeClicked()\n        getTitleData()\n        console.log('default')\n        \n        \n       // CurrentMovie(movieData)\n        \n\n      }\n      else{\n        console.log('got array')\n        getMoviesArray()\n      }       \n    }, []);\n    //dispatch({type: 'LOADING_MOVIES'})\n    //props.fetchMovies(sessionStorage.currentStream)\n    //console.log(props)\n    //console.log(movieData)\n    //console.log(dispatch(fetchMovies(sessionStorage.currentStream)))\n  \n  function changeClicked(){\n    setCliked(true)\n  }\n\n  function trailerID(trailer){ \n    //link trailer to backend\n  }\n\n  function getMoviesArray(){\n    dispatch(fetchMovies(sessionStorage.currentStream));\n    //setMovieDataArray(movieData.movies)  \n  }\n  function getTitleData(){\n    dispatch(fetchTitle(location.state.state.currentMovie))\n    //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    //setCurrentTitle(movieData.currentTitle)\n  }\n\n  function getcurrentTitle(movieData){\n    dispatch(fetchTitle(movieData))\n    //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    //setCurrentTitle(movieData.currentTitle)\n    sessionStorage.setItem('selectedMovie', movieData.currentTitle)\n  }\n\n  function handleFunctions (e){\n    props.pointer(e)\n    props.resetCount()\n  }\n\n  function handler(){\n    changeClicked()\n    setCount(0)\n  }\n\n  //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n  function handleLoading (){\n    if (count< 1 && typeof location.state !== \"undefined\"){\n      getTitleData()\n      getMoviesArray()\n      setCount (count+1)\n    }\n    \n    if(movieData.loading) {\n      return <div>Loading Movies...</div>\n    } \n      if (typeof location.state !== \"undefined\"){\n        if (typeof movieData.currentTitle !== \"undefined\"){\n          console.log('movielist1')\n          //getTitleData()\n          //getcurrentTitle(movieData.currentTitle)\n          return(\n          <div className=\"moviesPage\" onClick={handleFunctions}>\n            <MovieList handler={handler} darkmodeProp = {props.darkmodeProp} css={props.css} movieBackend={location.state.state.currentMovie} passedMovie={JSON.parse(sessionStorage.selectedMovie)} streamID={sessionStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={sessionStorage.currentStreamName}/>                  \n          </div>\n          )\n        }\n      \n      }\n        else{\n          console.log('movielist3')\n          //getMoviesArray()\n            return (\n              <div className=\"moviesPage\" onClick={handleFunctions}>\n                  <MovieList handler={handler} darkmodeProp = {props.darkmodeProp} css={props.css} passGetData={getcurrentTitle} streamID={sessionStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={sessionStorage.currentStreamName}/>                  \n              </div>\n            )\n        }  \n  }\n\n  \n    return (\n      <div style={{background: cssColor.background}}  className=\"App\">\n        {handleLoading()}\n      </div>\n    );\n  }\n\n\n\n\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, { fetchMovies,fetchTitle })(MoviesPage)"]},"metadata":{},"sourceType":"module"}