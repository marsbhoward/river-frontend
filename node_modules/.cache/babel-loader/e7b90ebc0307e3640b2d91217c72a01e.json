{"ast":null,"code":"const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams';\nconst URL = PROXY + streamsAPI; //\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies(id) {\n  let listOfMovieIds = [];\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`${streamsAPI}/${id}/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      console.log(responseJSON);\n      Promise.all(responseJSON.map(movie => fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`).then(resp => {\n        //write movie title to backend\n        return resp.json();\n      }))).then(listOfMovies => {\n        listOfMovies.map((movie, index) => {\n          let movie_id = responseJSON[index].id;\n          let title = movie.Title;\n          let poster = null;\n\n          if (movie.Poster !== undefined && movie.Poster !== \"N/A\") {\n            poster = movie.Poster;\n          }\n\n          if (responseJSON[index].title === null && responseJSON[index].poster === null) {\n            fetch(`${URL}/${id}/movies/${responseJSON[index].id}?poster=${poster}&title=${title}`, {\n              method: 'PATCH',\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            }).then(response => {\n              listOfMovieIds.push(movie_id);\n\n              try {\n                dispatch({\n                  type: 'ADD_MOVIES',\n                  movies: listOfMovies,\n                  ids: listOfMovieIds\n                });\n              } catch (error) {\n                console.log(error);\n              }\n            });\n          } else {\n            listOfMovieIds.push(movie_id);\n\n            try {\n              dispatch({\n                type: 'ADD_MOVIES',\n                movies: listOfMovies,\n                ids: listOfMovieIds\n              });\n            } catch (error) {\n              console.log(error);\n            }\n          }\n        });\n      });\n    });\n  };\n}\nexport function listMovies() {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'ADD_MOVIES',\n        movies: responseJSON\n      });\n    });\n  };\n} //send specific movie to omdb and retrieve all the data\n// for use with movie search\n\nexport function fetchTitle(movieInfo) {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      if (responseJSON.Title !== null) {\n        try {\n          dispatch({\n            type: 'ADD_MOVIES',\n            movies: [],\n            ids: [],\n            currentTitle: responseJSON\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        console.log('didnt have a title');\n        console.log(responseJSON);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/actions/movieActions.js"],"names":["PROXY","streamsAPI","URL","fetchMovies","id","listOfMovieIds","dispatch","type","fetch","then","response","json","responseJSON","console","log","Promise","all","map","movie","slug","year","resp","listOfMovies","index","movie_id","title","Title","poster","Poster","undefined","method","headers","push","movies","ids","error","listMovies","fetchTitle","movieInfo","currentTitle"],"mappings":"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","sourcesContent":["const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams'\nconst URL = PROXY + streamsAPI\n\n\n//\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies (id) {\n    let listOfMovieIds = []\n    \n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`${streamsAPI}/${id}/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            console.log(responseJSON)\n            Promise.all(\n                responseJSON.map(\n                    movie => fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`)\n                    .then(resp => {\n                        //write movie title to backend\n                        return resp.json()\n                    })\n                )\n            ).then(listOfMovies => {\n                listOfMovies.map((movie, index) => {\n                    let movie_id = responseJSON[index].id\n                    let title = movie.Title\n                    let poster = null\n                    if (movie.Poster !== undefined && movie.Poster !== \"N/A\"){\n                        poster = movie.Poster\n                    }\n                    if(responseJSON[index].title === null && responseJSON[index].poster === null){   \n                        fetch(`${URL}/${id}/movies/${responseJSON[index].id}?poster=${poster}&title=${title}`, {\n                            method: 'PATCH',\n                            headers: { \"Content-Type\": \"application/json\" },\n                        }).then(response => {\n                            listOfMovieIds.push(movie_id)\n                        try {\n                            dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, ids: listOfMovieIds})\n                        }\n                        catch(error){\n                            console.log(error)\n                        }\n                    })\n                    }\n                    else {\n                        listOfMovieIds.push(movie_id)\n                        try {\n                            dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, ids: listOfMovieIds})\n                        }\n                        catch(error){\n                            console.log(error)\n                        }\n                    }  \n                })\n            })\n        })\n    }\n}\n\n\n\n\nexport function listMovies(){\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            dispatch({ type: 'ADD_MOVIES', movies: responseJSON})\n        })\n    }\n}\n\n//send specific movie to omdb and retrieve all the data\n// for use with movie search\nexport function fetchTitle (movieInfo){\n    return (dispatch) => {\n            dispatch({ type: 'LOADING_MOVIES'})\n            fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n                return response.json()\n            }).then(responseJSON => {\n                            if(responseJSON.Title !== null){ \n                            try {\n                                dispatch({ type: 'ADD_MOVIES', movies: [], ids: [], currentTitle: responseJSON})\n                            }\n                            catch(error){\n                                console.log(error)\n                            }\n                        }\n                        else{\n                            console.log('didnt have a title')\n                            console.log(responseJSON)\n                        }\n                        })\n        }\n}"]},"metadata":{},"sourceType":"module"}