{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.logMovie = selectedMovie => {\n      //mars rerender problem?\n      let movie = JSON.parse(sessionStorage.currentMovieList).find(movie => movie.id === parseInt(sessionStorage.currentMovie));\n\n      if (movie.youtube_id !== null) {\n        this.setState({\n          selectedMovie: movie,\n          youtube: movie.youtube_id\n        });\n      } else {\n        console.log(movie);\n        this.setState({\n          selectedMovie: movie\n        }); //this.fetchTrailer(movie.title,movie.year)\n      }\n      /*\n        if (selectedMovie === null) {\n        }\n        else{\n          if (this.state.youtube === null){\n            this.setState({youtube: selectedMovie.youtube_id})\n          }\n              this.setState({\n                selectedMovie: selectedMovie\n              })\n          if(selectedMovie.youtube_id === null){\n            console.log('grabbing trailer')\n            //if youtube_id on api is empty\n            //not getting updated trailer here\n            this.fetchTrailer()\n            \n          }\n          else {\n            //this.setState({youtube: \"yes\"})\n          }        \n        }\n      */\n\n    };\n\n    this.trailerPath = passedMovie => {\n      let newMovieList = JSON.parse(sessionStorage.currentMovieList); //mars passed movie is coming back null on occation\n\n      if (passedMovie) {\n        if (this.props.trailer.length > 0 && this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie.youtube_id === null) {\n          adapter.updateYoutubeID(passedMovie.stream_id, passedMovie.id, this.props.trailer).then(data => data);\n          passedMovie.youtube_id = this.props.trailer;\n          sessionStorage.setItem('currentMovieList', JSON.stringify(newMovieList));\n          console.log('trailer updated on backend');\n        } else if (this.props.trailer === 'kJQP7kiw5Fk') {\n          console.log('error loading video from youtube');\n        } else {\n          console.log('trailer was loaded from backend');\n        }\n\n        this.setState({\n          test: \"yep\"\n        });\n      }\n    };\n\n    this.fetchTrailer = (title, year) => {\n      console.log('grabbing trailer');\n      this.props.fetchTrailers(title, year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loading === true) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 14\n          }\n        }, \"Loading Info...\");\n      } else {\n        // change selected movie to backend movie\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(MovieInfo, {\n          youtube: this.state.youtube,\n          path: this.trailerPath,\n          selectedMovie: this.state.selectedMovie,\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 9\n          }\n        }));\n      }\n    };\n\n    this.trailerPath = this.trailerPath.bind(this);\n    this.state = {\n      selectedMovie: null,\n      youtube: null,\n      cssColor: \"\"\n    };\n  }\n\n  componentDidMount() {\n    //pass stream id and movie id in props\n    // only works with db complete reset\n    let apiMovieID = parseInt(sessionStorage.currentMovie);\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => {\n      this.logMovie(movie);\n    }); //if current movie does not have a youtube_id on the backend\n    //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      console.log('updated');\n      let apiMovieID = sessionStorage.currentMovie;\n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie));\n      this.setState({\n        cssColor: this.props.css('Info', this.props.darkmodeProp)\n      });\n    }\n  }\n\n  render() {\n    let title = 'title';\n\n    if (this.props.currentMovie.Title !== undefined) {\n      title = this.props.currentMovie.Title;\n    } else {\n      if (sessionStorage.selectedMovie.title) {\n        title = JSON.parse(sessionStorage.selectedMovie.title);\n        console.log(title);\n      } else {\n        console.log('reached');\n        window.location.reload();\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        background: this.state.cssColor.background,\n        color: this.state.cssColor.color\n      },\n      className: \"Info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"banner-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 6\n      }\n    }, title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  },\n  updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n    return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        movie_id,\n        youtube_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","constructor","props","logMovie","selectedMovie","movie","JSON","parse","sessionStorage","currentMovieList","find","id","parseInt","currentMovie","youtube_id","setState","youtube","console","log","trailerPath","passedMovie","newMovieList","trailer","length","adapter","updateYoutubeID","stream_id","then","data","setItem","stringify","test","fetchTrailer","title","year","handler","trailerID","handleLoading","loading","state","bind","cssColor","componentDidMount","apiMovieID","getYoutubeID","streamID","componentDidUpdate","prevProps","css","darkmodeProp","render","Title","undefined","window","location","reload","background","color","toUpperCase","mapDispatchToProps","TrailersReducer","movie_id","fetch","headers","resp","json","method","body"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component { \n\n  constructor(props){\n    super(props)\n    this.trailerPath = this.trailerPath.bind(this)\n    this.state = {\n      selectedMovie: null,\n      youtube: null,\n      cssColor: \"\"\n    }\n\n  } \n  \n  componentDidMount() {\n    \n    //pass stream id and movie id in props\n    // only works with db complete reset\n    let apiMovieID = parseInt(sessionStorage.currentMovie )\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => {\n      this.logMovie(movie)\n    })\n\n    //if current movie does not have a youtube_id on the backend\n  \t  \n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n  \tif (prevProps!== this.props)\n  \t{\n      console.log('updated')\n      let apiMovieID = sessionStorage.currentMovie \n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n      this.setState({cssColor: this.props.css('Info',this.props.darkmodeProp)}) \n  \t}\n  }\n\n  logMovie = (selectedMovie) => {    \n    //mars rerender problem?\n    let movie = JSON.parse(sessionStorage.currentMovieList).find(movie => movie.id === parseInt(sessionStorage.currentMovie))\n    if (movie.youtube_id !== null){\n      this.setState({\n        selectedMovie: movie,\n        youtube: movie.youtube_id\n      }) \n    }\n    else{\n      console.log(movie)\n      this.setState({\n        selectedMovie: movie\n      }) \n      //this.fetchTrailer(movie.title,movie.year)\n    }\n    /*\n      if (selectedMovie === null) {\n      }\n      else{\n        if (this.state.youtube === null){\n          this.setState({youtube: selectedMovie.youtube_id})\n        }\n            this.setState({\n              selectedMovie: selectedMovie\n            })\n        if(selectedMovie.youtube_id === null){\n          console.log('grabbing trailer')\n          //if youtube_id on api is empty\n          //not getting updated trailer here\n          this.fetchTrailer()\n          \n        }\n        else {\n          //this.setState({youtube: \"yes\"})\n        }        \n      }\n    */\n  }\n\n\n  trailerPath = (passedMovie) =>{\n    let newMovieList = JSON.parse(sessionStorage.currentMovieList)\n    \n    //mars passed movie is coming back null on occation\n    if (passedMovie){\n      if (this.props.trailer.length > 0 && this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie.youtube_id === null){ \n        adapter.updateYoutubeID(passedMovie.stream_id,passedMovie.id,this.props.trailer).then(data => data)\n        passedMovie.youtube_id = this.props.trailer\n        sessionStorage.setItem('currentMovieList',JSON.stringify(newMovieList)) \n        console.log('trailer updated on backend') \n      }\n      else if (this.props.trailer === 'kJQP7kiw5Fk') {\n        console.log('error loading video from youtube')\n      }\n      else {\n        console.log('trailer was loaded from backend') \n      }\n      this.setState({\n        test:\"yep\"\n      })\n    }\n  }\n\n  fetchTrailer = (title, year) => {\n    console.log('grabbing trailer')\n  \tthis.props.fetchTrailers(title,year)\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    if(this.props.loading===true) \n    {\n      return <div>Loading Info...</div>\n    } \n    else {\n      // change selected movie to backend movie\n      return (\n      \t<div>\n      \t\t<MovieInfo youtube={this.state.youtube} path={this.trailerPath} selectedMovie ={this.state.selectedMovie} currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    let title = 'title'\n    if (this.props.currentMovie.Title !== undefined){\n      title = this.props.currentMovie.Title \n    }\n    else{\n      if (sessionStorage.selectedMovie.title){\n        title =  JSON.parse (sessionStorage.selectedMovie.title)\n        console.log(title)\n      }\n      else{\n        console.log('reached')\n        window.location.reload()\n      }\n    }\n    \n    return (\n    <div style={{background:this.state.cssColor.background,color:this.state.cssColor.color}}  className= \"Info\">\n    \t<div className=\"banner-3\">{title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    },\n\n    updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n      return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {  \n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, movie_id, youtube_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}