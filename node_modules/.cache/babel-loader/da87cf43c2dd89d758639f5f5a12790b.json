{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/components/MovieList.js\";\nimport React from 'react';\nimport '../index.css';\nimport Movie from './Movie';\nimport InfoPage from '../containers/InfoPage';\nlet moviesList;\n\nclass MovieList extends React.Component {\n  componentDidMount() {\n    if (typeof this.props.passedMovie !== \"undefined\") {\n      this.setCurrentMovieState();\n    } else {}\n  } //binds passed handler to MoviesPage handler\n\n\n  constructor(props) {\n    super(props);\n\n    this.setCurrentMovieState = () => {\n      this.setState({\n        currentMovie: this.props.passedMovie,\n        clicked: true\n      }); //console.log(this.state.currentMovie)\n    };\n\n    this.handler = (movie, clicked, movieID) => {\n      //sessionStorage.setItem('currentMovie', this.props.movieIds[(movieID-1)])\n      this.props.handler();\n      this.setState({\n        currentMovie: movie,\n        clicked: true,\n        movieID: movieID\n      });\n    };\n\n    this.trailerID = trailer => {\n      this.props.trailerID(trailer);\n    };\n\n    this.state = {\n      clicked: this.props.isClicked\n    };\n  }\n\n  render() {\n    //addition if to make sure passed movie is in\n    if (sessionStorage.currentMovieList !== \" \") {\n      moviesList = JSON.parse(sessionStorage.currentMovieList).map((movie, index) => {\n        return /*#__PURE__*/React.createElement(Movie, {\n          key: index,\n          movie: movie,\n          darkmodeProp: this.props.darkmodeProp,\n          passGetData: this.props.passGetData,\n          handler: this.handler,\n          movieID: index + 1,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 16\n          }\n        });\n      });\n    } else {\n      moviesList = this.props.movieCards.map((movie, index) => {\n        return /*#__PURE__*/React.createElement(Movie, {\n          key: index,\n          movie: movie,\n          darkmodeProp: this.props.darkmodeProp,\n          passGetData: this.props.passGetData,\n          handler: this.handler,\n          movieID: index + 1,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 16\n          }\n        });\n      });\n    }\n\n    if (this.state.clicked !== true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"NotClicked\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 10\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"movie-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 8\n        }\n      }, moviesList));\n    } else if (typeof this.props.passedMovie !== \"undefined\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"WasClicked-undefined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(InfoPage, {\n        darkmodeProp: this.props.darkmodeProp,\n        css: this.props.css,\n        movieIds: this.props.movieIds,\n        streamID: this.props.streamID,\n        movieID: parseInt(sessionStorage.currentMovie),\n        currentBackend: this.props.movieBackend,\n        currentMovie: this.props.passedMovie,\n        trailerID: this.trailerID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"movie-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, moviesList, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }\n      })));\n    } else {\n      // get omdb movie\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"WasClicked\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(InfoPage, {\n        darkmodeProp: this.props.darkmodeProp,\n        css: this.props.css,\n        movieIds: this.props.movieIds,\n        streamID: this.props.streamID,\n        movieID: parseInt(sessionStorage.currentMovie),\n        currentMovie: JSON.parse(sessionStorage.selectedMovie),\n        trailerID: this.trailerID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"movie-list\",\n        style: {\n          background: this.props.css(\"Movies\", this.props.darkmodeProp).background\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }, moviesList));\n    }\n  }\n\n}\n\nexport default MovieList;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/components/MovieList.js"],"names":["React","Movie","InfoPage","moviesList","MovieList","Component","componentDidMount","props","passedMovie","setCurrentMovieState","constructor","setState","currentMovie","clicked","handler","movie","movieID","trailerID","trailer","state","isClicked","render","sessionStorage","currentMovieList","JSON","parse","map","index","darkmodeProp","passGetData","movieCards","css","movieIds","streamID","parseInt","movieBackend","selectedMovie","background"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../index.css';\nimport Movie from './Movie';\nimport InfoPage from '../containers/InfoPage'\n\nlet moviesList\n\n\nclass MovieList extends React.Component {\n  componentDidMount() {\n    \n    if (typeof this.props.passedMovie !== \"undefined\"){\n      this.setCurrentMovieState()\n    }\n    else{\n      \n    }\n   }\n\n//binds passed handler to MoviesPage handler\n  constructor(props){\n    super(props)\n    \n    this.state = {\n      clicked: this.props.isClicked\n    }\n\n  }\n\n  setCurrentMovieState = () =>{\n    this.setState({\n        currentMovie: this.props.passedMovie,\n        clicked: true\n    })\n    //console.log(this.state.currentMovie)\n  }\n\n// recieves id from passed handler\n  handler = (movie, clicked, movieID) => {\n    //sessionStorage.setItem('currentMovie', this.props.movieIds[(movieID-1)])\n    \n    this.props.handler()\n    this.setState({\n      currentMovie: movie,\n      clicked: true,\n      movieID: movieID\n    })   \n  }\n\n  trailerID = (trailer) => { \n    this.props.trailerID(trailer)\n  }\n\n  render() {\n    //addition if to make sure passed movie is in\n    if (sessionStorage.currentMovieList !== \" \"){\n      moviesList = JSON.parse(sessionStorage.currentMovieList).map((movie, index) => {\n        return <Movie key={index} movie={movie} darkmodeProp = {this.props.darkmodeProp}  passGetData={this.props.passGetData} handler={this.handler} movieID={(index+1)}/>\n      })\n    }\n    else{\n      moviesList = this.props.movieCards.map((movie, index) => {\n        return <Movie key={index} movie={movie} darkmodeProp = {this.props.darkmodeProp}  passGetData={this.props.passGetData} handler={this.handler} movieID={(index+1)}/>\n      })  \n    }\n\n    if (this.state.clicked !== true) {  \n     return (\n       <div className= \"NotClicked\">\n         <br/>\n       <div className=\"movie-list\">\n           {moviesList}\n       </div>\n       </div>\n     )\n   }\n    else\n      if (typeof this.props.passedMovie !== \"undefined\"){\n        return(\n          <div className = \"WasClicked-undefined\">\n            <br/>\n            <InfoPage darkmodeProp = {this.props.darkmodeProp} css={this.props.css} movieIds={this.props.movieIds} streamID={this.props.streamID} movieID={parseInt(sessionStorage.currentMovie)} currentBackend={this.props.movieBackend} currentMovie={this.props.passedMovie} trailerID={this.trailerID}/>\n            <div className=\"movie-list\">\n                {moviesList}\n                <br/>\n            </div>\n          </div>\n        )\n      }\n      else{\n\n        // get omdb movie\n        return(\n          <div className = \"WasClicked\">\n            <br/>\n            <InfoPage darkmodeProp = {this.props.darkmodeProp} css={this.props.css} movieIds={this.props.movieIds} streamID={this.props.streamID} movieID={parseInt(sessionStorage.currentMovie)} currentMovie={JSON.parse(sessionStorage.selectedMovie)} trailerID={this.trailerID}/>\n            <div className=\"movie-list\" style={{background:this.props.css(\"Movies\",this.props.darkmodeProp).background}}>\n                {moviesList}\n            </div>\n          </div>\n        )              \n      }\n   }\n  }\nexport default (MovieList);"]},"metadata":{},"sourceType":"module"}