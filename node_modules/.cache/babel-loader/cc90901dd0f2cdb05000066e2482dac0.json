{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.logMovie = selectedMovie => {\n      let newMovieList = JSON.parse(localStorage.currentMovieList);\n      let foundMovie = newMovieList.find(x => x.id === parseInt(localStorage.currentMovie));\n      console.log(foundMovie);\n      this.setState({\n        selectedMovie: selectedMovie\n      }); //localStorage.setItem('currentMovie',selectedMovie)\n\n      if (selectedMovie === null) {\n        console.log('component did not update');\n      } else {\n        if (selectedMovie.youtube_id === null) {\n          //if youtube_id on api is empty\n          //not getting updated trailer here\n          console.log('youtube_id null');\n          this.fetchTrailer();\n          this.setState({\n            youtube: null\n          });\n        } else {\n          this.setState({\n            youtube: \"yes\"\n          });\n        }\n      }\n    };\n\n    this.trailerPath = passedMovie => {\n      //console.log(passedMovie)\n      if (this.props.trailer.length > 0 && this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie.youtube_id === null) {\n        adapter.updateYoutubeID(passedMovie.stream_id, passedMovie.id, this.props.trailer).then(data => data);\n        console.log('trailer updated on backend');\n      } else if (this.props.trailer === 'kJQP7kiw5Fk') {\n        console.log('error loading video from youtube');\n      } else {\n        console.log('trailer was loaded from backend');\n      }\n    };\n\n    this.fetchTrailer = () => {\n      this.props.fetchTrailers(this.props.currentMovie.Title, this.props.currentMovie.Year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      let newMovieList = JSON.parse(localStorage.currentMovieList);\n      let foundMovie = newMovieList.find(id => id = localStorage.currentMovie);\n      console.log(this.state);\n\n      if (this.props.loading) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 14\n          }\n        }, \"Loading Movies...\");\n      } else {\n        // change selected movie to backend movie\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(MovieInfo, {\n          youtube: this.state.youtube,\n          path: this.trailerPath,\n          selectedMovie: foundMovie,\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 9\n          }\n        }));\n      }\n    };\n\n    this.state = {\n      selectedMovie: null,\n      youtube: null\n    };\n  }\n\n  componentDidMount() {\n    //pass stream id and movie id in props\n    // only works with db complete reset\n    let apiMovieID = localStorage.currentMovie;\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => {\n      this.logMovie(movie);\n    }); //if current movie does not have a youtube_id on the backend\n    //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title) {\n      let apiMovieID = localStorage.currentMovie;\n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"banner-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 6\n      }\n    }, this.props.currentMovie.Title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  },\n  updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n    return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        movie_id,\n        youtube_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","constructor","props","logMovie","selectedMovie","newMovieList","JSON","parse","localStorage","currentMovieList","foundMovie","find","x","id","parseInt","currentMovie","console","log","setState","youtube_id","fetchTrailer","youtube","trailerPath","passedMovie","trailer","length","adapter","updateYoutubeID","stream_id","then","data","Title","Year","handler","trailerID","handleLoading","state","loading","componentDidMount","apiMovieID","getYoutubeID","streamID","movie","componentDidUpdate","prevProps","render","toUpperCase","mapDispatchToProps","TrailersReducer","movie_id","fetch","headers","resp","json","method","body","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component { \n\n  constructor(props){\n    super(props)\n    this.state = {\n      selectedMovie: null,\n      youtube: null\n    }\n\n  } \n  \n  componentDidMount() {\n    //pass stream id and movie id in props\n    // only works with db complete reset\n    let apiMovieID = localStorage.currentMovie \n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => {\n      this.logMovie(movie)\n    })\n\n    //if current movie does not have a youtube_id on the backend\n  \t  \n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n  \tif (this.props.currentMovie.Title !== prevProps.currentMovie.Title)\n  \t{\n      let apiMovieID = localStorage.currentMovie \n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n  \t}\n  }\n\n  logMovie = (selectedMovie) => {\n    let newMovieList = JSON.parse(localStorage.currentMovieList)\n    let foundMovie = newMovieList.find(x => x.id === parseInt(localStorage.currentMovie))\n\n        console.log(foundMovie)\n        this.setState({\n          selectedMovie: selectedMovie\n        })\n\n        //localStorage.setItem('currentMovie',selectedMovie)\n\n      if (selectedMovie === null) {\n        console.log('component did not update')\n      }\n      else{\n        if(selectedMovie.youtube_id === null){\n          //if youtube_id on api is empty\n          //not getting updated trailer here\n          console.log('youtube_id null')\n          this.fetchTrailer()\n          this.setState({youtube: null})\n        }\n        else {\n          this.setState({youtube: \"yes\"})\n        }        \n      }\n  }\n\n\n  trailerPath = (passedMovie) =>{\n    //console.log(passedMovie)\n    \n    if (this.props.trailer.length > 0 && this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie.youtube_id === null){ \n      adapter.updateYoutubeID(passedMovie.stream_id,passedMovie.id,this.props.trailer).then(data => data)\n      console.log('trailer updated on backend') \n    }\n    else if (this.props.trailer === 'kJQP7kiw5Fk') {\n      console.log('error loading video from youtube')\n    }\n    else {\n      console.log('trailer was loaded from backend') \n    }\n  }\n\n  fetchTrailer = () => {\n  \tthis.props.fetchTrailers(this.props.currentMovie.Title,this.props.currentMovie.Year)\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    let newMovieList = JSON.parse(localStorage.currentMovieList)\n    let foundMovie = newMovieList.find(id=> id = localStorage.currentMovie)\n    console.log(this.state)\n    \n    if(this.props.loading) \n    {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      // change selected movie to backend movie\n      return (\n      \t<div>\n      \t\t<MovieInfo youtube={this.state.youtube} path={this.trailerPath} selectedMovie = {foundMovie} currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    return (\n    <div className= \"Info\">\n    \t<div className=\"banner-3\">{this.props.currentMovie.Title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    },\n\n    updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n      return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {  \n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, movie_id, youtube_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}