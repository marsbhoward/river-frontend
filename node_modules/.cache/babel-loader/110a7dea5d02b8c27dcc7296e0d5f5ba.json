{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.logMovie = selectedMovie => {\n      if (selectedMovie.youtube_id === null) {\n        //if youtube_id on api is empty\n        console.log('came back null');\n        this.testFucntion();\n\n        if (this.props.trailer !== 'kJQP7kiw5Fk') {\n          adapter.updateYoutubeID(selectedMovie.stream_id, selectedMovie.id, this.props.trailer).then(data => data);\n          console.log('trailer updated on backend');\n        } else {\n          console.log('did not work');\n        }\n      } else {\n        console.log('not null');\n      }\n    };\n\n    this.testFucntion = () => {\n      this.fetchTrailer();\n      console.log(this);\n    };\n\n    this.fetchTrailer = () => {\n      this.props.fetchTrailers(this.props.currentMovie.Title, this.props.currentMovie.Year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, \"Loading Movies...\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(MovieInfo, {\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }));\n      }\n    };\n  }\n\n  componentDidMount() {\n    //pass stream id and movie id in props\n    let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie)); //if current movie does not have a youtube_id on the backend\n    //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title) {\n      let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"banner-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.props.currentMovie.Title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  },\n  updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n    return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        movie_id,\n        youtube_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","logMovie","selectedMovie","youtube_id","console","log","testFucntion","props","trailer","adapter","updateYoutubeID","stream_id","id","then","data","fetchTrailer","currentMovie","Title","Year","handler","trailerID","handleLoading","loading","componentDidMount","apiMovieID","movieID","streamID","getYoutubeID","movie","componentDidUpdate","prevProps","render","toUpperCase","mapDispatchToProps","state","TrailersReducer","movie_id","fetch","headers","resp","json","method","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {  \n  \n  componentDidMount() {\n    //pass stream id and movie id in props\n    let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n\n    //if current movie does not have a youtube_id on the backend\n  \t  \n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n\n  \tif (this.props.currentMovie.Title !== prevProps.currentMovie.Title)\n  \t{\n      let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n  \t}\n  }\n\n  logMovie = (selectedMovie) => {\n      if(selectedMovie.youtube_id === null){\n        //if youtube_id on api is empty\n        console.log('came back null')\n        this.testFucntion()\n        if (this.props.trailer !== 'kJQP7kiw5Fk'){ \n          adapter.updateYoutubeID(selectedMovie.stream_id,selectedMovie.id,this.props.trailer).then(data => data)\n          console.log('trailer updated on backend') \n        }\n        else {\n          console.log('did not work')\n        }\n      }\n      else {\n        console.log('not null')\n      }\n  }\n\n  testFucntion = () =>{\n    this.fetchTrailer()\n    console.log(this)\n  }\n\n  fetchTrailer = () => {\n  \tthis.props.fetchTrailers(this.props.currentMovie.Title,this.props.currentMovie.Year)\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    if(this.props.loading) \n    {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      return (\n      \t<div>\n      \t\t<MovieInfo currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    return (\n    <div className= \"Info\">\n    \t<div className=\"banner-3\">{this.props.currentMovie.Title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    },\n\n    updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n      return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, movie_id, youtube_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}