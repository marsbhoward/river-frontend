{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst Launcher = require('./Launcher');\n\nconst BrowserFetcher = require('./BrowserFetcher');\n\nconst Errors = require('./Errors');\n\nconst DeviceDescriptors = require('./DeviceDescriptors');\n\nmodule.exports = class {\n  /**\n   * @param {string} projectRoot\n   * @param {string} preferredRevision\n   * @param {boolean} isPuppeteerCore\n   */\n  constructor(projectRoot, preferredRevision, isPuppeteerCore) {\n    this._projectRoot = projectRoot;\n    this._preferredRevision = preferredRevision;\n    this._isPuppeteerCore = isPuppeteerCore;\n  }\n  /**\n   * @param {!(Launcher.LaunchOptions & Launcher.ChromeArgOptions & Launcher.BrowserOptions & {product?: string, extraPrefsFirefox?: !object})=} options\n   * @return {!Promise<!Puppeteer.Browser>}\n   */\n\n\n  launch(options) {\n    if (!this._productName && options) this._productName = options.product;\n    return this._launcher.launch(options);\n  }\n  /**\n   * @param {!(Launcher.BrowserOptions & {browserWSEndpoint?: string, browserURL?: string, transport?: !Puppeteer.ConnectionTransport})} options\n   * @return {!Promise<!Puppeteer.Browser>}\n   */\n\n\n  connect(options) {\n    return this._launcher.connect(options);\n  }\n  /**\n   * @return {string}\n   */\n\n\n  executablePath() {\n    return this._launcher.executablePath();\n  }\n  /**\n   * @return {!Puppeteer.ProductLauncher}\n   */\n\n\n  get _launcher() {\n    if (!this._lazyLauncher) this._lazyLauncher = Launcher(this._projectRoot, this._preferredRevision, this._isPuppeteerCore, this._productName);\n    return this._lazyLauncher;\n  }\n  /**\n   * @return {string}\n   */\n\n\n  get product() {\n    return this._launcher.product;\n  }\n  /**\n   * @return {Object}\n   */\n\n\n  get devices() {\n    return DeviceDescriptors;\n  }\n  /**\n   * @return {Object}\n   */\n\n\n  get errors() {\n    return Errors;\n  }\n  /**\n   * @param {!Launcher.ChromeArgOptions=} options\n   * @return {!Array<string>}\n   */\n\n\n  defaultArgs(options) {\n    return this._launcher.defaultArgs(options);\n  }\n  /**\n   * @param {!BrowserFetcher.Options=} options\n   * @return {!BrowserFetcher}\n   */\n\n\n  createBrowserFetcher(options) {\n    return new BrowserFetcher(this._projectRoot, options);\n  }\n\n};","map":{"version":3,"sources":["/Users/marshoward/Development/code/river/frontend/app/node_modules/puppeteer/lib/Puppeteer.js"],"names":["Launcher","require","BrowserFetcher","Errors","DeviceDescriptors","module","exports","constructor","projectRoot","preferredRevision","isPuppeteerCore","_projectRoot","_preferredRevision","_isPuppeteerCore","launch","options","_productName","product","_launcher","connect","executablePath","_lazyLauncher","devices","errors","defaultArgs","createBrowserFetcher"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,qBAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiB,MAAM;AACrB;;;;;AAKAC,EAAAA,WAAW,CAACC,WAAD,EAAcC,iBAAd,EAAiCC,eAAjC,EAAkD;AAC3D,SAAKC,YAAL,GAAoBH,WAApB;AACA,SAAKI,kBAAL,GAA0BH,iBAA1B;AACA,SAAKI,gBAAL,GAAwBH,eAAxB;AACD;AAED;;;;;;AAIAI,EAAAA,MAAM,CAACC,OAAD,EAAU;AACd,QAAI,CAAC,KAAKC,YAAN,IAAsBD,OAA1B,EACE,KAAKC,YAAL,GAAoBD,OAAO,CAACE,OAA5B;AACF,WAAO,KAAKC,SAAL,CAAeJ,MAAf,CAAsBC,OAAtB,CAAP;AACD;AAED;;;;;;AAIAI,EAAAA,OAAO,CAACJ,OAAD,EAAU;AACf,WAAO,KAAKG,SAAL,CAAeC,OAAf,CAAuBJ,OAAvB,CAAP;AACD;AAED;;;;;AAGAK,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKF,SAAL,CAAeE,cAAf,EAAP;AACD;AAED;;;;;AAGA,MAAIF,SAAJ,GAAgB;AACd,QAAI,CAAC,KAAKG,aAAV,EACE,KAAKA,aAAL,GAAqBrB,QAAQ,CAAC,KAAKW,YAAN,EAAoB,KAAKC,kBAAzB,EAA6C,KAAKC,gBAAlD,EAAoE,KAAKG,YAAzE,CAA7B;AACF,WAAO,KAAKK,aAAZ;AAED;AAED;;;;;AAGA,MAAIJ,OAAJ,GAAc;AACZ,WAAO,KAAKC,SAAL,CAAeD,OAAtB;AACD;AAED;;;;;AAGA,MAAIK,OAAJ,GAAc;AACZ,WAAOlB,iBAAP;AACD;AAED;;;;;AAGA,MAAImB,MAAJ,GAAa;AACX,WAAOpB,MAAP;AACD;AAED;;;;;;AAIAqB,EAAAA,WAAW,CAACT,OAAD,EAAU;AACnB,WAAO,KAAKG,SAAL,CAAeM,WAAf,CAA2BT,OAA3B,CAAP;AACD;AAED;;;;;;AAIAU,EAAAA,oBAAoB,CAACV,OAAD,EAAU;AAC5B,WAAO,IAAIb,cAAJ,CAAmB,KAAKS,YAAxB,EAAsCI,OAAtC,CAAP;AACD;;AAlFoB,CAAvB","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst Launcher = require('./Launcher');\nconst BrowserFetcher = require('./BrowserFetcher');\nconst Errors = require('./Errors');\nconst DeviceDescriptors = require('./DeviceDescriptors');\n\nmodule.exports = class {\n  /**\n   * @param {string} projectRoot\n   * @param {string} preferredRevision\n   * @param {boolean} isPuppeteerCore\n   */\n  constructor(projectRoot, preferredRevision, isPuppeteerCore) {\n    this._projectRoot = projectRoot;\n    this._preferredRevision = preferredRevision;\n    this._isPuppeteerCore = isPuppeteerCore;\n  }\n\n  /**\n   * @param {!(Launcher.LaunchOptions & Launcher.ChromeArgOptions & Launcher.BrowserOptions & {product?: string, extraPrefsFirefox?: !object})=} options\n   * @return {!Promise<!Puppeteer.Browser>}\n   */\n  launch(options) {\n    if (!this._productName && options)\n      this._productName = options.product;\n    return this._launcher.launch(options);\n  }\n\n  /**\n   * @param {!(Launcher.BrowserOptions & {browserWSEndpoint?: string, browserURL?: string, transport?: !Puppeteer.ConnectionTransport})} options\n   * @return {!Promise<!Puppeteer.Browser>}\n   */\n  connect(options) {\n    return this._launcher.connect(options);\n  }\n\n  /**\n   * @return {string}\n   */\n  executablePath() {\n    return this._launcher.executablePath();\n  }\n\n  /**\n   * @return {!Puppeteer.ProductLauncher}\n   */\n  get _launcher() {\n    if (!this._lazyLauncher)\n      this._lazyLauncher = Launcher(this._projectRoot, this._preferredRevision, this._isPuppeteerCore, this._productName);\n    return this._lazyLauncher;\n\n  }\n\n  /**\n   * @return {string}\n   */\n  get product() {\n    return this._launcher.product;\n  }\n\n  /**\n   * @return {Object}\n   */\n  get devices() {\n    return DeviceDescriptors;\n  }\n\n  /**\n   * @return {Object}\n   */\n  get errors() {\n    return Errors;\n  }\n\n  /**\n   * @param {!Launcher.ChromeArgOptions=} options\n   * @return {!Array<string>}\n   */\n  defaultArgs(options) {\n    return this._launcher.defaultArgs(options);\n  }\n\n  /**\n   * @param {!BrowserFetcher.Options=} options\n   * @return {!BrowserFetcher}\n   */\n  createBrowserFetcher(options) {\n    return new BrowserFetcher(this._projectRoot, options);\n  }\n};\n\n"]},"metadata":{},"sourceType":"script"}