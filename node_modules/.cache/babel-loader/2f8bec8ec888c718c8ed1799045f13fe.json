{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js\";\nimport React, { Component } from 'react';\nimport { useColor } from 'color-thief-react';\n\nclass MovieInfo extends Component {\n  componentDidMount() {\n    console.log(this);\n  }\n\n  render() {\n    let currentMovie = this.props.currentMovie;\n    let videoId = this.props.trailer;\n    let fullsrc = 'https://www.youtube.com/embed/' + videoId;\n    const {\n      data,\n      loading,\n      error\n    } = useColor(currentMovie.Poster, 'hex');\n    const ratings = currentMovie.Ratings.map((rating, index) => React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"\\xBB \", rating.Source, \": \", rating.Value, \" \\xAB\"));\n    return React.createElement(\"div\", {\n      className: \"show_Movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"selected_Movie\",\n      alt: currentMovie.Title,\n      src: currentMovie.Poster,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \" Rated: \", currentMovie.Rated, \" \"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \" Genre: \", currentMovie.Genre, \" \"), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \" Actors: \", currentMovie.Actors, \" \"), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \" Director: \", currentMovie.Director, \" \"), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \" Awards: \", currentMovie.Awards, \" \"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \" Ratings \"), React.createElement(\"ul\", {\n      style: {\n        display: 'inline',\n        margin: 40,\n        listStyle: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \" \", ratings, \" \"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \" Plot\"), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, currentMovie.Plot, \" \"), React.createElement(\"div\", {\n      style: {\n        color: data.vibrant\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Text with the predominant color\"), React.createElement(\"iframe\", {\n      title: \"youtube\",\n      className: \"player\",\n      src: fullsrc,\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n      allowFullScreen: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MovieInfo;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/components/MovieInfo.js"],"names":["React","Component","useColor","MovieInfo","componentDidMount","console","log","render","currentMovie","props","videoId","trailer","fullsrc","data","loading","error","Poster","ratings","Ratings","map","rating","index","Source","Value","Title","Rated","Genre","Actors","Director","Awards","display","margin","listStyle","Plot","color","vibrant"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAEhCG,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACR,QAAIC,YAAY,GAAG,KAAKC,KAAL,CAAWD,YAA9B;AACC,QAAIE,OAAO,GAAG,KAAKD,KAAL,CAAWE,OAAzB;AACA,QAAIC,OAAO,GAAG,mCAAmCF,OAAjD;AACA,UAAM;AAAEG,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAA2Bb,QAAQ,CAACM,YAAY,CAACQ,MAAd,EAAsB,KAAtB,CAAzC;AACD,UAAMC,OAAO,GAAGT,YAAY,CAACU,OAAb,CAAqBC,GAArB,CAAyB,CAACC,MAAD,EAASC,KAAT,KACxC;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAoBD,MAAM,CAACE,MAA3B,QAAqCF,MAAM,CAACG,KAA5C,UADe,CAAhB;AAKC,WACC;AAAK,MAAA,SAAS,EAAG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AAAK,MAAA,SAAS,EAAE,gBAAhB;AAAiC,MAAA,GAAG,EAAEf,YAAY,CAACgB,KAAnD;AAA0D,MAAA,GAAG,EAAEhB,YAAY,CAACQ,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,EAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAaR,YAAY,CAACiB,KAA1B,MAFL,EAGK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAajB,YAAY,CAACkB,KAA1B,MAHL,EAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAclB,YAAY,CAACmB,MAA3B,MAJL,EAKK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBnB,YAAY,CAACoB,QAA7B,MALL,EAMK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAcpB,YAAY,CAACqB,MAA3B,MANL,EAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPD,EAQG;AAAI,MAAA,KAAK,EAAE;AAACC,QAAAA,OAAO,EAAE,QAAV;AAAmBC,QAAAA,MAAM,EAAE,EAA3B;AAA+BC,QAAAA,SAAS,EAAE;AAA1C,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAgEf,OAAhE,MARH,EASK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eATL,EAUK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKT,YAAY,CAACyB,IAAlB,MAVL,EAWG;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAErB,IAAI,CAACsB;AAAd,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAXH,EAeG;AAAQ,MAAA,KAAK,EAAE,SAAf;AAAyB,MAAA,SAAS,EAAC,QAAnC;AACE,MAAA,GAAG,EAAEvB,OADP;AAEE,MAAA,WAAW,EAAC,GAFd;AAEkB,MAAA,KAAK,EAAC,yEAFxB;AAEkG,MAAA,eAAe,MAFjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfH,CADD;AAsBD;;AAtC+B;;AAwClC,eAAeT,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport { useColor } from 'color-thief-react'\n\nclass MovieInfo extends Component {\n\n  componentDidMount() {\n    console.log(this)\n  }\n\n  render() {\n  \tlet currentMovie = this.props.currentMovie\n    let videoId = this.props.trailer\n    let fullsrc = 'https://www.youtube.com/embed/' + videoId\n    const { data, loading, error } = useColor(currentMovie.Poster, 'hex')\n  \tconst ratings = currentMovie.Ratings.map((rating, index) =>(\n  \t\t<li  key={index}>» {rating.Source}: {rating.Value} «</li>  \n \t  ));\n\n \t\n    return (\n    \t<div className = \"show_Movie\" >\n        <img className= \"selected_Movie\" alt={currentMovie.Title} src={currentMovie.Poster}></img>\n          <h4> Rated: {currentMovie.Rated} </h4> \n          <h4> Genre: {currentMovie.Genre} </h4>\n          <h5> Actors: {currentMovie.Actors} </h5>\n          <h5> Director: {currentMovie.Director} </h5>\n          <h5> Awards: {currentMovie.Awards} </h5>\n\t\t    <h4> Ratings </h4>\n        <ul style={{display: 'inline',margin: 40, listStyle: 'none'}}> {ratings} </ul>\n          <h4> Plot</h4>\n          <h5>{currentMovie.Plot} </h5>\n        <div style={{ color: data.vibrant }}>\n          Text with the predominant color\n        </div>\n        \n        <iframe title= \"youtube\" className=\"player\"  \n          src={fullsrc}\n          frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen>\n        </iframe>        \n      </div>\n    )\n  }\n}\nexport default MovieInfo;\n\n"]},"metadata":{},"sourceType":"module"}