{"ast":null,"code":"import adapter from './adapter';\n\nfunction streamsReducer(state = [], action) {\n  let idx;\n\n  switch (action.type) {\n    case \"ADD_AUTHOR\":\n      return [...state, action.author];\n\n    case \"REMOVE_AUTHOR\":\n      idx = state.findIndex(author => author.id === action.id);\n      return [...state.slice(0, idx), ...state.slice(idx + 1)];\n\n    case \"ADD_BOOK\":\n      let existingAuthor = state.filter(author => author.authorName === action.book.authorName);\n\n      if (existingAuthor.length > 0) {\n        return state;\n      } else {\n        return [...state, {\n          authorName: action.book.authorName,\n          id: uuid()\n        }];\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default streamsReducer;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/reducers/streamsReducer.js"],"names":["adapter","streamsReducer","state","action","idx","type","author","findIndex","id","slice","existingAuthor","filter","authorName","book","length","uuid"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,SAASC,cAAT,CAAwBC,KAAK,GAAG,EAAhC,EAAoCC,MAApC,EAA4C;AAC1C,MAAIC,GAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAK,YAAL;AACE,aAAO,CAAC,GAAGH,KAAJ,EAAWC,MAAM,CAACG,MAAlB,CAAP;;AAEF,SAAK,eAAL;AACEF,MAAAA,GAAG,GAAGF,KAAK,CAACK,SAAN,CAAgBD,MAAM,IAAIA,MAAM,CAACE,EAAP,KAAeL,MAAM,CAACK,EAAhD,CAAN;AACA,aAAO,CAAC,GAAGN,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeL,GAAf,CAAJ,EAAyB,GAAGF,KAAK,CAACO,KAAN,CAAYL,GAAG,GAAG,CAAlB,CAA5B,CAAP;;AAEF,SAAK,UAAL;AACE,UAAIM,cAAc,GAAGR,KAAK,CAACS,MAAN,CACnBL,MAAM,IAAIA,MAAM,CAACM,UAAP,KAAsBT,MAAM,CAACU,IAAP,CAAYD,UADzB,CAArB;;AAGA,UAAIF,cAAc,CAACI,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,eAAOZ,KAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAC,GAAGA,KAAJ,EAAW;AAAEU,UAAAA,UAAU,EAAET,MAAM,CAACU,IAAP,CAAYD,UAA1B;AAAsCJ,UAAAA,EAAE,EAAEO,IAAI;AAA9C,SAAX,CAAP;AACD;;AAEH;AACE,aAAOb,KAAP;AAnBJ;AAqBD;;AAED,eAAeD,cAAf","sourcesContent":["import adapter from './adapter'\n\nfunction streamsReducer(state = [], action) {\n  let idx;\n  switch (action.type) {\n    case \"ADD_AUTHOR\":\n      return [...state, action.author];\n \n    case \"REMOVE_AUTHOR\":\n      idx = state.findIndex(author => author.id  === action.id)\n      return [...state.slice(0, idx), ...state.slice(idx + 1)];\n \n    case \"ADD_BOOK\":\n      let existingAuthor = state.filter(\n        author => author.authorName === action.book.authorName\n      );\n      if (existingAuthor.length > 0) {\n        return state;\n      } else {\n        return [...state, { authorName: action.book.authorName, id: uuid() }];\n      }\n \n    default:\n      return state;\n  }\n}\n\nexport default streamsReducer"]},"metadata":{},"sourceType":"module"}