{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js\";\nimport React, { useState, useEffect } from 'react'; //import { connect } from 'react-redux';\n\nimport { fetchMovies } from '../actions/movieActions';\nimport { fetchTitle } from '../actions/movieActions';\nimport MovieList from '../components/MovieList';\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux';\n\nconst MoviesPage = props => {\n  const movieData = useSelector(state => state.MoviesReducer, []) || [];\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [movieDataArray, setMovieDataArray] = useState([]);\n  const [currentMovie, setCurrentMovie] = useState('');\n  useEffect(() => {\n    if (location.state !== undefined) {\n      getMoviesArray();\n      dispatch(fetchTitle(location.state.currentMovie));\n      setCliked(location.state.clicked);\n      CurrentMovie(movieData);\n    } else {}\n  }, []); //dispatch({type: 'LOADING_MOVIES'})\n  //props.fetchMovies(localStorage.currentStream)\n  //console.log(props)\n  //console.log(movieData)\n  //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n\n  function trailerID(trailer) {//link trailer to backend\n  }\n\n  function getMoviesArray() {\n    dispatch(fetchMovies(localStorage.currentStream));\n    setMovieDataArray(movieData.movies);\n    console.log(movieData.movies);\n  }\n\n  function CurrentMovie(data) {\n    if (data.currentTitle !== undefined) {\n      setCurrentMovie(data.currentTitle);\n    }\n  } //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n\n\n  function handleLoading() {\n    if (movieData.loading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Loading Movies...\");\n    } else {\n      if (location.state !== undefined) {\n        if (movieData.currentTitle !== undefined) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, React.createElement(MovieList, {\n            passedMovie: movieData.currentTitle,\n            streamID: localStorage.currentStream,\n            isClicked: clicked,\n            trailerID: trailerID,\n            movieCards: movieData.movies,\n            movieIds: movieData.ids,\n            currentStream: localStorage.currentStreamName,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }));\n        } else return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, location.state.currentMovie.slug);\n      } else {\n        console.log('no movie');\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(MovieList, {\n          streamID: localStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: localStorage.currentStreamName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }));\n      }\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"banner-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, localStorage.currentStreamName.toUpperCase()), handleLoading());\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies.sort(),\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  };\n};\n\nexport default MoviesPage;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js"],"names":["React","useState","useEffect","fetchMovies","fetchTitle","MovieList","useLocation","useSelector","useDispatch","useStore","MoviesPage","props","movieData","state","MoviesReducer","dispatch","location","clicked","setCliked","movieDataArray","setMovieDataArray","currentMovie","setCurrentMovie","undefined","getMoviesArray","CurrentMovie","trailerID","trailer","localStorage","currentStream","movies","console","log","data","currentTitle","handleLoading","loading","ids","currentStreamName","slug","toUpperCase","mapDispatchToProps","movieCards","sort","movieIds"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect } from 'react';\n//import { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions'\nimport { fetchTitle } from '../actions/movieActions'\nimport MovieList from '../components/MovieList'\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux'\n\nconst MoviesPage = (props) => { \n  const movieData = useSelector(state => state.MoviesReducer, []) || []; \n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [movieDataArray,setMovieDataArray] = useState([]); \n  const [currentMovie, setCurrentMovie] = useState('');  \n\n  useEffect(() => {\n      if (location.state !== undefined){\n        getMoviesArray()\n        dispatch(fetchTitle(location.state.currentMovie))\n        setCliked(location.state.clicked)\n        CurrentMovie(movieData)\n\n      }\n      else{\n\n        \n      }        \n    }, []);\n    //dispatch({type: 'LOADING_MOVIES'})\n    //props.fetchMovies(localStorage.currentStream)\n    //console.log(props)\n    //console.log(movieData)\n    //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n  \n\n  function trailerID(trailer){ \n    //link trailer to backend\n  }\n\n  function getMoviesArray(){\n    dispatch(fetchMovies(localStorage.currentStream));\n    setMovieDataArray(movieData.movies)\n    console.log(movieData.movies)    \n  }\n\n  function CurrentMovie(data){\n    if (data.currentTitle !== undefined){\n      setCurrentMovie(data.currentTitle)\n    }\n  }\n\n\n\n  //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n  function handleLoading (){\n    if(movieData.loading) {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      if (location.state !== undefined){\n        if (movieData.currentTitle !== undefined){\n          return(\n          <div>\n            <MovieList passedMovie={movieData.currentTitle} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n          </div>\n          )\n        }\n        else\n          return(\n            <h1>{location.state.currentMovie.slug}</h1>\n          )\n      }\n        else{\n          console.log('no movie')\n            return (\n              <div>\n                  <MovieList streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n              </div>\n            )\n        }\n      \n    }\n  }\n\n  \n    return (\n      <div className=\"App\">\n        <div className=\"banner-2\">{localStorage.currentStreamName.toUpperCase()}</div>\n        {handleLoading()}\n      </div>\n    );\n  }\n\n\n\n\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies.sort(),\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  }\n}\n\nexport default(MoviesPage)"]},"metadata":{},"sourceType":"module"}