{"ast":null,"code":"const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams';\nconst URL = PROXY + streamsAPI; //\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies(id) {\n  let listOfMovieIds = [];\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`${streamsAPI}/${id}/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      Promise.all(responseJSON.map((movie, index) => {\n        let movie_id = responseJSON[index].id;\n        let title = movie.Title;\n        let poster = null;\n\n        if (movie.Poster !== undefined && movie.Poster !== \"N/A\") {\n          poster = movie.Poster;\n        }\n\n        if (responseJSON[index].title === null && responseJSON[index].poster === null) {\n          fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`).then(response => {\n            console.log(response);\n          });\n          console.log(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`); //insert promise\n\n          fetch(`${URL}/${id}/movies/${responseJSON[index].id}?poster=${poster}&title=${title}`, {\n            method: 'PATCH',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }).then(response => {\n            listOfMovieIds.push(movie_id);\n            return response;\n          });\n        }\n      })).then(listOfMovies => {\n        console.log(listOfMovies);\n\n        try {\n          dispatch({\n            type: 'ADD_MOVIES',\n            currentMovieList: listOfMovies,\n            ids: listOfMovieIds\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      });\n    });\n  };\n}\nexport function listMovies() {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'ADD_MOVIES',\n        movies: responseJSON\n      });\n    });\n  };\n} //send specific movie to omdb and retrieve all the data\n// for use with movie search\n\nexport function fetchTitle(movieInfo) {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      if (responseJSON.Title !== null) {\n        try {\n          dispatch({\n            type: 'ADD_MOVIES',\n            movies: [],\n            ids: [],\n            currentTitle: responseJSON\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        console.log('didnt have a title');\n        console.log(responseJSON);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/actions/movieActions.js"],"names":["PROXY","streamsAPI","URL","fetchMovies","id","listOfMovieIds","dispatch","type","fetch","then","response","json","responseJSON","Promise","all","map","movie","index","movie_id","title","Title","poster","Poster","undefined","slug","year","console","log","method","headers","push","listOfMovies","currentMovieList","ids","error","listMovies","movies","fetchTitle","movieInfo","currentTitle"],"mappings":"AAAA,MAAMA,KAAK,GAAG,yCAAd;AACA,MAAMC,UAAU,GAAG,yCAAnB;AACA,MAAMC,GAAG,GAAGF,KAAK,GAAGC,UAApB,C,CAGA;;AAEA,OAAO,SAASE,WAAT,CAAsBC,EAAtB,EAA0B;AAC7B,MAAIC,cAAc,GAAG,EAArB;AAEA,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,GAAEP,UAAW,IAAGG,EAAG,SAArB,CAAL,CAAoCK,IAApC,CAAyCC,QAAQ,IAAI;AACjD,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACpBC,MAAAA,OAAO,CAACC,GAAR,CACAF,YAAY,CAACG,GAAb,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3B,YAAIC,QAAQ,GAAGN,YAAY,CAACK,KAAD,CAAZ,CAAoBb,EAAnC;AAGA,YAAIe,KAAK,GAAGH,KAAK,CAACI,KAAlB;AACA,YAAIC,MAAM,GAAG,IAAb;;AACA,YAAIL,KAAK,CAACM,MAAN,KAAiBC,SAAjB,IAA8BP,KAAK,CAACM,MAAN,KAAiB,KAAnD,EAAyD;AACrDD,UAAAA,MAAM,GAAGL,KAAK,CAACM,MAAf;AACH;;AACD,YAAGV,YAAY,CAACK,KAAD,CAAZ,CAAoBE,KAApB,KAA8B,IAA9B,IAAsCP,YAAY,CAACK,KAAD,CAAZ,CAAoBI,MAApB,KAA+B,IAAxE,EAA6E;AACzEb,UAAAA,KAAK,CAAE,8BAA6BQ,KAAK,CAACQ,IAAK,MAAKR,KAAK,CAACS,IAAK,8BAA1D,CAAL,CAA8FhB,IAA9F,CAAmGC,QAAQ,IAAE;AAACgB,YAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ;AAAsB,WAApI;AACAgB,UAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BX,KAAK,CAACQ,IAAK,MAAKR,KAAK,CAACS,IAAK,8BAArE,EAFyE,CAGzE;;AAEAjB,UAAAA,KAAK,CAAE,GAAEN,GAAI,IAAGE,EAAG,WAAUQ,YAAY,CAACK,KAAD,CAAZ,CAAoBb,EAAG,WAAUiB,MAAO,UAASF,KAAM,EAA/E,EAAkF;AACnFS,YAAAA,MAAM,EAAE,OAD2E;AAEnFC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB;AAF0E,WAAlF,CAAL,CAGGpB,IAHH,CAGQC,QAAQ,IAAI;AAChBL,YAAAA,cAAc,CAACyB,IAAf,CAAoBZ,QAApB;AACA,mBAAOR,QAAP;AACH,WAND;AAOH;AACJ,OAtBL,CADA,EAwBMD,IAxBN,CAwBWsB,YAAY,IAAG;AAClBL,QAAAA,OAAO,CAACC,GAAR,CAAYI,YAAZ;;AACA,YAAI;AACAzB,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,IAAI,EAAE,YAAR;AAAsByB,YAAAA,gBAAgB,EAAED,YAAxC;AAAsDE,YAAAA,GAAG,EAAE5B;AAA3D,WAAD,CAAR;AACH,SAFD,CAGA,OAAM6B,KAAN,EAAY;AACRR,UAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,OAhCL;AAiCC,KApCL;AAqCC,GAvCL;AAwCH;AAKD,OAAO,SAASC,UAAT,GAAqB;AACxB,SAAQ7B,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,wCAAF,CAAL,CAAgDC,IAAhD,CAAqDC,QAAQ,IAAI;AAC7D,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACpBN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,YAAR;AAAsB6B,QAAAA,MAAM,EAAExB;AAA9B,OAAD,CAAR;AACH,KAJD;AAKH,GAPD;AAQH,C,CAED;AACA;;AACA,OAAO,SAASyB,UAAT,CAAqBC,SAArB,EAA+B;AAClC,SAAQhC,QAAD,IAAc;AACbA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,8BAA6B8B,SAAS,CAACd,IAAK,MAAKc,SAAS,CAACb,IAAK,mBAAlE,CAAL,CAA2FhB,IAA3F,CAAgGC,QAAQ,IAAI;AACxG,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACR,UAAGA,YAAY,CAACQ,KAAb,KAAuB,IAA1B,EAA+B;AAC/B,YAAI;AACAd,UAAAA,QAAQ,CAAC;AAAEC,YAAAA,IAAI,EAAE,YAAR;AAAsB6B,YAAAA,MAAM,EAAE,EAA9B;AAAkCH,YAAAA,GAAG,EAAE,EAAvC;AAA2CM,YAAAA,YAAY,EAAE3B;AAAzD,WAAD,CAAR;AACH,SAFD,CAGA,OAAMsB,KAAN,EAAY;AACRR,UAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,OAPG,MAQA;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYf,YAAZ;AACH;AACA,KAfb;AAgBH,GAlBL;AAmBH","sourcesContent":["const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams'\nconst URL = PROXY + streamsAPI\n\n\n//\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies (id) {\n    let listOfMovieIds = []\n    \n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`${streamsAPI}/${id}/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            Promise.all(\n            responseJSON.map((movie, index) => {\n                    let movie_id = responseJSON[index].id\n                    \n\n                    let title = movie.Title\n                    let poster = null\n                    if (movie.Poster !== undefined && movie.Poster !== \"N/A\"){\n                        poster = movie.Poster\n                    }\n                    if(responseJSON[index].title === null && responseJSON[index].poster === null){   \n                        fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`).then(response=>{console.log(response)})\n                        console.log(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`)\n                        //insert promise\n\n                        fetch(`${URL}/${id}/movies/${responseJSON[index].id}?poster=${poster}&title=${title}`, {\n                            method: 'PATCH',\n                            headers: { \"Content-Type\": \"application/json\" },\n                        }).then(response => {\n                            listOfMovieIds.push(movie_id)\n                            return response\n                        })\n                    }\n                })\n                ).then(listOfMovies =>{\n                    console.log(listOfMovies)\n                    try {\n                        dispatch({ type: 'ADD_MOVIES', currentMovieList: listOfMovies, ids: listOfMovieIds})\n                    }\n                    catch(error){\n                        console.log(error)\n                    }\n                })\n            })\n        }\n}\n\n\n\n\nexport function listMovies(){\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            dispatch({ type: 'ADD_MOVIES', movies: responseJSON})\n        })\n    }\n}\n\n//send specific movie to omdb and retrieve all the data\n// for use with movie search\nexport function fetchTitle (movieInfo){\n    return (dispatch) => {\n            dispatch({ type: 'LOADING_MOVIES'})\n            fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n                return response.json()\n            }).then(responseJSON => {\n                            if(responseJSON.Title !== null){ \n                            try {\n                                dispatch({ type: 'ADD_MOVIES', movies: [], ids: [], currentTitle: responseJSON})\n                            }\n                            catch(error){\n                                console.log(error)\n                            }\n                        }\n                        else{\n                            console.log('didnt have a title')\n                            console.log(responseJSON)\n                        }\n                        })\n        }\n}"]},"metadata":{},"sourceType":"module"}