{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js\";\nimport React, { useState, useEffect, useMemo } from 'react'; //import { connect } from 'react-redux';\n\nimport { fetchMovies } from '../actions/movieActions';\nimport { fetchTitle } from '../actions/movieActions';\nimport MovieList from '../components/MovieList';\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore, connect } from 'react-redux';\n\nconst MoviesPage = props => {\n  const movieData = useSelector(state => state.MoviesReducer, []) || [];\n  const dispatch = (useDispatch(), []);\n  const location = useLocation();\n  const [clicked, setCliked] = useState();\n  const [movieDataArray, setMovieDataArray] = useState([]);\n  const [currentMovie, setCurrentMovie] = useState('');\n  useEffect(() => {\n    let local = '';\n\n    if (location.state !== undefined) {\n      if (location.state.state !== undefined) {\n        setCliked(location.state.state.clicked); //console.log(clicked)\n\n        CurrentMovie(movieData); //dispatch(fetchTitle(location.state.state.currentMovie))\n\n        local = location.state.state.currentMovie;\n      } else {\n        //dispatch(fetchTitle(location.state.currentMovie))\n        local = location.state.currentMovie;\n        setCliked(location.state.clicked);\n        CurrentMovie(movieData);\n      }\n\n      doDispatch(local);\n    } else {\n      getMoviesArray();\n    }\n  }, []); //dispatch({type: 'LOADING_MOVIES'})\n  //props.fetchMovies(localStorage.currentStream)\n  //console.log(props)\n  //console.log(movieData)\n  //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n\n  function doDispatch(location) {\n    console.log(location);\n    dispatch(fetchTitle(location));\n  }\n\n  function trailerID(trailer) {//link trailer to backend\n  }\n\n  function getMoviesArray() {\n    dispatch(fetchMovies(localStorage.currentStream));\n    setMovieDataArray(movieData.movies);\n  }\n\n  function CurrentMovie(data) {\n    if (data.currentTitle !== undefined) {\n      setCurrentMovie(data.currentTitle);\n    }\n  }\n\n  function handleFunctions(e) {\n    props.pointer(e);\n    props.resetCount();\n  } //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n\n\n  function handleLoading() {\n    if (movieData.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 14\n        }\n      }, \"Loading Movies...\");\n    } else {\n      if (location.state !== undefined) {\n        if (movieData.currentTitle !== undefined) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(MovieList, {\n            passedMovie: movieData.currentTitle,\n            streamID: localStorage.currentStream,\n            isClicked: clicked,\n            trailerID: trailerID,\n            movieCards: movieData.movies,\n            movieIds: movieData.ids,\n            currentStream: localStorage.currentStreamName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 13\n            }\n          }));\n        } else if (location.state.state !== undefined) {\n          console.log(location.state.state.currentMovie.slug);\n          return /*#__PURE__*/React.createElement(\"h1\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 13\n            }\n          }, location.state.state.currentMovie.slug);\n        }\n\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }\n        }, location.state.currentMovie.slug);\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(MovieList, {\n          streamID: localStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: localStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 19\n          }\n        }));\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    onClick: handleFunctions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, handleLoading());\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: () => state.MoviesReducer.movies.sort(),\n    movieIds: () => state.MoviesReducer.ids,\n    loading: () => state.MoviesReducer.loading\n  };\n};\n\nconnect()(MoviesPage);\nexport default MoviesPage;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js"],"names":["React","useState","useEffect","useMemo","fetchMovies","fetchTitle","MovieList","useLocation","useSelector","useDispatch","useStore","connect","MoviesPage","props","movieData","state","MoviesReducer","dispatch","location","clicked","setCliked","movieDataArray","setMovieDataArray","currentMovie","setCurrentMovie","local","undefined","CurrentMovie","doDispatch","getMoviesArray","console","log","trailerID","trailer","localStorage","currentStream","movies","data","currentTitle","handleFunctions","e","pointer","resetCount","handleLoading","loading","ids","currentStreamName","slug","mapDispatchToProps","movieCards","sort","movieIds"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect, useMemo } from 'react';\n//import { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions'\nimport { fetchTitle } from '../actions/movieActions'\nimport MovieList from '../components/MovieList'\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore, connect } from 'react-redux'\n\nconst MoviesPage = (props) => { \n  const movieData = useSelector(state => state.MoviesReducer, []) || []; \n  const dispatch = (useDispatch(),[]);\n  const location = useLocation();\n  const [clicked, setCliked] = useState();\n  const [movieDataArray,setMovieDataArray] = useState([]); \n  const [currentMovie, setCurrentMovie] = useState('');  \n\n  useEffect(() => {\n    let local = ''\n      if (location.state !== undefined){\n        if (location.state.state !== undefined){\n          setCliked(location.state.state.clicked)\n          //console.log(clicked)\n          CurrentMovie(movieData)\n          //dispatch(fetchTitle(location.state.state.currentMovie))\n          local = location.state.state.currentMovie\n        } \n        else{\n          //dispatch(fetchTitle(location.state.currentMovie))\n          local = location.state.currentMovie\n          setCliked(location.state.clicked)\n          CurrentMovie(movieData) \n        }\n        doDispatch(local) \n      }\n      else{\n        getMoviesArray()\n      }        \n    }, []);\n    //dispatch({type: 'LOADING_MOVIES'})\n    //props.fetchMovies(localStorage.currentStream)\n    //console.log(props)\n    //console.log(movieData)\n    //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n \n    \n  \n  function doDispatch(location){\n    console.log(location)\n    dispatch(fetchTitle(location)) \n  }  \n\n  function trailerID(trailer){ \n    //link trailer to backend\n  }\n\n  function getMoviesArray(){\n    dispatch(fetchMovies(localStorage.currentStream));\n    setMovieDataArray(movieData.movies)  \n  }\n\n  function CurrentMovie(data){\n    if (data.currentTitle !== undefined){\n      setCurrentMovie(data.currentTitle)\n    }\n  }\n\n  function handleFunctions(e){\n    props.pointer(e)\n    props.resetCount()\n  }\n\n\n\n  //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n  function handleLoading (){\n    if(movieData.loading) {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      if (location.state !== undefined){\n        if (movieData.currentTitle !== undefined){\n          return(\n          <div>\n            <MovieList passedMovie={movieData.currentTitle} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n          </div>\n          )\n        }\n        else if(location.state.state!==undefined){\n          console.log(location.state.state.currentMovie.slug)\n          return(\n            <h1>{location.state.state.currentMovie.slug}</h1>\n          )\n        }\n          return(\n            <h1>{location.state.currentMovie.slug}</h1>\n          )\n      }\n        else{\n            return (\n              <div>\n                  <MovieList streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n              </div>\n            )\n        }\n      \n    }\n  }\n\n  \n    return (\n      <div className=\"App\" onClick={handleFunctions}>\n        \n        {handleLoading()}\n      </div>\n    );\n  }\n\n\n\n\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: ()=> state.MoviesReducer.movies.sort(),\n    movieIds: ()=>state.MoviesReducer.ids,\n    loading:()=> state.MoviesReducer.loading\n  }\n}\n\nconnect()(MoviesPage)\n\nexport default(MoviesPage)"]},"metadata":{},"sourceType":"module"}