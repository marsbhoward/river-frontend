{"ast":null,"code":"const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams';\nconst URL = PROXY + streamsAPI; //\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies(id) {\n  let listOfMovieIds = [];\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`${URL}/${id}/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      Promise.all(responseJSON.map(movie => fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}+&apikey=6b46131b`).then(resp => {\n        //write movie title to backend\n        return resp.json();\n      }))).then(listOfMovies => {\n        listOfMovies.map((movie, index) => {\n          let stream_id = id;\n          let movie_id = responseJSON[index].id;\n          let title = movie.Title;\n\n          if (responseJSON[index].title === null) {\n            /*fetch(`${URL}/${id}/movies/${responseJSON[index].id}?title=${title}`, {\n                method: 'PATCH',\n                headers: { \"Content-Type\": \"application/json\" },\n            }).then(response => {\n                dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, ids: listOfMovieIds})\n            })\n            */\n          } else {\n            listOfMovieIds.push(movie_id);\n\n            try {\n              dispatch({\n                type: 'ADD_MOVIES',\n                movies: listOfMovies,\n                ids: listOfMovieIds\n              });\n            } catch (error) {\n              console.log(error);\n            }\n          }\n        });\n      });\n    });\n  };\n}\nexport function listMovies() {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`${PROXY}https://river-api.herokuapp.com/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'ADD_MOVIES',\n        movies: responseJSON\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/actions/movieActions.js"],"names":["PROXY","streamsAPI","URL","fetchMovies","id","listOfMovieIds","dispatch","type","fetch","then","response","json","responseJSON","Promise","all","map","movie","slug","year","resp","listOfMovies","index","stream_id","movie_id","title","Title","push","movies","ids","error","console","log","listMovies"],"mappings":"AAAA,MAAMA,KAAK,GAAG,yCAAd;AACA,MAAMC,UAAU,GAAG,yCAAnB;AACA,MAAMC,GAAG,GAAGF,KAAK,GAAGC,UAApB,C,CAGA;;AAEA,OAAO,SAASE,WAAT,CAAsBC,EAAtB,EAA0B;AAC7B,MAAIC,cAAc,GAAG,EAArB;AACA,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,GAAEN,GAAI,IAAGE,EAAG,SAAd,CAAL,CAA6BK,IAA7B,CAAkCC,QAAQ,IAAI;AAC1C,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACpBC,MAAAA,OAAO,CAACC,GAAR,CACIF,YAAY,CAACG,GAAb,CACIC,KAAK,IAAIR,KAAK,CAAE,8BAA6BQ,KAAK,CAACC,IAAK,MAAKD,KAAK,CAACE,IAAK,mBAA1D,CAAL,CACRT,IADQ,CACHU,IAAI,IAAI;AACV;AACA,eAAOA,IAAI,CAACR,IAAL,EAAP;AACH,OAJQ,CADb,CADJ,EAQEF,IARF,CAQOW,YAAY,IAAI;AACnBA,QAAAA,YAAY,CAACL,GAAb,CAAiB,CAACC,KAAD,EAAQK,KAAR,KAAkB;AAC/B,cAAIC,SAAS,GAAGlB,EAAhB;AACA,cAAImB,QAAQ,GAAGX,YAAY,CAACS,KAAD,CAAZ,CAAoBjB,EAAnC;AACA,cAAIoB,KAAK,GAAGR,KAAK,CAACS,KAAlB;;AACA,cAAGb,YAAY,CAACS,KAAD,CAAZ,CAAoBG,KAApB,KAA8B,IAAjC,EAAsC;AAClC;;;;;;;AAOH,WARD,MASK;AACDnB,YAAAA,cAAc,CAACqB,IAAf,CAAoBH,QAApB;;AACA,gBAAI;AACAjB,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAE,YAAR;AAAsBoB,gBAAAA,MAAM,EAAEP,YAA9B;AAA4CQ,gBAAAA,GAAG,EAAEvB;AAAjD,eAAD,CAAR;AACH,aAFD,CAGA,OAAMwB,KAAN,EAAY;AACRC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;AACJ,SAtBD;AAuBH,OAhCD;AAiCH,KApCD;AAqCH,GAvCD;AAwCH;AAKD,OAAO,SAASG,UAAT,GAAqB;AACxB,SAAQ1B,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAE,GAAER,KAAM,wCAAV,CAAL,CAAwDS,IAAxD,CAA6DC,QAAQ,IAAI;AACrE,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACpBN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,YAAR;AAAsBoB,QAAAA,MAAM,EAAEf;AAA9B,OAAD,CAAR;AACH,KAJD;AAKH,GAPD;AAQH","sourcesContent":["const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams'\nconst URL = PROXY + streamsAPI\n\n\n//\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies (id) {\n    let listOfMovieIds = []\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`${URL}/${id}/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            Promise.all(\n                responseJSON.map(\n                    movie => fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}+&apikey=6b46131b`)\n                    .then(resp => {\n                        //write movie title to backend\n                        return resp.json()\n                    })\n                )\n            ).then(listOfMovies => {\n                listOfMovies.map((movie, index) => {\n                    let stream_id = id \n                    let movie_id = responseJSON[index].id\n                    let title = movie.Title\n                    if(responseJSON[index].title === null){   \n                        /*fetch(`${URL}/${id}/movies/${responseJSON[index].id}?title=${title}`, {\n                            method: 'PATCH',\n                            headers: { \"Content-Type\": \"application/json\" },\n                        }).then(response => {\n                            dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, ids: listOfMovieIds})\n                        })\n                        */\n                    }\n                    else {\n                        listOfMovieIds.push(movie_id)\n                        try {\n                            dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, ids: listOfMovieIds})\n                        }\n                        catch(error){\n                            console.log(error)\n                        }\n                    }  \n                })\n            })\n        })\n    }\n}\n\n\n\n\nexport function listMovies(){\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`${PROXY}https://river-api.herokuapp.com/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            dispatch({ type: 'ADD_MOVIES', movies: responseJSON})\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}