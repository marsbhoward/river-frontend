{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadImage;\n/**\n * Load a image like a browser\n * @param {String} url\n * @param {String} crossOrigin\n * @returns {Promise} Promise object that returns a image\n */\n\nfunction loadImage(url, crossOrigin = undefined) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.addEventListener('load', () => {\n      resolve(img);\n    });\n    img.addEventListener('error', () => {\n      reject(new Error(`Failed to load image's URL: ${url}`));\n    });\n    img.crossOrigin = crossOrigin;\n    img.src = url;\n  });\n}","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/node_modules/color-thief-react/dist/loadImage.js"],"names":["Object","defineProperty","exports","value","default","loadImage","url","crossOrigin","undefined","Promise","resolve","reject","img","Image","addEventListener","Error","src"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,SAAlB;AAEA;;;;;;;AAMA,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,WAAW,GAAGC,SAAtC,EAAiD;AAC/C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,IAAAA,GAAG,CAACE,gBAAJ,CAAqB,MAArB,EAA6B,MAAM;AACjCJ,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD,KAFD;AAGAA,IAAAA,GAAG,CAACE,gBAAJ,CAAqB,OAArB,EAA8B,MAAM;AAClCH,MAAAA,MAAM,CAAC,IAAII,KAAJ,CAAW,+BAA8BT,GAAI,EAA7C,CAAD,CAAN;AACD,KAFD;AAGAM,IAAAA,GAAG,CAACL,WAAJ,GAAkBA,WAAlB;AACAK,IAAAA,GAAG,CAACI,GAAJ,GAAUV,GAAV;AACD,GAVM,CAAP;AAWD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadImage;\n\n/**\n * Load a image like a browser\n * @param {String} url\n * @param {String} crossOrigin\n * @returns {Promise} Promise object that returns a image\n */\nfunction loadImage(url, crossOrigin = undefined) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.addEventListener('load', () => {\n      resolve(img);\n    });\n    img.addEventListener('error', () => {\n      reject(new Error(`Failed to load image's URL: ${url}`));\n    });\n    img.crossOrigin = crossOrigin;\n    img.src = url;\n  });\n}"]},"metadata":{},"sourceType":"script"}