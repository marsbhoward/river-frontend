{"ast":null,"code":"const currentStreams = {\n  streams: []\n};\nvar streamsList = [{\n  name: \"netflix\"\n}, {\n  name: \"hulu\"\n}, {\n  name: \"amazon\"\n}, {\n  name: \"hbo\"\n}, {\n  name: \"disney\"\n}, {\n  name: \"showtime\"\n}];\n\nclass Stream {\n  constructor(name) {\n    this.name = name;\n  }\n\n}\n\nvar getStreamsList = new Promise((resolve, reject) => {\n  const xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", \"http://localhost:3000/streams\");\n\n  xhr.onload = () => resolve(JSON.parse(xhr.responseText));\n\n  xhr.onerror = () => reject(xhr.statusText);\n\n  xhr.send();\n});\nconsole.log(xhr.open(\"GET\", \"http://localhost:3000/streams\"));\nvar getStreamDetails = getStreamsList.then(function (fulfilledList) {\n  console.log(fulfilledList.results);\n}).catch(function (error) {\n  console.log(error.message);\n});\nexport default streamsList;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/data.js"],"names":["currentStreams","streams","streamsList","name","Stream","constructor","getStreamsList","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","JSON","parse","responseText","onerror","statusText","send","console","log","getStreamDetails","then","fulfilledList","results","catch","error","message"],"mappings":"AAAA,MAAMA,cAAc,GAAG;AACtBC,EAAAA,OAAO,EAAE;AADa,CAAvB;AAGA,IAAIC,WAAW,GAAG,CAClB;AAACC,EAAAA,IAAI,EAAE;AAAP,CADkB,EAElB;AAACA,EAAAA,IAAI,EAAE;AAAP,CAFkB,EAGlB;AAACA,EAAAA,IAAI,EAAE;AAAP,CAHkB,EAIlB;AAACA,EAAAA,IAAI,EAAE;AAAP,CAJkB,EAKlB;AAACA,EAAAA,IAAI,EAAE;AAAP,CALkB,EAMlB;AAACA,EAAAA,IAAI,EAAE;AAAP,CANkB,CAAlB;;AAQA,MAAMC,MAAN,CAAY;AACXC,EAAAA,WAAW,CAACF,IAAD,EAAM;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA;;AAHU;;AAOZ,IAAIG,cAAc,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtD,QAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AAEAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgB,+BAAhB;;AACAF,EAAAA,GAAG,CAACG,MAAJ,GAAa,MAAML,OAAO,CAACM,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACM,YAAf,CAAD,CAA1B;;AACAN,EAAAA,GAAG,CAACO,OAAJ,GAAc,MAAMR,MAAM,CAACC,GAAG,CAACQ,UAAL,CAA1B;;AACAR,EAAAA,GAAG,CAACS,IAAJ;AACC,CAPoB,CAArB;AASAC,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgB,+BAAhB,CAAZ;AACA,IAAIU,gBAAgB,GAAGhB,cAAc,CACpCiB,IADsB,CACjB,UAAUC,aAAV,EAAyB;AACvBJ,EAAAA,OAAO,CAACC,GAAR,CAAYG,aAAa,CAACC,OAA1B;AAEG,CAJY,EAKlBC,KALkB,CAKZ,UAAUC,KAAV,EAAiB;AACpBP,EAAAA,OAAO,CAACC,GAAR,CAAYM,KAAK,CAACC,OAAlB;AACH,CAPkB,CAAvB;AAYA,eAAe1B,WAAf","sourcesContent":["const currentStreams = {\n\tstreams: [],\n};\nvar streamsList = [\n{name: \"netflix\"},\n{name: \"hulu\"},\n{name: \"amazon\"},\n{name: \"hbo\"},\n{name: \"disney\"},\n{name: \"showtime\"}];\n\nclass Stream{\n\tconstructor(name){\n\t\tthis.name = name;\n\t}\n\t\n}\n\nvar getStreamsList = new Promise((resolve, reject) => {\nconst xhr = new XMLHttpRequest();\n\nxhr.open(\"GET\", \"http://localhost:3000/streams\");\nxhr.onload = () => resolve(JSON.parse(xhr.responseText));\nxhr.onerror = () => reject(xhr.statusText);\nxhr.send();\n});\n\nconsole.log(xhr.open(\"GET\", \"http://localhost:3000/streams\"))\nvar getStreamDetails = getStreamsList\n.then(function (fulfilledList) {\n        console.log(fulfilledList.results);\n\n          })\n    .catch(function (error) {\n        console.log(error.message);\n    });\n\n\n\n\nexport default streamsList"]},"metadata":{},"sourceType":"module"}