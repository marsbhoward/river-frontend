{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/ProfilePage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions';\nimport Profile from '../components/Profile';\nimport { Auth0Context } from \"../react-auth0-spa\";\nimport { Fragment } from \"react\";\nlet selectList = [];\nlet deselectList = [];\n\nclass ProfilePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchUserStreams = id => {\n      this.setState({\n        userID: id\n      });\n    };\n\n    this.handleSwitch = (dom, stream) => {\n      switch (stream.selected) {\n        case true:\n          dom.style.borderStyle = 'outset';\n          dom.style.background = \"lightgray\";\n          dom.className = \"stream false\";\n          stream.selected = false;\n          break;\n\n        case false:\n          dom.style.borderStyle = 'inset';\n          dom.style.background = \"white\";\n          dom.className = \"stream true\";\n          stream.selected = true;\n          break;\n      }\n    };\n\n    this.handleLists = stream => {\n      //can use stream.selected\n      let streamDom = document.getElementById(stream.stream_id);\n\n      if (selectList.indexOf(stream.stream_id) === -1) {\n        this.handleSwitch(streamDom, stream);\n        selectList.push(stream.stream_id);\n        console.log(selectList);\n      } else {\n        let index = selectList.indexOf(stream.stream_id);\n        selectList.splice(index, 1);\n        console.log(selectList);\n        console.log(stream.selected);\n\n        switch (stream.selected) {\n          case false:\n            streamDom.style.borderStyle = 'inset';\n            streamDom.style.background = \"white\";\n            streamDom.className = \"stream true\";\n            stream.selected = true;\n            break;\n        }\n      } ////////////////////////////////////////////////********    old method     ********///////////////////////////////////////////////////\n\n      /*let selectedStream = document.getElementById(stream.stream_id)\n      //adds stream id to list of values to be changed on api\n      if(selectList.indexOf(stream.stream_id) === -1) {\n        selectList.push(stream.stream_id)\n        //edits the button visual\n        if (selectedStream.className === \"stream true\"){\n          selectedStream.style.borderStyle = 'outset';\n          selectedStream.style.background = \"lightgray\"; \n        }\n        else{\n          selectedStream.style.borderStyle = 'inset'\n          selectedStream.style.background = \"white\"; \n        }\n      }\n      else{\n      //removes stream id from list of values if clicked again before done  \n        let index = selectList.indexOf(stream.stream_id);\n        selectList.splice(index,1);\n        //reverts button visual to default\n          if (selectedStream.className === \"stream true\"){\n            selectedStream.style.borderStyle = 'inset'\n            selectedStream.style.background = \"white\"; \n          }\n          else{\n            selectedStream.style.borderStyle = 'outset';\n            selectedStream.style.background = \"lightgray\";\n          }\n        }\n        */\n\n    };\n\n    this.handleClick = () => {\n      let selectedStreams = document.getElementsByClassName(\"true\");\n      let unSelectedStreams = document.getElementsByClassName(\"false\");\n\n      for (let i = 0, len = selectedStreams.length; i < len; i++) {\n        selectedStreams[i].style.borderStyle = 'inset';\n      }\n\n      for (let i = 0, len = unSelectedStreams.length; i < len; i++) {\n        unSelectedStreams[i].style.borderStyle = 'outset';\n        unSelectedStreams[i].background = \"lightgray\";\n      }\n\n      this.setState({\n        streamEdit: true\n      });\n    };\n\n    this.handleDone = () => {\n      let streams = document.getElementsByClassName(\"stream\");\n\n      for (let i = 0, len = streams.length; i < len; i++) {\n        streams[i].style.borderStyle = 'none';\n        streams[i].background = \"white\";\n      }\n\n      this.setState({\n        streamEdit: false\n      }); //can implement after a second list is made\n      // one for selected, one for unselected\n      //add method that edits backend here\n      //selectList.forEach( stream_id =>{\n      //    adapter.editStream(stream_id,selected,user_id)\n      //  }\n      //)\n    };\n\n    this.handleLoading = id => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, \"Loading Streams...\");\n      } else {\n        return React.createElement(Profile, {\n          userID: id,\n          userStreams: this.props.userStreams,\n          handleLists: this.handleLists,\n          editClicked: this.state.streamEdit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.state = {\n      streamEdit: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchUserStreams(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps) {}\n\n  render() {\n    const {\n      loading,\n      user\n    } = this.context;\n    const {\n      isAuthenticated,\n      loginWithRedirect\n    } = this.context;\n\n    if (loading || !user) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    if (this.state.streamEdit == true) {\n      return React.createElement(\"div\", {\n        className: \"profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: user.picture,\n        alt: \"Profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Hi, \", user.name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"email: \", user.email), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Edit Streams\"), this.handleLoading(this.props.userId), React.createElement(\"button\", {\n        className: \"done-button\",\n        onClick: this.handleDone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Done\"));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: user.picture,\n        alt: \"Profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Hi, \", user.name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"email: \", user.email), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Edit Streams\"), this.handleLoading(this.props.userId));\n    }\n  }\n\n}\n\nProfilePage.contextType = Auth0Context;\nconst adapter = {\n  editStream: (stream_id, selected, user_id) => {\n    return fetch(`https://cors-anywhere.herokuapp.com/https://river-api.herokuapp.com/users/{user_id}/user_streams/stream_id`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        selected\n      })\n    }).then(res => res.json());\n  }\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams,\n    loading: state.StreamsReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchUserStreams\n})(ProfilePage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/ProfilePage.js"],"names":["React","Component","connect","fetchUserStreams","Profile","Auth0Context","Fragment","selectList","deselectList","ProfilePage","constructor","props","id","setState","userID","handleSwitch","dom","stream","selected","style","borderStyle","background","className","handleLists","streamDom","document","getElementById","stream_id","indexOf","push","console","log","index","splice","handleClick","selectedStreams","getElementsByClassName","unSelectedStreams","i","len","length","streamEdit","handleDone","streams","handleLoading","loading","userStreams","state","componentDidMount","userId","componentDidUpdate","prevProps","render","user","context","isAuthenticated","loginWithRedirect","picture","name","email","contextType","adapter","editStream","user_id","fetch","method","headers","body","JSON","stringify","then","res","json","mapDispatchToProps","StreamsReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions'\nimport Profile from '../components/Profile';\nimport { Auth0Context } from \"../react-auth0-spa\";\nimport { Fragment } from \"react\";\n\n\nlet selectList = []\nlet deselectList = [] \nclass ProfilePage extends Component {\n static contextType = Auth0Context; \n\n  constructor(props){\n    super(props)\n    this.state = {\n      streamEdit: false\n    }\n  } \n  \n  componentDidMount() {\n    this.props.fetchUserStreams(this.props.userId)\n  }\n\n  componentDidUpdate(prevProps){\n  }\n\n  fetchUserStreams = (id) => {\n    this.setState({\n      userID: id\n    })\n  }\n\n  handleSwitch = (dom,stream) => {\n    switch (stream.selected) {\n      case true:\n        dom.style.borderStyle = 'outset';\n        dom.style.background = \"lightgray\";\n\n        dom.className =  \"stream false\"\n        stream.selected = false; \n        break;\n      case false:\n        dom.style.borderStyle = 'inset'\n        dom.style.background = \"white\";\n        \n        dom.className =  \"stream true\"        \n        stream.selected = true; \n        break;\n    }\n  }\n\n  handleLists = (stream) => {\n    //can use stream.selected\n    let streamDom = document.getElementById(stream.stream_id)\n\n    if(selectList.indexOf(stream.stream_id) === -1){\n      this.handleSwitch(streamDom,stream)\n      selectList.push(stream.stream_id)\n      console.log(selectList)\n    }\n    else {\n      let index = selectList.indexOf(stream.stream_id);\n      selectList.splice(index,1);\n      console.log(selectList)\n      console.log(stream.selected)\n        switch(stream.selected){\n          case false:\n            streamDom.style.borderStyle = 'inset'\n            streamDom.style.background = \"white\";\n            \n            streamDom.className =  \"stream true\"        \n            stream.selected = true; \n          break;            \n        }\n          \n      }            \n   \n\n\n\n\n\n\n\n    ////////////////////////////////////////////////********    old method     ********///////////////////////////////////////////////////\n    /*let selectedStream = document.getElementById(stream.stream_id)\n    //adds stream id to list of values to be changed on api\n    if(selectList.indexOf(stream.stream_id) === -1) {\n      selectList.push(stream.stream_id)\n      //edits the button visual\n      if (selectedStream.className === \"stream true\"){\n        selectedStream.style.borderStyle = 'outset';\n        selectedStream.style.background = \"lightgray\"; \n      }\n      else{\n        selectedStream.style.borderStyle = 'inset'\n        selectedStream.style.background = \"white\"; \n      }\n    }\n    else{\n    //removes stream id from list of values if clicked again before done  \n      let index = selectList.indexOf(stream.stream_id);\n      selectList.splice(index,1);\n      //reverts button visual to default\n        if (selectedStream.className === \"stream true\"){\n          selectedStream.style.borderStyle = 'inset'\n          selectedStream.style.background = \"white\"; \n        }\n        else{\n          selectedStream.style.borderStyle = 'outset';\n          selectedStream.style.background = \"lightgray\";\n        }\n      }\n      */\n  }\n  handleClick = () => {\n    let selectedStreams = document.getElementsByClassName(\"true\");\n    let unSelectedStreams = document.getElementsByClassName(\"false\");\n\n    for (let i = 0, len = selectedStreams.length; i < len; i++) {\n      selectedStreams[i].style.borderStyle = 'inset'\n    }\n\n    for (let i = 0, len = unSelectedStreams.length; i < len; i++) {\n      unSelectedStreams[i].style.borderStyle = 'outset';\n      unSelectedStreams[i].background = \"lightgray\"; \n    }\n\n    this.setState({\n      streamEdit: true\n    })            \n\n  } \n\n  handleDone = () => {\n    let streams = document.getElementsByClassName(\"stream\")\n    \n    for (let i = 0, len = streams.length; i < len; i++) {\n      streams[i].style.borderStyle = 'none';\n      streams[i].background = \"white\"; \n    }\n    this.setState({\n      streamEdit: false\n    }) \n\n    //can implement after a second list is made\n    // one for selected, one for unselected\n\n    //add method that edits backend here\n    //selectList.forEach( stream_id =>{\n    //    adapter.editStream(stream_id,selected,user_id)\n    //  }\n    //)\n  }\n\n  handleLoading = (id) => {\n    if(this.props.loading) {\n      return <div>Loading Streams...</div>\n    } else {\n      return <Profile userID={id} userStreams={this.props.userStreams} handleLists={this.handleLists} editClicked={this.state.streamEdit}/>\n    }\n  }\n\n  render() {\n    const { loading, user } = this.context;\n    const { isAuthenticated, loginWithRedirect} = this.context;\n    \n    if (loading || !user) {\n      return <div>Loading...</div>;\n    }\n\n    if (this.state.streamEdit == true){\n      return ( \n        <div className= \"profile\">\n          <img src={user.picture} alt=\"Profile\" />\n          <h2>Hi, {user.name}</h2>\n          <p>email: {user.email}</p>\n          <button onClick={this.handleClick}>Edit Streams</button>\n          {this.handleLoading(this.props.userId)}\n          <button className=\"done-button\" onClick={this.handleDone}>Done</button>\n        </div>             \n      );\n    }\n    else{\n      return ( \n        <div className= \"profile\">\n          <img src={user.picture} alt=\"Profile\" />\n          <h2>Hi, {user.name}</h2>\n          <p>email: {user.email}</p>\n          <button onClick={this.handleClick}>Edit Streams</button>\n          {this.handleLoading(this.props.userId)}\n        </div>             \n      );\n    }\n  }\n}\n\n  const adapter = {\n    editStream: (stream_id,selected,user_id) => {\n      return fetch(`https://cors-anywhere.herokuapp.com/https://river-api.herokuapp.com/users/{user_id}/user_streams/stream_id`, {\n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, selected})\n      })\n    .then(res => res.json())       \n    }\n  }\n\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams,\n    loading: state.StreamsReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, {fetchUserStreams})(ProfilePage)"]},"metadata":{},"sourceType":"module"}