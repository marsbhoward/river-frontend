{"ast":null,"code":"const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams';\nconst URL = PROXY + streamsAPI; //\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies(id) {\n  let listOfMovieIds = [];\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`${streamsAPI}/${id}/movies`).then(response => {\n      return response.json();\n    }).then(listOfMovies => {\n      listOfMovies.map((movie, index) => {\n        let movie_id = responseJSON[index].id;\n        fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`).then(response => {\n          console.log(response);\n        });\n        let title = movie.Title;\n        let poster = null;\n\n        if (movie.Poster !== undefined && movie.Poster !== \"N/A\") {\n          poster = movie.Poster;\n        }\n\n        if (responseJSON[index].title === null && responseJSON[index].poster === null) {\n          console.log(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`); //insert promise\n\n          fetch(`${URL}/${id}/movies/${responseJSON[index].id}?poster=${poster}&title=${title}`, {\n            method: 'PATCH',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }).then(response => {\n            listOfMovieIds.push(movie_id);\n\n            try {\n              dispatch({\n                type: 'ADD_MOVIES',\n                movies: listOfMovies,\n                ids: listOfMovieIds\n              });\n            } catch (error) {\n              console.log(error);\n            }\n          });\n        } else {\n          listOfMovieIds.push(movie_id);\n\n          try {\n            dispatch({\n              type: 'ADD_MOVIES',\n              movies: listOfMovies,\n              ids: listOfMovieIds\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      });\n    });\n  };\n}\nexport function listMovies() {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'ADD_MOVIES',\n        movies: responseJSON\n      });\n    });\n  };\n} //send specific movie to omdb and retrieve all the data\n// for use with movie search\n\nexport function fetchTitle(movieInfo) {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      if (responseJSON.Title !== null) {\n        try {\n          dispatch({\n            type: 'ADD_MOVIES',\n            movies: [],\n            ids: [],\n            currentTitle: responseJSON\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        console.log('didnt have a title');\n        console.log(responseJSON);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/actions/movieActions.js"],"names":["PROXY","streamsAPI","URL","fetchMovies","id","listOfMovieIds","dispatch","type","fetch","then","response","json","listOfMovies","map","movie","index","movie_id","responseJSON","slug","year","console","log","title","Title","poster","Poster","undefined","method","headers","push","movies","ids","error","listMovies","fetchTitle","movieInfo","currentTitle"],"mappings":"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","sourcesContent":["const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams'\nconst URL = PROXY + streamsAPI\n\n\n//\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies (id) {\n    let listOfMovieIds = []\n    \n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`${streamsAPI}/${id}/movies`).then(response => {\n            return response.json()\n        }).then(listOfMovies => {\n                listOfMovies.map((movie, index) => {\n                    let movie_id = responseJSON[index].id\n                    fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`).then(response=>{console.log(response)})\n\n                    let title = movie.Title\n                    let poster = null\n                    if (movie.Poster !== undefined && movie.Poster !== \"N/A\"){\n                        poster = movie.Poster\n                    }\n                    if(responseJSON[index].title === null && responseJSON[index].poster === null){   \n                        console.log(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year}&type=movie+&apikey=6b46131b`)\n                        //insert promise\n\n                        fetch(`${URL}/${id}/movies/${responseJSON[index].id}?poster=${poster}&title=${title}`, {\n                            method: 'PATCH',\n                            headers: { \"Content-Type\": \"application/json\" },\n                        }).then(response => {\n                            listOfMovieIds.push(movie_id)\n                        try {\n                            dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, ids: listOfMovieIds})\n                        }\n                        catch(error){\n                            console.log(error)\n                        }\n                    })\n                    }\n                    else {\n                        listOfMovieIds.push(movie_id)\n                        try {\n                            dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, ids: listOfMovieIds})\n                        }\n                        catch(error){\n                            console.log(error)\n                        }\n                    }  \n                })\n            })\n        }\n}\n\n\n\n\nexport function listMovies(){\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            dispatch({ type: 'ADD_MOVIES', movies: responseJSON})\n        })\n    }\n}\n\n//send specific movie to omdb and retrieve all the data\n// for use with movie search\nexport function fetchTitle (movieInfo){\n    return (dispatch) => {\n            dispatch({ type: 'LOADING_MOVIES'})\n            fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n                return response.json()\n            }).then(responseJSON => {\n                            if(responseJSON.Title !== null){ \n                            try {\n                                dispatch({ type: 'ADD_MOVIES', movies: [], ids: [], currentTitle: responseJSON})\n                            }\n                            catch(error){\n                                console.log(error)\n                            }\n                        }\n                        else{\n                            console.log('didnt have a title')\n                            console.log(responseJSON)\n                        }\n                        })\n        }\n}"]},"metadata":{},"sourceType":"module"}