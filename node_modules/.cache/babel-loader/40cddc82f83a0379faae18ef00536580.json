{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/UserStreamsPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions';\nimport Profile from '../components/Profile';\n\nclass UserStreamsPage extends Component {\n  componentDidMount() {\n    this.props.fetchUserStreams(this.props.userId);\n    console.log(this);\n  } //binds passed handler to StreamsPage handler\n\n\n  constructor(props) {\n    super(props);\n\n    this.handler = (id, name) => {\n      this.setState({\n        currentStream: id,\n        currentStreamName: name\n      }); //returns the selected Stream id to App       \n\n      this.props.handler(id, name);\n    };\n\n    this.handleLoading = id => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, \"Loading Streams...\");\n      } else {\n        selectedStreams = [];\n        this.props.userStreams.forEach(stream => {\n          console.log(stream);\n        });\n        return React.createElement(Profile, {\n          userID: id,\n          userStreams: this.props.userStreams,\n          handleLists: this.handleLists,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.handler = this.handler.bind(this);\n  } // recieves id from passed handler\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, this.handleLoading(this.props.userId));\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams,\n    loading: state.StreamsReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchUserStreams\n})(UserStreamsPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/UserStreamsPage.js"],"names":["React","Component","connect","fetchUserStreams","Profile","UserStreamsPage","componentDidMount","props","userId","console","log","constructor","handler","id","name","setState","currentStream","currentStreamName","handleLoading","loading","selectedStreams","userStreams","forEach","stream","handleLists","bind","render","mapDispatchToProps","state","StreamsReducer","streams"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAEA,MAAMC,eAAN,SAA8BJ,SAA9B,CAAwC;AAEtCK,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWJ,gBAAX,CAA4B,KAAKI,KAAL,CAAWC,MAAvC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,GALqC,CAMxC;;;AACEC,EAAAA,WAAW,CAACJ,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAKlBK,OALkB,GAKR,CAACC,EAAD,EAAIC,IAAJ,KAAa;AACrB,WAAKC,QAAL,CAAc;AACZC,QAAAA,aAAa,EAAEH,EADH;AAEZI,QAAAA,iBAAiB,EAAEH;AAFP,OAAd,EADqB,CAKxB;;AACG,WAAKP,KAAL,CAAWK,OAAX,CAAmBC,EAAnB,EAAsBC,IAAtB;AACD,KAZiB;;AAAA,SAclBI,aAdkB,GAcDL,EAAD,IAAQ;AACtB,UAAG,KAAKN,KAAL,CAAWY,OAAd,EAAuB;AACrB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP;AACD,OAFD,MAEO;AACLC,QAAAA,eAAe,GAAG,EAAlB;AACA,aAAKb,KAAL,CAAWc,WAAX,CAAuBC,OAAvB,CAAiCC,MAAM,IAAG;AAC5Cd,UAAAA,OAAO,CAACC,GAAR,CAAYa,MAAZ;AACG,SAFD;AAGA,eAAO,oBAAC,OAAD;AAAS,UAAA,MAAM,EAAEV,EAAjB;AAAqB,UAAA,WAAW,EAAE,KAAKN,KAAL,CAAWc,WAA7C;AAA0D,UAAA,WAAW,EAAE,KAAKG,WAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KAxBiB;;AAEhB,SAAKZ,OAAL,GAAe,KAAKA,OAAL,CAAaa,IAAb,CAAkB,IAAlB,CAAf;AACD,GAVqC,CAWxC;;;AAsBEC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKR,aAAL,CAAmB,KAAKX,KAAL,CAAWC,MAA9B,CADH,CADF;AAKD;;AAvCqC;;AA2CxC,MAAMmB,kBAAkB,GAAGC,KAAK,IAAI;AAClC,SAAO;AACLP,IAAAA,WAAW,EAAEO,KAAK,CAACC,cAAN,CAAqBC,OAD7B;AAELX,IAAAA,OAAO,EAAES,KAAK,CAACC,cAAN,CAAqBV;AAFzB,GAAP;AAID,CALD;;AAOA,eAAejB,OAAO,CAACyB,kBAAD,EAAqB;AAACxB,EAAAA;AAAD,CAArB,CAAP,CAAgDE,eAAhD,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions'\nimport Profile from '../components/Profile';\n\nclass UserStreamsPage extends Component {   \n  \n  componentDidMount() {\n    this.props.fetchUserStreams(this.props.userId)\n    console.log(this)\n  }\n//binds passed handler to StreamsPage handler\n  constructor(props){\n    super(props)\n    this.handler = this.handler.bind(this)\n  }\n// recieves id from passed handler\n  handler = (id,name) => {\n    this.setState({\n      currentStream: id,\n      currentStreamName: name\n    })\n //returns the selected Stream id to App       \n    this.props.handler(id,name)\n  }\n  \n  handleLoading = (id) => {\n    if(this.props.loading) {\n      return <div>Loading Streams...</div>\n    } else {\n      selectedStreams = []\n      this.props.userStreams.forEach ( stream =>{\n\t  \tconsole.log(stream)\n      })  \n      return <Profile userID={id} userStreams={this.props.userStreams} handleLists={this.handleLists}/>\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.handleLoading(this.props.userId)}\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams,\n    loading: state.StreamsReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, {fetchUserStreams})(UserStreamsPage)"]},"metadata":{},"sourceType":"module"}