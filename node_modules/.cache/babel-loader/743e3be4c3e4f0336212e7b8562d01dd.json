{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js\";\nimport React, { useState, useEffect } from 'react'; //import { connect } from 'react-redux';\n\nimport { fetchMovies } from '../actions/movieActions';\nimport { fetchTitle } from '../actions/movieActions';\nimport MovieList from '../components/MovieList';\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux';\n\nconst MoviesPage = props => {\n  const movieData = useSelector(state => state.MoviesReducer, []) || [];\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [currentMovie, setCurrentMovie] = useState('');\n  useEffect(() => {\n    dispatch(fetchMovies(localStorage.currentStream));\n\n    if (location.state !== undefined) {\n      localStorage.setItem('currentMovie', location.state.currentMovie.id);\n      dispatch(fetchTitle(location.state.currentMovie));\n      setCliked(location.state.clicked);\n    }\n  }, []); //dispatch({type: 'LOADING_MOVIES'})\n  //props.fetchMovies(localStorage.currentStream)\n  //console.log(props)\n  //console.log(movieData)\n  //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n\n  function trailerID(trailer) {} //link trailer to backend\n  //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n\n\n  function handleLoading() {\n    if (movieData.loading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Loading Movies...\");\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(MovieList, {\n        passedMovie: currentMovie,\n        streamID: localStorage.currentStream,\n        isClicked: clicked,\n        trailerID: trailerID,\n        movieCards: movieData.movies,\n        movieIds: movieData.ids,\n        currentStream: localStorage.currentStreamName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"banner-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, localStorage.currentStreamName.toUpperCase()), handleLoading());\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies.sort(),\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  };\n};\n\nexport default MoviesPage;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js"],"names":["React","useState","useEffect","fetchMovies","fetchTitle","MovieList","useLocation","useSelector","useDispatch","useStore","MoviesPage","props","movieData","state","MoviesReducer","dispatch","location","clicked","setCliked","currentMovie","setCurrentMovie","localStorage","currentStream","undefined","setItem","id","trailerID","trailer","handleLoading","loading","movies","ids","currentStreamName","toUpperCase","mapDispatchToProps","movieCards","sort","movieIds"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C,C,CACA;;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,QAAnC,QAAmD,aAAnD;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAMC,SAAS,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,aAAhB,EAA+B,EAA/B,CAAX,IAAiD,EAAnE;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM,CAACW,OAAD,EAAUC,SAAV,IAAuBjB,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,EAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ,CAACZ,WAAW,CAACkB,YAAY,CAACC,aAAd,CAAZ,CAAR;;AAEE,QAAIN,QAAQ,CAACH,KAAT,KAAmBU,SAAvB,EAAiC;AAC/BF,MAAAA,YAAY,CAACG,OAAb,CAAqB,cAArB,EAAqCR,QAAQ,CAACH,KAAT,CAAeM,YAAf,CAA4BM,EAAjE;AACAV,MAAAA,QAAQ,CAACX,UAAU,CAACY,QAAQ,CAACH,KAAT,CAAeM,YAAhB,CAAX,CAAR;AACAD,MAAAA,SAAS,CAACF,QAAQ,CAACH,KAAT,CAAeI,OAAhB,CAAT;AACD;AACF,GARM,EAQJ,EARI,CAAT,CAP4B,CAgB1B;AACA;AACA;AACA;AACA;;AAGF,WAASS,SAAT,CAAmBC,OAAnB,EAA2B,CAE1B,CAFD,CACE;AAIF;;;AACA,WAASC,aAAT,GAAyB;AACvB,QAAGhB,SAAS,CAACiB,OAAb,EAAsB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD,KAFD,MAGK;AACH,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAW,QAAA,WAAW,EAAEV,YAAxB;AAAsC,QAAA,QAAQ,EAAEE,YAAY,CAACC,aAA7D;AAA4E,QAAA,SAAS,EAAEL,OAAvF;AAAgG,QAAA,SAAS,EAAES,SAA3G;AAAsH,QAAA,UAAU,EAAEd,SAAS,CAACkB,MAA5I;AAAoJ,QAAA,QAAQ,EAAElB,SAAS,CAACmB,GAAxK;AAA8K,QAAA,aAAa,EAAEV,YAAY,CAACW,iBAA1M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADA;AAKD;AACF;;AAGC,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BX,YAAY,CAACW,iBAAb,CAA+BC,WAA/B,EAA3B,CADF,EAEGL,aAAa,EAFhB,CADF;AAMD,CAjDH;;AAsDA,MAAMM,kBAAkB,GAAGrB,KAAK,IAAI;AAClC,SAAO;AACLsB,IAAAA,UAAU,EAAEtB,KAAK,CAACC,aAAN,CAAoBgB,MAApB,CAA2BM,IAA3B,EADP;AAELC,IAAAA,QAAQ,EAAExB,KAAK,CAACC,aAAN,CAAoBiB,GAFzB;AAGLF,IAAAA,OAAO,EAAEhB,KAAK,CAACC,aAAN,CAAoBe;AAHxB,GAAP;AAKD,CAND;;AAQA,eAAenB,UAAf","sourcesContent":["import React,{ useState, useEffect } from 'react';\n//import { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions'\nimport { fetchTitle } from '../actions/movieActions'\nimport MovieList from '../components/MovieList'\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux'\n\nconst MoviesPage = (props) => { \n  const movieData = useSelector(state => state.MoviesReducer, []) || []; \n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [currentMovie, setCurrentMovie] = useState('');  \n\n  useEffect(() => {\n    dispatch(fetchMovies(localStorage.currentStream));\n\n      if (location.state !== undefined){\n        localStorage.setItem('currentMovie', location.state.currentMovie.id)\n        dispatch(fetchTitle(location.state.currentMovie))\n        setCliked(location.state.clicked)\n      }\n    }, []);\n    //dispatch({type: 'LOADING_MOVIES'})\n    //props.fetchMovies(localStorage.currentStream)\n    //console.log(props)\n    //console.log(movieData)\n    //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n  \n\n  function trailerID(trailer){ \n    //link trailer to backend\n  }\n\n\n  //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n  function handleLoading (){\n    if(movieData.loading) {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      return (\n      <div>\n          <MovieList passedMovie={currentMovie} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n      </div>\n      )\n    }\n  }\n\n  \n    return (\n      <div className=\"App\">\n        <div className=\"banner-2\">{localStorage.currentStreamName.toUpperCase()}</div>\n        {handleLoading()}\n      </div>\n    );\n  }\n\n\n\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies.sort(),\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  }\n}\n\nexport default(MoviesPage)"]},"metadata":{},"sourceType":"module"}