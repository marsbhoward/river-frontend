{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river/frontend/app/src/containers/MoviesPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions';\nimport MovieList from '../components/MovieList';\n\nclass MoviesPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLoading = () => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, \"Loading Movies...\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, React.createElement(MovieList, {\n          movieCards: this.props.movieCards,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }));\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchMovies(this.props.handler);\n    console.log(this);\n    this.props.movieCards.forEach(movie => {\n      if (movie.Response) {\n        console.log('needs to be removed');\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    currentStream: state.StreamsReducer.currentStream,\n    loading: state.MoviesReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchMovies\n})(MoviesPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river/frontend/app/src/containers/MoviesPage.js"],"names":["React","Component","connect","fetchMovies","MovieList","MoviesPage","handleLoading","props","loading","movieCards","componentDidMount","handler","console","log","forEach","movie","Response","render","mapDispatchToProps","state","MoviesReducer","movies","currentStream","StreamsReducer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAYjCK,aAZiC,GAYjB,MAAM;AACpB,UAAG,KAAKC,KAAL,CAAWC,OAAd,EAAuB;AACrB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD,OAFD,MAEO;AACL,eACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,SAAD;AAAW,UAAA,UAAU,EAAE,KAAKD,KAAL,CAAWE,UAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,CADA;AAKD;AACF,KAtBgC;AAAA;;AAEjCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,KAAL,CAAWJ,WAAX,CAAuB,KAAKI,KAAL,CAAWI,OAAlC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,SAAKN,KAAL,CAAWE,UAAX,CAAsBK,OAAtB,CAA8BC,KAAK,IAAI;AACrC,UAAIA,KAAK,CAACC,QAAV,EAAmB;AACjBJ,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AACF,KAJD;AAKD;;AAcDI,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKX,aAAL,EADH,CADF;AAKD;;AA9BgC;;AAmCnC,MAAMY,kBAAkB,GAAGC,KAAK,IAAI;AAClC,SAAO;AACLV,IAAAA,UAAU,EAAEU,KAAK,CAACC,aAAN,CAAoBC,MAD3B;AAELC,IAAAA,aAAa,EAAGH,KAAK,CAACI,cAAN,CAAqBD,aAFhC;AAGLd,IAAAA,OAAO,EAAEW,KAAK,CAACC,aAAN,CAAoBZ;AAHxB,GAAP;AAKD,CAND;;AAQA,eAAeN,OAAO,CAACgB,kBAAD,EAAqB;AAACf,EAAAA;AAAD,CAArB,CAAP,CAA2CE,UAA3C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions'\nimport MovieList from '../components/MovieList'\n\nclass MoviesPage extends Component {   \n  \n  componentDidMount() {\n    this.props.fetchMovies(this.props.handler)\n    console.log(this)\n    this.props.movieCards.forEach(movie => {\n      if (movie.Response){\n        console.log('needs to be removed')\n      }\n    })\n  }\n  \n  handleLoading = () => {\n    if(this.props.loading) {\n      return <div>Loading Movies...</div>\n    } else {\n      return (\n      <div>\n      <MovieList movieCards={this.props.movieCards}/>\n      </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.handleLoading()}\n      </div>\n    );\n  }\n}\n\n\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    currentStream : state.StreamsReducer.currentStream,\n    loading: state.MoviesReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, {fetchMovies})(MoviesPage)"]},"metadata":{},"sourceType":"module"}