{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/components/searchbox.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { listMovies } from '../actions/movieActions';\nimport MoviesList from './MoviesList';\nlet moviesList;\n\nclass Searchbox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getStuff = () => {\n      let theSearchState = '';\n      let theSetClass = '';\n\n      if (this.props.sBoxOpenState === false) {\n        theSearchState = /*#__PURE__*/React.createElement(\"p\", {\n          className: \"searchBar\",\n          onClick: this.handleClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 23\n          }\n        }, \" Search \");\n        this.setState({\n          search: ''\n        });\n      } else {\n        theSearchState = /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          id: \"name-input\",\n          className: \"searchBar\",\n          placeholder: \"Search by title\",\n          onClick: this.props.pointer,\n          onChange: e => this.searchMovie(e),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 23\n          }\n        });\n        theSetClass = 'searchBackground';\n      }\n\n      return [theSearchState, theSetClass];\n    };\n\n    this.handleClick = () => {\n      this.props.resetCount(); //this.setState({open:true})\n      //console.log(this.state.open)\n    };\n\n    this.searchMovie = event => {\n      let keyword = event.target.value.toLowerCase();\n      this.setState({\n        search: keyword\n      });\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loading) {\n        return ' ';\n      } else {\n        if (this.props.movieCards === undefined) {\n          console.log('no movie card'); //window.location.reload();\n        }\n\n        if (sessionStorage.AllMovies !== 'not loaded') {\n          let listM = JSON.parse(sessionStorage.AllMovies);\n          listM.filter(movieCard => {\n            if (this.state.search.length >= 3) {\n              if (movieCard.slug.includes(this.state.search)) {\n                moviesList = JSON.parse(sessionStorage.AllMovies).map((movie, index) => {\n                  return /*#__PURE__*/React.createElement(MoviesList, {\n                    key: index,\n                    search: this.state.search,\n                    movie: movie,\n                    movieID: movie.id,\n                    cardStyle: \"height: -webkit-fill-available; overflow: hidden;\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 90,\n                      columnNumber: 26\n                    }\n                  });\n                });\n              }\n            } else {\n              moviesList = '';\n            }\n\n            return \"done\";\n          });\n        } else {\n          this.props.listMovies();\n        }\n      }\n    };\n\n    this.state = {\n      search: '',\n      MoiveData: \"\",\n      searchState: '',\n      setClass: ''\n    };\n  }\n\n  componentDidMount() {\n    //interfe\n    this.props.listMovies();\n    this.handleStuff();\n  }\n\n  componentDidUpdate() {\n    if (this.props.sBoxCount < 1) {\n      this.handleStuff();\n      this.props.addCount();\n    }\n  }\n\n  refresh() {\n    console.log(this);\n  }\n\n  handleStuff() {\n    let results = this.getStuff();\n    this.setState({\n      searchState: results[0],\n      setClass: results[1]\n    });\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n\n      /* onClick={() => this.loseFocus(this.props.target)} */\n\n      /* need to find faster way to clear search state. possibly render only if not blank*/\n      React.createElement(\"div\", {\n        className: \"searchBar\",\n        onClick: this.props.pointer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 5\n        }\n      }, this.state.searchState, this.handleLoading(), /*#__PURE__*/React.createElement(\"div\", {\n        onClick: this.handleClick,\n        className: this.state.setClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"search-list\",\n        onClick: this.props.pointer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      }, moviesList)))\n    );\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    loading: state.MoviesReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  listMovies\n})(Searchbox);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/components/searchbox.js"],"names":["React","Component","connect","listMovies","MoviesList","moviesList","Searchbox","constructor","props","getStuff","theSearchState","theSetClass","sBoxOpenState","handleClick","setState","search","pointer","e","searchMovie","resetCount","event","keyword","target","value","toLowerCase","handleLoading","loading","movieCards","undefined","console","log","sessionStorage","AllMovies","listM","JSON","parse","filter","movieCard","state","length","slug","includes","map","movie","index","id","MoiveData","searchState","setClass","componentDidMount","handleStuff","componentDidUpdate","sBoxCount","addCount","refresh","results","render","mapDispatchToProps","MoviesReducer","movies"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { listMovies } from '../actions/movieActions'\nimport MoviesList from './MoviesList';\n\nlet  moviesList\n\n\nclass Searchbox extends Component {\n constructor(props){\n    super(props);\n\n    this.state={\n      search:'',\n      MoiveData: \"\",\n      searchState: '',\n      setClass: '',\n      \n    };\n  }\n\n\n  componentDidMount() {\n    //interfe\n    this.props.listMovies()\n    this.handleStuff()\n  }\n\n  componentDidUpdate(){\n    if (this.props.sBoxCount < 1){\n      this.handleStuff()\n      this.props.addCount()\n    }\n  }\n\n  getStuff=()=>{\n    let theSearchState =''\n    let theSetClass = ''\n    if (this.props.sBoxOpenState === false){\n      theSearchState= <p className={\"searchBar\"} onClick={this.handleClick}> Search </p>\n      this.setState({search: ''})\n      } \n    else{\n      theSearchState= <input type=\"text\" id=\"name-input\" className=\"searchBar\" placeholder=\"Search by title\" onClick={this.props.pointer} onChange={(e)=>this.searchMovie(e)} />\n      theSetClass= 'searchBackground'\n      }\n    return [theSearchState, theSetClass]\n  }\n\n  refresh(){\n    console.log(this)\n  }\n\n  handleStuff(){\n    let results = this.getStuff()\n    this.setState({\n      searchState: results[0],\n      setClass: results[1]\n    }) \n  }\n\n\n  handleClick=()=>{\n    this.props.resetCount()\n    //this.setState({open:true})\n    //console.log(this.state.open)\n  }\n\n  searchMovie=(event)=>{\n    let keyword = event.target.value.toLowerCase();\n    this.setState({search:keyword})\n    \n  }  \t\n\n  handleLoading = () => {\n    if(this.props.loading) {\n      return ' '\n    } \n    else {\n      if (this.props.movieCards === undefined){\n        console.log('no movie card')\n        //window.location.reload();\n      }\n      if (sessionStorage.AllMovies !== 'not loaded'){\n        let listM = JSON.parse(sessionStorage.AllMovies)\n        listM.filter(movieCard=> {\n          if(this.state.search.length >= 3 ){\n            if (movieCard.slug.includes(this.state.search)){\n                moviesList = JSON.parse(sessionStorage.AllMovies).map((movie, index) => {\n                  return <MoviesList key={index} search={this.state.search}  movie={movie} movieID={(movie.id)} cardStyle='height: -webkit-fill-available;\n                  overflow: hidden;'/>\n                })\n              }\n            }\n            else{\n              moviesList = ''\n            }\n            return \"done\"        \n          })\n      }\n      else{\n        this.props.listMovies()\n      }\n    }\n  }\n\n  render(){\n  \treturn(\n      /* onClick={() => this.loseFocus(this.props.target)} */\n      /* need to find faster way to clear search state. possibly render only if not blank*/\n  \t\t<div className=\"searchBar\" onClick={this.props.pointer} >  \n  \t\t\t{this.state.searchState}\n  \t\t\t{this.handleLoading()}\n        <div onClick={this.handleClick}  className={this.state.setClass} >\n          <div className=\"search-list\" onClick={this.props.pointer}>\n              {moviesList}\n          </div>\n        </div>\n  \t\t</div>\n  \t)\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    loading: state.MoviesReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, {listMovies})(Searchbox)"]},"metadata":{},"sourceType":"module"}