{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchTrailer = () => {\n      this.props.fetchTrailers(this.props.currentMovie.Title, this.props.currentMovie.Year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, \"Loading Movies...\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(MovieInfo, {\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }));\n      }\n    };\n  }\n\n  componentDidMount() {\n    console.log(this); //pass stream id and movie id in props\n\n    let realmovieID = parseInt(this.props.movie_id);\n    let calcmovieID = realmovieID + (parseInt(this.props.stream_id) - 1) * 41;\n    console.log(realmovieID);\n    console.log(calcmovieID); //adapter.getYoutubeID(stream_id, movie_id)\n    //if current movie does not have a youtube_id on the backend\n\n    this.fetchTrailer(); //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title) {\n      this.fetchTrailer();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"banner-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.props.currentMovie.Title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","fetchTrailer","props","currentMovie","Title","Year","handler","trailer","trailerID","handleLoading","loading","componentDidMount","console","log","realmovieID","parseInt","movie_id","calcmovieID","stream_id","componentDidUpdate","prevProps","render","toUpperCase","mapDispatchToProps","state","TrailersReducer","adapter","getYoutubeID","fetch","headers","then","resp","json"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {  \n  \n  componentDidMount() {\n    console.log(this)\n    //pass stream id and movie id in props\n    let realmovieID =  parseInt(this.props.movie_id)\n    let calcmovieID = realmovieID + ((parseInt(this.props.stream_id)-1)*41)\n    console.log(realmovieID)\n    console.log(calcmovieID)\n    //adapter.getYoutubeID(stream_id, movie_id)\n\n    //if current movie does not have a youtube_id on the backend\n  \t  this.fetchTrailer()\n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n\n  \tif (this.props.currentMovie.Title !== prevProps.currentMovie.Title)\n  \t{\n  \t\tthis.fetchTrailer()\n  \t}\n  }\n\n  fetchTrailer = () => {\n  \tthis.props.fetchTrailers(this.props.currentMovie.Title,this.props.currentMovie.Year)\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    if(this.props.loading) \n    {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      return (\n      \t<div>\n      \t\t<MovieInfo currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    return (\n    <div className= \"Info\">\n    \t<div className=\"banner-3\">{this.props.currentMovie.Title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    }\n\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}