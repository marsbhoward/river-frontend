{"ast":null,"code":"const URL = \"http://localhost:3000/\";\nvar streams = [];\nvar movies = [];\nconst adapter = {\n  getStreams: () => {\n    return fetch(`${URL}/streams`).then(resp => resp.json());\n  },\n  getMovies: stream_id => {\n    return fetch(`${URL}/streams/${stream_id}/movies`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  }\n};\nlet movies_list = [{\n  title: 'Doctor Strange',\n  time: 115,\n  genres: ['Action', 'Adventure', 'Fantasy'],\n  metascore: 74\n}, {\n  title: 'Trolls',\n  time: 92,\n  genres: ['Animation', 'Adventure', 'Comedy', 'Family', 'Fantasy']\n}, {\n  title: 'Jack Reacher: Never Go Back',\n  time: 118,\n  genres: ['Action', 'Adventure', 'Crime', 'Mystery', 'Thriller']\n}];\n\nfunction fetchStreams() {\n  adapter.getStreams().then(streams => retireveStreams(streams));\n}\n\nfunction retireveStreams(list) {\n  let streamList = [];\n  list.forEach(stream => {\n    streamList.push(stream);\n  });\n  streams = streamList;\n  console.log(streams);\n}\n\nfetchStreams();\nmovies = movies_list;\nconsole.log(movies);\nconsole.log(streams);\nmodule.exports = {\n  streams,\n  movies\n};","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/data.js"],"names":["URL","streams","movies","adapter","getStreams","fetch","then","resp","json","getMovies","stream_id","headers","movies_list","title","time","genres","metascore","fetchStreams","retireveStreams","list","streamList","forEach","stream","push","console","log","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAG,wBAAZ;AACA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,MAAM,GAAG,EAAb;AAIA,MAAMC,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE,MAAM;AAChB,WAAOC,KAAK,CAAE,GAAEL,GAAI,UAAR,CAAL,CACNM,IADM,CACDC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADP,CAAP;AAED,GAJa;AAMdC,EAAAA,SAAS,EAAGC,SAAD,IAAe;AACxB,WAAOL,KAAK,CAAE,GAAEL,GAAI,YAAWU,SAAU,SAA7B,EAAsC;AAChDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AADuC,KAAtC,CAAL,CAGNL,IAHM,CAGDC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAHP,CAAP;AAID;AAXa,CAAhB;AAgBE,IAAII,WAAW,GAAG,CAClB;AACEC,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,IAAI,EAAE,GAFR;AAGEC,EAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,CAHV;AAIEC,EAAAA,SAAS,EAAE;AAJb,CADkB,EAOlB;AACEH,EAAAA,KAAK,EAAE,QADT;AAEEC,EAAAA,IAAI,EAAE,EAFR;AAGEC,EAAAA,MAAM,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,QAA3B,EAAqC,QAArC,EAA+C,SAA/C;AAHV,CAPkB,EAYlB;AACEF,EAAAA,KAAK,EAAE,6BADT;AAEEC,EAAAA,IAAI,EAAE,GAFR;AAGEC,EAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,OAAxB,EAAiC,SAAjC,EAA4C,UAA5C;AAHV,CAZkB,CAAlB;;AAoBF,SAASE,YAAT,GAAuB;AACpBd,EAAAA,OAAO,CAACC,UAAR,GACCE,IADD,CACML,OAAO,IAAIiB,eAAe,CAACjB,OAAD,CADhC;AAEA;;AAEF,SAASiB,eAAT,CAAyBC,IAAzB,EAA8B;AAC7B,MAAIC,UAAU,GAAG,EAAjB;AACCD,EAAAA,IAAI,CAACE,OAAL,CAAaC,MAAM,IAAG;AACpBF,IAAAA,UAAU,CAACG,IAAX,CAAgBD,MAAhB;AACD,GAFD;AAGArB,EAAAA,OAAO,GAAGmB,UAAV;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYxB,OAAZ;AACA;;AAGHgB,YAAY;AACZf,MAAM,GAAIU,WAAV;AAEAY,OAAO,CAACC,GAAR,CAAYvB,MAAZ;AACAsB,OAAO,CAACC,GAAR,CAAYxB,OAAZ;AAIAyB,MAAM,CAACC,OAAP,GAAiB;AACf1B,EAAAA,OADe;AAEfC,EAAAA;AAFe,CAAjB","sourcesContent":["const URL = \"http://localhost:3000/\"\nvar streams = [];\nvar movies = [];\n\n\n\nconst adapter = {\n  getStreams: () => {\n    return fetch(`${URL}/streams`)\n    .then(resp => resp.json())\n  },\n\n  getMovies: (stream_id) => {\n    return fetch(`${URL}/streams/${stream_id}/movies`,{\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())\n  },\n}\n\n\n\t \n\t let movies_list = [\n  {\n    title: 'Doctor Strange',\n    time: 115,\n    genres: ['Action', 'Adventure', 'Fantasy'],\n    metascore: 74\n  },\n  {\n    title: 'Trolls',\n    time: 92,\n    genres: ['Animation', 'Adventure', 'Comedy', 'Family', 'Fantasy']\n  },\n  {\n    title: 'Jack Reacher: Never Go Back',\n    time: 118,\n    genres: ['Action', 'Adventure', 'Crime', 'Mystery', 'Thriller']\n  }\n]\n\n\nfunction fetchStreams(){\n  \tadapter.getStreams()\n  \t.then(streams => retireveStreams(streams))\n  }\n\n function retireveStreams(list){\n \tlet streamList = [];\n  \tlist.forEach(stream=> {  \n    \tstreamList.push(stream);\n  \t});\n  \tstreams = streamList;\n  \t\n  \tconsole.log(streams);\n  }\t\n\n\nfetchStreams()\nmovies  = movies_list\n\t\nconsole.log(movies)\nconsole.log(streams)\n\n\n\nmodule.exports = {\n  streams,\n  movies\n}"]},"metadata":{},"sourceType":"module"}