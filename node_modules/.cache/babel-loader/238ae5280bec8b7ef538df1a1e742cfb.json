{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/UserStreamsPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions';\nimport Profile from '../components/Profile';\nimport User from '../components/User';\n\nclass UserStreamsPage extends Component {\n  componentDidMount() {\n    //localStorage.setItem('bgcolor', 'red');\n    this.props.fetchUserStreams(this.props.userId);\n  } //binds passed handler to StreamsPage handler\n\n\n  constructor(props) {\n    super(props);\n\n    this.handler = (id, name) => {\n      console.log('stream set');\n      this.setState({\n        currentStream: id,\n        currentStreamName: name\n      }); //returns the selected Stream id to App       \n\n      this.props.handler(id, name);\n    };\n\n    this.handleLoading = id => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, \"Loading Streams...\");\n      } else {\n        let selectedStreams = [];\n        this.props.userStreams.forEach(stream => {\n          if (stream.selected === true) {\n            selectedStreams.push(stream);\n          }\n        });\n        return React.createElement(Profile, {\n          userID: id,\n          userStreams: selectedStreams,\n          handleLists: this.handleLists,\n          handler: this.handler,\n          streamLinks: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.handler = this.handler.bind(this);\n  } // recieves id from passed handler\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(User, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), this.handleLoading(this.props.userId));\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams.sort(),\n    loading: state.StreamsReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchUserStreams\n})(UserStreamsPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/UserStreamsPage.js"],"names":["React","Component","connect","fetchUserStreams","Profile","User","UserStreamsPage","componentDidMount","props","userId","constructor","handler","id","name","console","log","setState","currentStream","currentStreamName","handleLoading","loading","selectedStreams","userStreams","forEach","stream","selected","push","handleLists","bind","render","mapDispatchToProps","state","StreamsReducer","streams","sort"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAEA,MAAMC,eAAN,SAA8BL,SAA9B,CAAwC;AAEtCM,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKC,KAAL,CAAWL,gBAAX,CAA4B,KAAKK,KAAL,CAAWC,MAAvC;AACD,GALqC,CAMxC;;;AACEC,EAAAA,WAAW,CAACF,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAKlBG,OALkB,GAKR,CAACC,EAAD,EAAIC,IAAJ,KAAa;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,WAAKC,QAAL,CAAc;AACZC,QAAAA,aAAa,EAAEL,EADH;AAEZM,QAAAA,iBAAiB,EAAEL;AAFP,OAAd,EAFqB,CAMxB;;AACG,WAAKL,KAAL,CAAWG,OAAX,CAAmBC,EAAnB,EAAsBC,IAAtB;AACD,KAbiB;;AAAA,SAiBlBM,aAjBkB,GAiBDP,EAAD,IAAQ;AACtB,UAAG,KAAKJ,KAAL,CAAWY,OAAd,EAAuB;AACrB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP;AACD,OAFD,MAEO;AACL,YAAIC,eAAe,GAAG,EAAtB;AACA,aAAKb,KAAL,CAAWc,WAAX,CAAuBC,OAAvB,CAAiCC,MAAM,IAAG;AAC5C,cAAIA,MAAM,CAACC,QAAP,KAAoB,IAAxB,EAA6B;AAC5BJ,YAAAA,eAAe,CAACK,IAAhB,CAAqBF,MAArB;AACA;AAEE,SALD;AAMA,eAAO,oBAAC,OAAD;AAAS,UAAA,MAAM,EAAEZ,EAAjB;AAAqB,UAAA,WAAW,EAAES,eAAlC;AAAmD,UAAA,WAAW,EAAE,KAAKM,WAArE;AAAkF,UAAA,OAAO,EAAE,KAAKhB,OAAhG;AAAyG,UAAA,WAAW,EAAE,IAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KA9BiB;;AAEhB,SAAKA,OAAL,GAAe,KAAKA,OAAL,CAAaiB,IAAb,CAAkB,IAAlB,CAAf;AACD,GAVqC,CAWxC;;;AA4BEC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKV,aAAL,CAAmB,KAAKX,KAAL,CAAWC,MAA9B,CAFH,CADF;AAMD;;AA9CqC;;AAkDxC,MAAMqB,kBAAkB,GAAGC,KAAK,IAAI;AAClC,SAAO;AACLT,IAAAA,WAAW,EAAES,KAAK,CAACC,cAAN,CAAqBC,OAArB,CAA6BC,IAA7B,EADR;AAELd,IAAAA,OAAO,EAAEW,KAAK,CAACC,cAAN,CAAqBZ;AAFzB,GAAP;AAID,CALD;;AAOA,eAAelB,OAAO,CAAC4B,kBAAD,EAAqB;AAAC3B,EAAAA;AAAD,CAArB,CAAP,CAAgDG,eAAhD,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions'\nimport Profile from '../components/Profile';\nimport User from '../components/User';\n\nclass UserStreamsPage extends Component {   \n  \n  componentDidMount() {\n    //localStorage.setItem('bgcolor', 'red');\n    this.props.fetchUserStreams(this.props.userId)\n  }\n//binds passed handler to StreamsPage handler\n  constructor(props){\n    super(props)\n    this.handler = this.handler.bind(this)\n  }\n// recieves id from passed handler\n  handler = (id,name) => {\n    console.log('stream set')\n    this.setState({\n      currentStream: id,\n      currentStreamName: name\n    })\n //returns the selected Stream id to App       \n    this.props.handler(id,name)\n  }\n  \n\n\n  handleLoading = (id) => {\n    if(this.props.loading) {\n      return <div>Loading Streams...</div>\n    } else {\n      let selectedStreams = []\n      this.props.userStreams.forEach ( stream =>{\n\t  \tif (stream.selected === true){\n\t  \t\tselectedStreams.push(stream)\n\t  \t}\n\n      })  \n      return <Profile userID={id} userStreams={selectedStreams} handleLists={this.handleLists} handler={this.handler} streamLinks={true}/>\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <User/>\n        {this.handleLoading(this.props.userId)}\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams.sort(),\n    loading: state.StreamsReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, {fetchUserStreams})(UserStreamsPage)"]},"metadata":{},"sourceType":"module"}