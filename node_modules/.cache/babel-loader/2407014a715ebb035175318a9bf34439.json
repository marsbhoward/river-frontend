{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.logMovie = selectedMovie => {\n      if (selectedMovie.youtube_id === null) {\n        //if youtube_id on api is empty\n        console.log('came back null');\n        this.setState({\n          selectedMovieID: selectedMovie.id,\n          selectedMovieStreamID: selectedMovie.stream_id\n        });\n        console.log(this); //not getting updated trailer here\n\n        this.fetchTrailer();\n      } else {\n        console.log('not null');\n      }\n    };\n\n    this.testFucntion = selectedMovie => {\n      //this.fetchTrailer()\n      if (this.props.trailer !== 'kJQP7kiw5Fk') {\n        adapter.updateYoutubeID(selectedMovie.stream_id, selectedMovie.id, this.props.trailer).then(data => data);\n        console.log('trailer updated on backend');\n      } else {\n        console.log('did not work');\n      }\n    };\n\n    this.fetchTrailer = () => {\n      this.props.fetchTrailers(this.props.currentMovie.Title, this.props.currentMovie.Year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, \"Loading Movies...\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(MovieInfo, {\n          test: this.testFucntion,\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }));\n      }\n    };\n  }\n\n  componentDidMount() {\n    //pass stream id and movie id in props\n    let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie)); //if current movie does not have a youtube_id on the backend\n    //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title) {\n      let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"banner-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.props.currentMovie.Title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  },\n  updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n    return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        movie_id,\n        youtube_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","logMovie","selectedMovie","youtube_id","console","log","setState","selectedMovieID","id","selectedMovieStreamID","stream_id","fetchTrailer","testFucntion","props","trailer","adapter","updateYoutubeID","then","data","currentMovie","Title","Year","handler","trailerID","handleLoading","loading","componentDidMount","apiMovieID","movieID","streamID","getYoutubeID","movie","componentDidUpdate","prevProps","render","toUpperCase","mapDispatchToProps","state","TrailersReducer","movie_id","fetch","headers","resp","json","method","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {  \n  \n  componentDidMount() {\n    //pass stream id and movie id in props\n    let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n\n    //if current movie does not have a youtube_id on the backend\n  \t  \n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n\n  \tif (this.props.currentMovie.Title !== prevProps.currentMovie.Title)\n  \t{\n      let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n  \t}\n  }\n\n  logMovie = (selectedMovie) => {\n      if(selectedMovie.youtube_id === null){\n        //if youtube_id on api is empty\n        console.log('came back null')\n        this.setState({\n          selectedMovieID: selectedMovie.id,\n          selectedMovieStreamID: selectedMovie.stream_id\n        })\n        console.log(this)\n        //not getting updated trailer here\n        this.fetchTrailer()\n      }\n      else {\n        console.log('not null')\n      }\n  }\n\n  testFucntion = (selectedMovie) =>{\n    //this.fetchTrailer()\n    if (this.props.trailer !== 'kJQP7kiw5Fk'){ \n        adapter.updateYoutubeID(selectedMovie.stream_id,selectedMovie.id,this.props.trailer).then(data => data)\n          console.log('trailer updated on backend') \n        }\n        else {\n          console.log('did not work')\n        }\n  }\n\n  fetchTrailer = () => {\n  \tthis.props.fetchTrailers(this.props.currentMovie.Title,this.props.currentMovie.Year)\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    if(this.props.loading) \n    {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      return (\n      \t<div>\n      \t\t<MovieInfo test={this.testFucntion} currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    return (\n    <div className= \"Info\">\n    \t<div className=\"banner-3\">{this.props.currentMovie.Title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    },\n\n    updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n      return fetch(`https://localhost:3000/streams/${stream_id}/movies/${movie_id}`, {\n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, movie_id, youtube_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}