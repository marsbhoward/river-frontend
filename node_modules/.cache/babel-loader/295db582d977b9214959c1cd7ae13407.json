{"ast":null,"code":"import adapter from './adapter';\nvar movies = [];\nvar stream = [];\n\nclass MyComp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      streams: []\n    };\n  }\n\n}\n\ngetStreamList = () => {\n  const newStreams = this.state.streams.push(\"netflix\");\n  this.setState({\n    streams: newStreams\n  });\n};\n\nclass Streams {\n  constructor(name) {\n    this.name = name;\n  }\n\n}\n\nclass Movies {\n  constructor(title, time) {\n    this.title = title;\n  }\n\n}\n\nfunction fetchStreams() {\n  adapter.getStreams().then(streams => retireveStreams(streams));\n}\n\nfunction retireveStreams(list, streams) {\n  stream = list.map(stream => {\n    return new Streams(stream.name);\n  });\n  console.log(stream);\n  return stream;\n}\n\nfunction fetchMovies() {\n  adapter.getMovies().then(movies => retireveMovies(movies));\n}\n\nfunction retireveMovies(list) {\n  let movieList = [];\n  list.forEach(movie => {\n    movieList.push(movie);\n  });\n  movies = list.map(movie => {\n    return new Movies(movie);\n  });\n  console.log(movies);\n}\n\nfunction exec() {\n  this.getStreamList;\n  fetchStreams();\n  fetchMovies();\n}\n\nexec();\nexport default movies;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/data.js"],"names":["adapter","movies","stream","MyComp","React","Component","constructor","state","streams","getStreamList","newStreams","push","setState","Streams","name","Movies","title","time","fetchStreams","getStreams","then","retireveStreams","list","map","console","log","fetchMovies","getMovies","retireveMovies","movieList","forEach","movie","exec"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,IAAIC,MAAM,GAAG,EAAb;AACA,IAAIC,MAAM,GAAG,EAAb;;AAEA,MAAMC,MAAN,SAAqBC,KAAK,CAACC,SAA3B,CAAqC;AAEpCC,EAAAA,WAAW,GAAG;AACX;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGD;;AAPkC;;AASnCC,aAAa,GAAG,MAAM;AACpB,QAAMC,UAAU,GAAG,KAAKH,KAAL,CAAWC,OAAX,CAAmBG,IAAnB,CAAwB,SAAxB,CAAnB;AACA,OAAKC,QAAL,CAAc;AACZJ,IAAAA,OAAO,EAAEE;AADG,GAAd;AAGD,CALD;;AAQF,MAAMG,OAAN,CAAa;AACZP,EAAAA,WAAW,CAACQ,IAAD,EAAM;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA;;AAHW;;AAOb,MAAMC,MAAN,CAAY;AACXT,EAAAA,WAAW,CAACU,KAAD,EAAOC,IAAP,EAAY;AACtB,SAAKD,KAAL,GAAaA,KAAb;AACA;;AAHU;;AAOZ,SAASE,YAAT,GAAuB;AACpBlB,EAAAA,OAAO,CAACmB,UAAR,GACCC,IADD,CACMZ,OAAO,IAAIa,eAAe,CAACb,OAAD,CADhC;AAEA;;AAEF,SAASa,eAAT,CAAyBC,IAAzB,EAA8Bd,OAA9B,EAAsC;AAEpCN,EAAAA,MAAM,GAAGoB,IAAI,CAACC,GAAL,CAASrB,MAAM,IAAG;AACzB,WAAO,IAAIW,OAAJ,CAAYX,MAAM,CAACY,IAAnB,CAAP;AACD,GAFQ,CAAT;AAKAU,EAAAA,OAAO,CAACC,GAAR,CAAYvB,MAAZ;AACA,SAAOA,MAAP;AACA;;AAED,SAASwB,WAAT,GAAsB;AACrB1B,EAAAA,OAAO,CAAC2B,SAAR,GACCP,IADD,CACMnB,MAAM,IAAI2B,cAAc,CAAC3B,MAAD,CAD9B;AAEA;;AAEA,SAAS2B,cAAT,CAAwBN,IAAxB,EAA6B;AAE9B,MAAIO,SAAS,GAAG,EAAhB;AACCP,EAAAA,IAAI,CAACQ,OAAL,CAAaC,KAAK,IAAG;AACnBF,IAAAA,SAAS,CAAClB,IAAV,CAAeoB,KAAf;AAED,GAHD;AAKA9B,EAAAA,MAAM,GAAGqB,IAAI,CAACC,GAAL,CAASQ,KAAK,IAAG;AACxB,WAAO,IAAIhB,MAAJ,CAAWgB,KAAX,CAAP;AACD,GAFQ,CAAT;AAGAP,EAAAA,OAAO,CAACC,GAAR,CAAYxB,MAAZ;AACA;;AAGH,SAAS+B,IAAT,GACA;AACC,OAAKvB,aAAL;AACAS,EAAAA,YAAY;AACZQ,EAAAA,WAAW;AAEV;;AAGFM,IAAI;AAEJ,eAAe/B,MAAf","sourcesContent":["import adapter from './adapter'\n\nvar movies = []\nvar stream = [];\n\nclass MyComp extends React.Component {\n\n constructor() {\n    super()\n    this.state = {\n      streams :[]\n    }\n  }\n}\n  getStreamList = () => {\n    const newStreams = this.state.streams.push(\"netflix\")\n    this.setState({\n      streams: newStreams\n    })\n  }\n \n\nclass Streams{\n\tconstructor(name){\n\t\tthis.name = name;\n\t}\n\t\n}\n\nclass Movies{\n\tconstructor(title,time){\n\t\tthis.title = title;\n\t}\n}\n\n\t \nfunction fetchStreams(){\n  \tadapter.getStreams()\n  \t.then(streams => retireveStreams(streams))\n  }\n\n function retireveStreams(list,streams){\n \t\n  \tstream = list.map(stream=> {\n    \treturn new Streams(stream.name);\n  \t});\n  \t\n\n  \tconsole.log(stream);\n  \treturn stream\n  }\n\n  function fetchMovies(){\n  \tadapter.getMovies( )\n  \t.then(movies => retireveMovies(movies))\n  }\n\n   function retireveMovies(list){\n \t\n \tlet movieList = [];\n  \tlist.forEach(movie=> {\n    \tmovieList.push(movie);\n    \n  \t});\n\n  \tmovies = list.map(movie=> {\n    \treturn new Movies(movie);\n  \t});\n  \tconsole.log(movies);\n  }\n\n\nfunction exec()\n{\n\tthis.getStreamList\n\tfetchStreams()\n\tfetchMovies()\n\n\t}\n\n\nexec();\n\nexport default movies"]},"metadata":{},"sourceType":"module"}