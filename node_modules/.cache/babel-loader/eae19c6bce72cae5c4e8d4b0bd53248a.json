{"ast":null,"code":"const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams';\nconst URL = PROXY + streamsAPI; //\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies(id) {\n  let listOfMovieIds = [];\n  let listOfMovies = [];\n  let listOfMoviesNotFound = [];\n  let notFoundCount = 0;\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`${streamsAPI}/${id}/movies`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      Promise.all(responseJSON.map((movie, index) => {\n        let movie_id = movie.id;\n        let title;\n        let year = 0;\n        let poster = null;\n        let newSlug = '';\n\n        if (movie.poster !== \"null\" && movie.poster !== \"N/A\") {\n          poster = movie.poster;\n        }\n\n        if (responseJSON[index].title === 'undefined' || responseJSON[index].poster === null) {\n          /*\n          else if (movie.slug=== ''){\n              movie.slug = \"\"\n          }\n          */\n          if (newSlug === '') {\n            newSlug = movie.slug;\n          }\n\n          if (year === 0) {\n            year = movie.year;\n          }\n\n          fetch(`https://www.omdbapi.com/?t=${newSlug}&y=${year}&type=movie+&apikey=6b46131b`).then(response => {\n            return response.json();\n          }).then(moreInfo => {\n            //mars fixed year movies cause error when rendered\n            //should be writting fixed year to backend\n            //might be fixed on reset\n            //error also cause when clicking a movie that can not be found on ombdapi\n            title = moreInfo.Title;\n            poster = moreInfo.Poster;\n            return moreInfo;\n          }).then(movieInfo => {\n            if (movieInfo.Response !== \"False\") {\n              return movieInfo;\n            } else {\n              let newReturn = Promise.resolve(getNewData(movieInfo, movie));\n              return newReturn;\n            }\n          }).then(newmovieInfo => {\n            year = newmovieInfo.Year;\n            title = newmovieInfo.Title;\n            poster = newmovieInfo.Poster;\n\n            if (title !== undefined) {\n              fetch(`${URL}/${id}/movies/${movie_id}?poster=${poster}&title=${title}&year=${year}&slug=${newSlug}`, {\n                method: 'PATCH',\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n            } else {}\n          });\n        }\n\n        listOfMovieIds.push(movie_id);\n\n        if (movie.title !== \"undefined\" && movie.poster !== \"undefined\") {\n          listOfMovies.push(movie);\n        } else {\n          listOfMoviesNotFound.push(movie);\n          notFoundCount++;\n        }\n\n        return 'done';\n      })).then(response => {\n        if (listOfMoviesNotFound.length > 0) {\n          console.log('id ' + id);\n          console.log(listOfMoviesNotFound);\n          console.log('count ' + notFoundCount);\n        }\n\n        try {\n          sessionStorage.setItem('currentMovieList', JSON.stringify(listOfMovies));\n          sessionStorage.setItem('listOfMovieIds', JSON.stringify(listOfMovieIds));\n          dispatch({\n            type: 'ADD_MOVIES',\n            movies: listOfMovies,\n            currentMovieList: listOfMovies,\n            ids: listOfMovieIds\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      });\n    });\n  };\n}\n\nfunction returnValue(info, original) {\n  if (info.Title !== undefined) {\n    return info;\n  } else {\n    return original;\n  }\n}\n\nasync function getNewData(dataResponce, movie) {\n  let x = Promise.resolve(fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${movie.year - 1}&type=movie+&apikey=6b46131b`).then(response => {\n    return response.json();\n  }).then(passInfo => {\n    return returnValue(passInfo, dataResponce);\n  }));\n  return x;\n}\n\nexport function listMovies() {\n  if (sessionStorage.AllMovies === 'not loaded') {\n    return dispatch => {\n      dispatch({\n        type: 'LOADING_MOVIES'\n      });\n      fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n        return response.json();\n      }).then(responseJSON => {\n        sessionStorage.setItem('AllMovies', JSON.stringify(responseJSON));\n        dispatch({\n          type: 'ADD_MOVIES',\n          movies: responseJSON\n        });\n      });\n    };\n  } else return dispatch => {\n    dispatch({\n      type: 'ADD_MOVIES',\n      movies: JSON.parse(sessionStorage.AllMovies)\n    });\n  };\n} //send specific movie to omdb and retrieve all the data\n// for use with movie search\n\nexport function fetchTitle(movieInfo) {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_MOVIES'\n    });\n    fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      if (responseJSON.Title !== null) {\n        try {\n          sessionStorage.setItem('selectedMovie', JSON.stringify(responseJSON));\n          dispatch({\n            type: 'ADD_MOVIES',\n            movies: [],\n            ids: [],\n            currentTitle: responseJSON\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      } else {}\n    });\n  };\n}","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/actions/movieActions.js"],"names":["PROXY","streamsAPI","URL","fetchMovies","id","listOfMovieIds","listOfMovies","listOfMoviesNotFound","notFoundCount","dispatch","type","fetch","then","response","json","responseJSON","Promise","all","map","movie","index","movie_id","title","year","poster","newSlug","slug","moreInfo","Title","Poster","movieInfo","Response","newReturn","resolve","getNewData","newmovieInfo","Year","undefined","method","headers","push","length","console","log","sessionStorage","setItem","JSON","stringify","movies","currentMovieList","ids","error","returnValue","info","original","dataResponce","x","passInfo","listMovies","AllMovies","parse","fetchTitle","currentTitle"],"mappings":"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","sourcesContent":["const PROXY = \"https://cors-anywhere-dd.herokuapp.com/\";\nconst streamsAPI = 'https://river-api.herokuapp.com/streams'\nconst URL = PROXY + streamsAPI\n\n\n//\tfetch(`http://www.omdbapi.com/?t=${movie}+&apikey=6b46131b`).then(response => {\n\nexport function fetchMovies (id) {\n    let listOfMovieIds = []\n    let listOfMovies = []\n    let listOfMoviesNotFound = []\n    let notFoundCount = 0\n    return (dispatch) => {\n        dispatch({ type: 'LOADING_MOVIES'})\n        \n        fetch(`${streamsAPI}/${id}/movies`).then(response => {\n            return response.json()\n        }).then(responseJSON => {\n            Promise.all(\n            responseJSON.map((movie, index) => {\n                    let movie_id = movie.id\n                    \n\n                    let title\n                    let year = 0\n                    let poster = null\n                    let newSlug = ''\n                    if (movie.poster !== \"null\" && movie.poster !== \"N/A\"){\n                        poster = movie.poster\n                    }\n                    if(responseJSON[index].title === 'undefined' || responseJSON[index].poster === null){   \n                        /*\n                        else if (movie.slug=== ''){\n                            movie.slug = \"\"\n                        }\n                        */\n                        \n                        if (newSlug === ''){\n                            newSlug = movie.slug \n                        }\n                        if (year === 0){\n                            year = movie.year\n                        } \n                         \n                        \n                        fetch(`https://www.omdbapi.com/?t=${newSlug}&y=${year}&type=movie+&apikey=6b46131b`).then(response=>{return response.json()}).then(moreInfo =>{\n                            //mars fixed year movies cause error when rendered\n                            //should be writting fixed year to backend\n                            //might be fixed on reset\n                            //error also cause when clicking a movie that can not be found on ombdapi\n                           \n                            title = moreInfo.Title\n                            \n                            poster = moreInfo.Poster\n                            return moreInfo\n                        }).then(movieInfo=>{\n                            if (movieInfo.Response !== \"False\"){\n                                return movieInfo\n                            }\n                            else{\n                                let newReturn = Promise.resolve(getNewData(movieInfo,movie))\n                                \n                                return newReturn \n                            }\n                            }).then(newmovieInfo=>{\n                            year = newmovieInfo.Year\n                            \n                            title = newmovieInfo.Title\n                            \n                            poster = newmovieInfo.Poster\n\n\n                            if (title !== undefined){\n                                fetch(`${URL}/${id}/movies/${movie_id}?poster=${poster}&title=${title}&year=${year}&slug=${newSlug}`, {\n                                    method: 'PATCH',\n                                    headers: { \"Content-Type\": \"application/json\" },\n                                })\n                            }\n                            else {\n\n                            }                           \n                        })\n                    }\n                    listOfMovieIds.push(movie_id)\n                    if(movie.title!== \"undefined\" && movie.poster !== \"undefined\"){\n                        listOfMovies.push(movie)\n                    }\n                    else{\n                        listOfMoviesNotFound.push(movie)\n                        notFoundCount++\n                    }\n                    return 'done'\n                })\n                ).then(response => {\n                    if (listOfMoviesNotFound.length>0){\n                        console.log('id ' +id)\n                        console.log(listOfMoviesNotFound)\n                        console.log('count '+ notFoundCount)\n                    }\n                    try {\n                        sessionStorage.setItem ('currentMovieList', JSON.stringify(listOfMovies))\n                        sessionStorage.setItem ('listOfMovieIds', JSON.stringify(listOfMovieIds))\n                        dispatch({ type: 'ADD_MOVIES', movies: listOfMovies, currentMovieList: listOfMovies,ids: listOfMovieIds})\n                    }\n                    catch(error){\n                        console.log(error)\n                    }\n                })\n            })\n        }\n}\n\nfunction returnValue(info,original){\n    if (info.Title !== undefined){\n        return  info\n    }\n    else{\n        return original\n    }\n}\n\n\nasync function getNewData(dataResponce,movie){\n        let x =Promise.resolve(\n            fetch(`https://www.omdbapi.com/?t=${movie.slug}&y=${(movie.year-1)}&type=movie+&apikey=6b46131b`).then(response=>{    \n                return response.json()}).then(passInfo =>{\n                    return returnValue(passInfo,dataResponce)\n                }))\n        return x\n}\n\n\n\nexport function listMovies(){\n    if (sessionStorage.AllMovies=== 'not loaded'){\n        return (dispatch) => {\n            dispatch({ type: 'LOADING_MOVIES'})\n            fetch(`https://river-api.herokuapp.com/movies`).then(response => {\n                return response.json()\n            }).then(responseJSON => {\n                sessionStorage.setItem ('AllMovies', JSON.stringify(responseJSON))\n                dispatch({ type: 'ADD_MOVIES', movies: responseJSON})\n            })\n        }\n    }\n    else return(dispatch) =>{\n        dispatch({type: 'ADD_MOVIES', movies: JSON.parse(sessionStorage.AllMovies)})\n    }\n}\n\n//send specific movie to omdb and retrieve all the data\n// for use with movie search\nexport function fetchTitle (movieInfo){\n    return (dispatch) => {\n            dispatch({ type: 'LOADING_MOVIES'})\n            fetch(`https://www.omdbapi.com/?t=${movieInfo.slug}&y=${movieInfo.year}+&apikey=6b46131b`).then(response => {\n                return response.json()\n            }).then(responseJSON => {\n                            if(responseJSON.Title !== null){ \n                            try {\n                                sessionStorage.setItem('selectedMovie',JSON.stringify(responseJSON))\n                                dispatch({ type: 'ADD_MOVIES', movies: [], ids: [], currentTitle: responseJSON})\n                            }\n                            catch(error){\n                                console.log(error)\n                            }\n                        }\n                        else{\n                        }\n                        })\n        }\n}"]},"metadata":{},"sourceType":"module"}