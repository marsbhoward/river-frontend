{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.logMovie = selectedMovie => {\n      if (this.state.youtube === null) {\n        this.setState({\n          youtube: selectedMovie.youtube_id\n        });\n      }\n\n      this.setState({\n        selectedMovie: selectedMovie\n      }); //sessionStorage.setItem('currentMovie',selectedMovie)\n\n      if (selectedMovie === null) {} else {\n        if (selectedMovie.youtube_id === null) {\n          //if youtube_id on api is empty\n          //not getting updated trailer here\n          this.fetchTrailer();\n          this.setState({\n            youtube: null\n          });\n        } else {//this.setState({youtube: \"yes\"})\n        }\n      }\n    };\n\n    this.trailerPath = passedMovie => {\n      let newMovieList = JSON.parse(sessionStorage.currentMovieList); //mars passed movie is coming back null on occation\n\n      if (passedMovie) {\n        if (this.props.trailer.length > 0 && this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie.youtube_id === null) {\n          adapter.updateYoutubeID(passedMovie.stream_id, passedMovie.id, this.props.trailer).then(data => data);\n          passedMovie.youtube_id = this.props.trailer;\n          sessionStorage.setItem('currentMovieList', JSON.stringify(newMovieList));\n          console.log('trailer updated on backend');\n        } else if (this.props.trailer === 'kJQP7kiw5Fk') {\n          console.log('error loading video from youtube');\n        } else {\n          console.log('trailer was loaded from backend');\n        }\n      }\n    };\n\n    this.fetchTrailer = () => {\n      this.props.fetchTrailers(this.props.currentMovie.Title, this.props.currentMovie.Year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      if (this.props.loading) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 14\n          }\n        }, \"Loading Movies...\");\n      } else {\n        // change selected movie to backend movie\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(MovieInfo, {\n          youtube: this.state.youtube,\n          path: this.trailerPath,\n          selectedMovie: this.state.selectedMovie,\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 9\n          }\n        }));\n      }\n    };\n\n    this.trailerPath = this.trailerPath.bind(this);\n    this.state = {\n      selectedMovie: null,\n      youtube: null\n    };\n  }\n\n  componentDidMount() {\n    console.log('I was loaded'); //pass stream id and movie id in props\n    // only works with db complete reset\n\n    let apiMovieID = parseInt(sessionStorage.currentMovie);\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => {\n      this.logMovie(movie);\n    }); //if current movie does not have a youtube_id on the backend\n    //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title) {\n      let apiMovieID = sessionStorage.currentMovie;\n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie));\n    }\n  }\n\n  render() {\n    let title = 'title';\n\n    if (this.props.currentMovie.Title !== undefined) {\n      title = this.props.currentMovie.Title;\n    } else {\n      if (sessionStorage.selectedMovie.title) {\n        title = JSON.stringify(sessionStorage.selectedMovie.title);\n        console.log(title);\n      } else {\n        title = JSON.stringify(sessionStorage.selectedMovie);\n        console.log(title);\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"banner-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 6\n      }\n    }, title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  },\n  updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n    return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        movie_id,\n        youtube_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","constructor","props","logMovie","selectedMovie","state","youtube","setState","youtube_id","fetchTrailer","trailerPath","passedMovie","newMovieList","JSON","parse","sessionStorage","currentMovieList","trailer","length","adapter","updateYoutubeID","stream_id","id","then","data","setItem","stringify","console","log","currentMovie","Title","Year","handler","trailerID","handleLoading","loading","bind","componentDidMount","apiMovieID","parseInt","getYoutubeID","streamID","movie","componentDidUpdate","prevProps","render","title","undefined","toUpperCase","mapDispatchToProps","TrailersReducer","movie_id","fetch","headers","resp","json","method","body"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component { \n\n  constructor(props){\n    super(props)\n    this.trailerPath = this.trailerPath.bind(this)\n    this.state = {\n      selectedMovie: null,\n      youtube: null\n    }\n\n  } \n  \n  componentDidMount() {\n    console.log('I was loaded')\n    //pass stream id and movie id in props\n    // only works with db complete reset\n    let apiMovieID = parseInt(sessionStorage.currentMovie )\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => {\n      this.logMovie(movie)\n    })\n\n    //if current movie does not have a youtube_id on the backend\n  \t  \n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n  \tif (this.props.currentMovie.Title !== prevProps.currentMovie.Title)\n  \t{\n      let apiMovieID = sessionStorage.currentMovie \n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => this.logMovie(movie))\n  \t}\n  }\n\n  logMovie = (selectedMovie) => {    \n    if (this.state.youtube === null){\n      this.setState({youtube: selectedMovie.youtube_id})\n    }\n        this.setState({\n          selectedMovie: selectedMovie\n        })\n\n        //sessionStorage.setItem('currentMovie',selectedMovie)\n\n      if (selectedMovie === null) {\n      }\n      else{\n        if(selectedMovie.youtube_id === null){\n          //if youtube_id on api is empty\n          //not getting updated trailer here\n          this.fetchTrailer()\n          this.setState({youtube: null})\n        }\n        else {\n          //this.setState({youtube: \"yes\"})\n        }        \n      }\n  }\n\n\n  trailerPath = (passedMovie) =>{\n    let newMovieList = JSON.parse(sessionStorage.currentMovieList)\n    \n    //mars passed movie is coming back null on occation\n    if (passedMovie){\n      if (this.props.trailer.length > 0 && this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie.youtube_id === null){ \n        adapter.updateYoutubeID(passedMovie.stream_id,passedMovie.id,this.props.trailer).then(data => data)\n        passedMovie.youtube_id = this.props.trailer\n        sessionStorage.setItem('currentMovieList',JSON.stringify(newMovieList)) \n        console.log('trailer updated on backend') \n      }\n      else if (this.props.trailer === 'kJQP7kiw5Fk') {\n        console.log('error loading video from youtube')\n      }\n      else {\n        console.log('trailer was loaded from backend') \n      }\n    }\n  }\n\n  fetchTrailer = () => {\n  \tthis.props.fetchTrailers(this.props.currentMovie.Title,this.props.currentMovie.Year)\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    if(this.props.loading) \n    {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      // change selected movie to backend movie\n      return (\n      \t<div>\n      \t\t<MovieInfo youtube={this.state.youtube} path={this.trailerPath} selectedMovie ={this.state.selectedMovie} currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    let title = 'title'\n    if (this.props.currentMovie.Title !== undefined){\n      title = this.props.currentMovie.Title \n    }\n    else{\n      if (sessionStorage.selectedMovie.title){\n        title =  JSON.stringify (sessionStorage.selectedMovie.title)\n        console.log(title)\n      }\n      else{\n        title =  JSON.stringify( sessionStorage.selectedMovie)\n        console.log(title)\n      }\n    }\n    \n    return (\n    <div className= \"Info\">\n    \t<div className=\"banner-3\">{title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    },\n\n    updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n      return fetch(`https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {  \n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, movie_id, youtube_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}