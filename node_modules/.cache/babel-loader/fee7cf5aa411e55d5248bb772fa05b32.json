{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js\";\nimport React, { useState, useEffect, useRef } from 'react'; //import { connect } from 'react-redux';\n\nimport { fetchMovies } from '../actions/movieActions';\nimport { fetchTitle } from '../actions/movieActions';\nimport MovieList from '../components/MovieList';\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux';\n\nconst MoviesPage = props => {\n  const movieData = useSelector(state => state.MoviesReducer, []) || [];\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [movieDataArray, setMovieDataArray] = useState([]);\n  const [currentMovie, setCurrentMovie] = useState('');\n  const countRef = useRef(0);\n  useEffect(() => {\n    if (typeof location.state !== undefined && countRef.current === 0) {\n      //dispatch(fetchTitle(parseInt(localStorage.currentStream)))\n      //setCliked(location.state.clicked)\n      CurrentMovie(movieData);\n    } else {\n      console.log(location);\n      getMoviesArray();\n    }\n  }, [countRef]); //dispatch({type: 'LOADING_MOVIES'})\n  //props.fetchMovies(localStorage.currentStream)\n  //console.log(props)\n  //console.log(movieData)\n  //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n\n  function trailerID(trailer) {//link trailer to backend\n  }\n\n  function getMoviesArray() {\n    dispatch(fetchMovies(Promise.resolve(location.state).then(location.state.state.currentMovie)));\n    setMovieDataArray(movieData.movies);\n  }\n\n  function CurrentMovie(data) {\n    if (data.currentTitle !== undefined) {\n      setCurrentMovie(data.currentTitle);\n    }\n  } //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n\n\n  function handleLoading() {\n    if (movieData.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 14\n        }\n      }, \"Loading Movies...\");\n    } else {\n      if (location.state !== undefined) {\n        if (typeof movieData.currentTitle !== undefined) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(MovieList, {\n            passedMovie: movieData.currentTitle,\n            streamID: localStorage.currentStream,\n            isClicked: clicked,\n            trailerID: trailerID,\n            movieCards: movieData.movies,\n            movieIds: movieData.ids,\n            currentStream: localStorage.currentStreamName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 13\n            }\n          }));\n        } else console.log(location.state);\n\n        console.log(movieData);\n        let cti;\n        Promise.resolve(location.state).then(cti = location.state.state.currentMovie);\n        console.log(cti);\n        let ctit = cti.title;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }\n        }, ctit), /*#__PURE__*/React.createElement(MovieList, {\n          passedMovie: cti,\n          streamID: localStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: localStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(MovieList, {\n          streamID: localStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: localStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 19\n          }\n        }));\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, handleLoading());\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies.sort(),\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  };\n};\n\nexport default MoviesPage;","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js"],"names":["React","useState","useEffect","useRef","fetchMovies","fetchTitle","MovieList","useLocation","useSelector","useDispatch","useStore","MoviesPage","props","movieData","state","MoviesReducer","dispatch","location","clicked","setCliked","movieDataArray","setMovieDataArray","currentMovie","setCurrentMovie","countRef","undefined","current","CurrentMovie","console","log","getMoviesArray","trailerID","trailer","Promise","resolve","then","movies","data","currentTitle","handleLoading","loading","localStorage","currentStream","ids","currentStreamName","cti","ctit","title","mapDispatchToProps","movieCards","sort","movieIds"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect, useRef } from 'react';\n//import { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions'\nimport { fetchTitle } from '../actions/movieActions'\nimport MovieList from '../components/MovieList'\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch, useStore } from 'react-redux'\n\nconst MoviesPage = (props) => { \n  const movieData = useSelector(state => state.MoviesReducer, []) || []; \n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  const [movieDataArray,setMovieDataArray] = useState([]); \n  const [currentMovie, setCurrentMovie] = useState('');  \n  const countRef = useRef(0);\n\n  useEffect(() => {\n      if (typeof location.state !== undefined && countRef.current === 0){\n        //dispatch(fetchTitle(parseInt(localStorage.currentStream)))\n        //setCliked(location.state.clicked)\n        CurrentMovie(movieData)\n        \n\n      }\n      else{\n        console.log(location)\n        getMoviesArray()\n      }        \n    }, [countRef]);\n    //dispatch({type: 'LOADING_MOVIES'})\n    //props.fetchMovies(localStorage.currentStream)\n    //console.log(props)\n    //console.log(movieData)\n    //console.log(dispatch(fetchMovies(localStorage.currentStream)))\n  \n\n  function trailerID(trailer){ \n    //link trailer to backend\n  }\n\n  function getMoviesArray(){\n    dispatch(fetchMovies(Promise.resolve(location.state).then(location.state.state.currentMovie)));\n    setMovieDataArray(movieData.movies)  \n  }\n\n  function CurrentMovie(data){\n    if (data.currentTitle !== undefined){\n      setCurrentMovie(data.currentTitle)\n    }\n  }\n\n\n\n  //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n  function handleLoading (){\n    \n    if(movieData.loading) {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      if (location.state !== undefined){\n        if (typeof movieData.currentTitle !== undefined){\n          return(\n          <div>\n            <MovieList passedMovie={movieData.currentTitle} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n          </div>\n          )\n        }\n        else\n        console.log(location.state)\n        console.log( movieData)\n        let cti\n        Promise.resolve(location.state).then( cti =location.state.state.currentMovie)\n        console.log(cti)\n        let ctit = cti.title \n          return(\n            <div>\n              <h1>{ctit}</h1>\n              <MovieList passedMovie={cti} streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n            </div>\n          )\n      }\n        else{\n            return (\n              <div>\n                  <MovieList streamID={localStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={localStorage.currentStreamName}/>                  \n              </div>\n            )\n        }\n      \n    }\n  }\n\n  \n    return (\n      <div className=\"App\">\n        {handleLoading()}\n      </div>\n    );\n  }\n\n\n\n\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies.sort(),\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  }\n}\n\nexport default(MoviesPage)"]},"metadata":{},"sourceType":"module"}