{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions';\nimport { fetchTitle } from '../actions/movieActions';\nimport MovieList from '../components/MovieList';\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\n\nconst MoviesPage = props => {\n  const history = useHistory();\n  const movieData = useSelector(state => state.MoviesReducer, []) || [];\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState(''); //const [movieDataArray,setMovieDataArray] = useState([]); \n  //const [currentTitle, setCurrentTitle] = useState([]); \n\n  const [count, setCount] = useState([0]);\n  useEffect(() => {\n    if (sessionStorage.currentStreamName === \"\") {\n      history.push(`/userstreams`);\n    }\n\n    if (typeof location.state !== \"undefined\") {\n      //set clicked\n      changeClicked();\n      getTitleData(); // CurrentMovie(movieData)\n    } else {\n      getMoviesArray();\n    }\n  }, []); //dispatch({type: 'LOADING_MOVIES'})\n  //props.fetchMovies(sessionStorage.currentStream)\n  //console.log(props)\n  //console.log(movieData)\n  //console.log(dispatch(fetchMovies(sessionStorage.currentStream)))\n\n  function changeClicked() {\n    setCliked(true);\n  }\n\n  function trailerID(trailer) {//link trailer to backend\n  }\n\n  function getMoviesArray() {\n    dispatch(fetchMovies(sessionStorage.currentStream)); //setMovieDataArray(movieData.movies)  \n  }\n\n  function getTitleData() {\n    dispatch(fetchTitle(location.state.state.currentMovie)); //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    //setCurrentTitle(movieData.currentTitle)\n  }\n\n  function getcurrentTitle(movieData) {\n    dispatch(fetchTitle(movieData)); //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    //setCurrentTitle(movieData.currentTitle)\n\n    sessionStorage.setItem('selectedMovie', movieData.currentTitle);\n  }\n\n  function handleFunctions(e) {\n    props.pointer(e);\n    props.resetCount();\n  }\n\n  function handler() {\n    changeClicked();\n    setCount(0);\n  } //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n\n\n  function handleLoading() {\n    if (count < 1 && typeof location.state !== \"undefined\") {\n      console.log(count);\n      getTitleData();\n      getMoviesArray();\n      setCount(count + 1);\n    }\n\n    if (movieData.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 14\n        }\n      }, \"Loading Movies...\");\n    } else {\n      if (typeof location.state !== \"undefined\") {\n        if (typeof movieData.currentTitle !== \"undefined\") {\n          //getTitleData()\n          //getcurrentTitle(movieData.currentTitle)\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"moviesPage\",\n            onClick: handleFunctions,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(MovieList, {\n            handler: handler,\n            movieBackend: location.state.state.currentMovie,\n            passedMovie: JSON.parse(sessionStorage.selectedMovie),\n            streamID: sessionStorage.currentStream,\n            isClicked: clicked,\n            trailerID: trailerID,\n            movieCards: movieData.movies,\n            movieIds: movieData.ids,\n            currentStream: sessionStorage.currentStreamName,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 13\n            }\n          }));\n        } else getTitleData();\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"moviesPage\",\n          onClick: handleFunctions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(MovieList, {\n          movieBackend: '',\n          passedMovie: movieData.currentTitle,\n          streamID: sessionStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: sessionStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }\n        }));\n      } else {\n        //getMoviesArray()\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"moviesPage\",\n          onClick: handleFunctions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(MovieList, {\n          handler: handler,\n          passGetData: getcurrentTitle,\n          streamID: sessionStorage.currentStream,\n          isClicked: clicked,\n          trailerID: trailerID,\n          movieCards: movieData.movies,\n          movieIds: movieData.ids,\n          currentStream: sessionStorage.currentStreamName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 19\n          }\n        }));\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, handleLoading());\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchMovies,\n  fetchTitle\n})(MoviesPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/MoviesPage.js"],"names":["React","useState","useEffect","connect","fetchMovies","fetchTitle","MovieList","useLocation","useSelector","useDispatch","useHistory","MoviesPage","props","history","movieData","state","MoviesReducer","dispatch","location","clicked","setCliked","count","setCount","sessionStorage","currentStreamName","push","changeClicked","getTitleData","getMoviesArray","trailerID","trailer","currentStream","currentMovie","getcurrentTitle","setItem","currentTitle","handleFunctions","e","pointer","resetCount","handler","handleLoading","console","log","loading","JSON","parse","selectedMovie","movies","ids","mapDispatchToProps","movieCards","movieIds"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../actions/movieActions'\nimport { fetchTitle } from '../actions/movieActions'\nimport MovieList from '../components/MovieList'\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory} from \"react-router-dom\";\n\nconst MoviesPage = (props) => { \n  const history = useHistory();\n  const movieData = useSelector(state => state.MoviesReducer, []) || []; \n  const dispatch = useDispatch();\n  const location = useLocation();\n  const [clicked, setCliked] = useState('');\n  //const [movieDataArray,setMovieDataArray] = useState([]); \n  //const [currentTitle, setCurrentTitle] = useState([]); \n  const [count, setCount]= useState([0]);\n\n  useEffect(() => {\n      if (sessionStorage.currentStreamName === \"\"){\n        history.push(`/userstreams`\n        )\n      }\n\n\n      if (typeof location.state !== \"undefined\"){\n        //set clicked\n        changeClicked()\n        getTitleData()\n       \n        \n        \n       // CurrentMovie(movieData)\n        \n\n      }\n      else{\n        getMoviesArray()\n      }       \n    }, []);\n    //dispatch({type: 'LOADING_MOVIES'})\n    //props.fetchMovies(sessionStorage.currentStream)\n    //console.log(props)\n    //console.log(movieData)\n    //console.log(dispatch(fetchMovies(sessionStorage.currentStream)))\n  \n  function changeClicked(){\n    setCliked(true)\n  }\n\n  function trailerID(trailer){ \n    //link trailer to backend\n  }\n\n  function getMoviesArray(){\n    dispatch(fetchMovies(sessionStorage.currentStream));\n    //setMovieDataArray(movieData.movies)  \n  }\n  function getTitleData(){\n    dispatch(fetchTitle(location.state.state.currentMovie))\n    //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    //setCurrentTitle(movieData.currentTitle)\n  }\n\n  function getcurrentTitle(movieData){\n    dispatch(fetchTitle(movieData))\n    //dispatch(fetchTitle(Promise.resolve(location.state).then(location.state.state.currentMovie)))\n    //dispatch(fetchTitle(location.state.state.currentMovie))\n    //setCurrentTitle(movieData.currentTitle)\n    sessionStorage.setItem('selectedMovie', movieData.currentTitle)\n  }\n\n  function handleFunctions (e){\n    props.pointer(e)\n    props.resetCount()\n  }\n\n  function handler(){\n    changeClicked()\n    setCount(0)\n  }\n\n  //<MovieList streamID={props.handler} movieCards={props.movieCards} movieIds={props.movieIds} trailerID={props.trailerID} currentStream={props.currentStream}/>\n  function handleLoading (){\n    if (count< 1 && typeof location.state !== \"undefined\"){\n      console.log(count)\n      getTitleData()\n      getMoviesArray()\n      setCount (count+1)\n    }\n    \n    if(movieData.loading) {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      if (typeof location.state !== \"undefined\"){\n        if (typeof movieData.currentTitle !== \"undefined\"){\n          //getTitleData()\n          //getcurrentTitle(movieData.currentTitle)\n          return(\n          <div className=\"moviesPage\" onClick={handleFunctions}>\n            <MovieList handler={handler} movieBackend={location.state.state.currentMovie} passedMovie={JSON.parse(sessionStorage.selectedMovie)} streamID={sessionStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={sessionStorage.currentStreamName}/>                  \n          </div>\n          )\n        }\n        else\n        getTitleData()\n          return(\n            <div className=\"moviesPage\" onClick={handleFunctions}>\n              <MovieList movieBackend={''} passedMovie={movieData.currentTitle} streamID={sessionStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={sessionStorage.currentStreamName}/>                  \n            </div>\n          )\n      }\n        else{\n          //getMoviesArray()\n            return (\n              <div className=\"moviesPage\" onClick={handleFunctions}>\n                  <MovieList handler={handler} passGetData={getcurrentTitle} streamID={sessionStorage.currentStream} isClicked={clicked} trailerID={trailerID} movieCards={movieData.movies} movieIds={movieData.ids}  currentStream={sessionStorage.currentStreamName}/>                  \n              </div>\n            )\n        }\n      \n    }\n  }\n\n  \n    return (\n      <div className=\"App\">\n        {handleLoading()}\n      </div>\n    );\n  }\n\n\n\n\n\nconst mapDispatchToProps = state => {\n  return {\n    movieCards: state.MoviesReducer.movies,\n    movieIds: state.MoviesReducer.ids,\n    loading: state.MoviesReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, { fetchMovies,fetchTitle })(MoviesPage)"]},"metadata":{},"sourceType":"module"}