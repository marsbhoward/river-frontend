{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/UserStreamsPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions';\nimport Profile from '../components/Profile';\nimport User from '../components/User';\n\nclass UserStreamsPage extends Component {\n  constructor(props) {\n    super(props); //binds passed handler to UserStreamsPage handler\n\n    this.handler = (id, name) => {\n      console.log('stream set');\n      this.setState({\n        currentStream: id,\n        currentStreamName: name\n      }); //returns the selected Stream id to App       \n\n      this.props.handler(id, name);\n    };\n\n    this.handleLoading = id => {\n      if (this.props.loading) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 14\n          }\n        }, \"Loading Streams...\");\n      } else {\n        let selectedStreams = [];\n        this.props.userStreams.forEach(stream => {\n          if (stream.selected === true) {\n            selectedStreams.push(stream);\n          }\n        });\n        return /*#__PURE__*/React.createElement(Profile, {\n          userID: id,\n          userStreams: selectedStreams,\n          handleLists: this.handleLists,\n          handler: this.handler,\n          streamLinks: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.handleFunctions = e => {\n      this.props.pointer(e);\n      this.props.resetCount();\n    };\n\n    this.handler = this.handler.bind(this);\n    this.state = {\n      cssColor: \"\"\n    };\n  }\n\n  componentDidMount() {\n    sessionStorage.setItem('currentStream', ' ');\n    sessionStorage.setItem('currentStreamName', ' ');\n    this.props.fetchUserStreams(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      console.log(this.state.cssColor);\n      this.setState({\n        cssColor: this.props.css('UserStreams', this.props.darkmodeProp)\n      });\n      sessionStorage.setItem('currentStream', ' ');\n      sessionStorage.setItem('currentStreamName', ' ');\n    }\n  } // recieves id from passed handler\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      onClick: this.handleFunctions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(User, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }), this.handleLoading(this.props.userId));\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams.sort(),\n    loading: state.StreamsReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchUserStreams\n})(UserStreamsPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/UserStreamsPage.js"],"names":["React","Component","connect","fetchUserStreams","Profile","User","UserStreamsPage","constructor","props","handler","id","name","console","log","setState","currentStream","currentStreamName","handleLoading","loading","selectedStreams","userStreams","forEach","stream","selected","push","handleLists","handleFunctions","e","pointer","resetCount","bind","state","cssColor","componentDidMount","sessionStorage","setItem","userId","componentDidUpdate","prevProps","css","darkmodeProp","render","mapDispatchToProps","StreamsReducer","streams","sort"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUserStreams } from '../actions/userStreamActions'\nimport Profile from '../components/Profile';\nimport User from '../components/User';\n\nclass UserStreamsPage extends Component {   \n  constructor(props){\n    super(props)\n    //binds passed handler to UserStreamsPage handler\n    this.handler = this.handler.bind(this)\n    this.state = {\n      cssColor: \"\"\n    }\n  } \n\n  \n  componentDidMount() {\n    sessionStorage.setItem('currentStream', ' ');\n    sessionStorage.setItem('currentStreamName', ' ');\n    this.props.fetchUserStreams(this.props.userId)\n  }\n\n  componentDidUpdate(prevProps){\n    if (prevProps!== this.props){\n      console.log(this.state.cssColor)\n      this.setState({cssColor: this.props.css('UserStreams',this.props.darkmodeProp)}) \n      sessionStorage.setItem('currentStream', ' ');\n      sessionStorage.setItem('currentStreamName', ' '); \n    }\n  }   \n\n\n// recieves id from passed handler\n  handler = (id,name) => {\n    console.log('stream set')\n    this.setState({\n      currentStream: id,\n      currentStreamName: name\n    })\n //returns the selected Stream id to App       \n    this.props.handler(id,name)\n  }\n  \n\n\n  handleLoading = (id) => {\n    if(this.props.loading) {\n      return <div>Loading Streams...</div>\n    } else {\n      let selectedStreams = []\n      this.props.userStreams.forEach ( stream =>{\n\t  \tif (stream.selected === true){\n\t  \t\tselectedStreams.push(stream)\n\t  \t}\n\n      })  \n      return <Profile userID={id} userStreams={selectedStreams} handleLists={this.handleLists} handler={this.handler} streamLinks={true}/>\n    }\n  }\n\n  handleFunctions = (e) =>{\n    this.props.pointer(e)\n    this.props.resetCount()\n  }\n\n  render() {\n    return (\n      <div className=\"App\" onClick={this.handleFunctions}>\n        <User/>\n        {this.handleLoading(this.props.userId)}\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = state => {\n  return {\n    userStreams: state.StreamsReducer.streams.sort(),\n    loading: state.StreamsReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, {fetchUserStreams})(UserStreamsPage)"]},"metadata":{},"sourceType":"module"}