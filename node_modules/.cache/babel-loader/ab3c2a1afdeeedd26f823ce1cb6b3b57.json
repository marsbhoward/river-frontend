{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.logMovie = selectedMovie => {\n      this.setState({\n        selectedMovie: selectedMovie\n      });\n\n      if (selectedMovie === null) {\n        //if youtube_id on api is empty\n        //not getting updated trailer here\n        console.log('youtube_id null');\n        this.fetchTrailer();\n      } else {\n        console.log('youtube_id has value and state set');\n      }\n    };\n\n    this.trailerPath = passedMovie => {\n      if (this.props.trailer.length > 0 && this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie === null) {\n        console.log(passedMovie);\n        adapter.updateYoutubeID(passedMovie.stream_id, passedMovie.id, this.props.trailer).then(data => data);\n        console.log('trailer updated on backend');\n      } else if (this.props.trailer === 'kJQP7kiw5Fk') {\n        console.log('error loading video from youtube');\n      } else {\n        console.log('trailer was loaded from backend');\n      }\n    };\n\n    this.fetchTrailer = () => {\n      this.props.fetchTrailers(this.props.currentMovie.Title, this.props.currentMovie.Year);\n    };\n\n    this.handler = trailer => {\n      //pass to MovieList\n      this.props.trailerID(trailer);\n    };\n\n    this.handleLoading = () => {\n      console.log(this.state.selectedMovie);\n\n      if (this.props.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Loading Movies...\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, React.createElement(MovieInfo, {\n          path: this.trailerPath,\n          selectedMovie: this.state.selectedMovie,\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.trailer,\n          handler: this.handler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }));\n      }\n    };\n\n    this.state = {\n      selectedMovie: null\n    };\n  }\n\n  componentDidMount() {\n    //pass stream id and movie id in props\n    let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => console.log(movie)); //if current movie does not have a youtube_id on the backend\n    //else\n    //get trailer from backend \n    //set this.props.trailer to that youtube_id\n    //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentMovie.Title !== prevProps.currentMovie.Title) {\n      let apiMovieID = this.props.movieID + (this.props.streamID - 1) * 41;\n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => console.log(movie));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"banner-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.props.currentMovie.Title.toUpperCase()), this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nconst adapter = {\n  getYoutubeID: (stream_id, movie_id) => {\n    return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json());\n  },\n  updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n    return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      method: 'PATCH',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        stream_id,\n        movie_id,\n        youtube_id\n      })\n    }).then(resp => resp.json());\n  }\n};\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","constructor","props","logMovie","selectedMovie","setState","console","log","fetchTrailer","trailerPath","passedMovie","trailer","length","adapter","updateYoutubeID","stream_id","id","then","data","currentMovie","Title","Year","handler","trailerID","handleLoading","state","loading","componentDidMount","apiMovieID","movieID","streamID","getYoutubeID","movie","componentDidUpdate","prevProps","render","toUpperCase","mapDispatchToProps","TrailersReducer","movie_id","fetch","headers","resp","json","youtube_id","method","body","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component { \n\n  constructor(props){\n    super(props)\n    this.state = {selectedMovie: null}\n\n  } \n  \n  componentDidMount() {\n    //pass stream id and movie id in props\n    let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n    adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => console.log(movie))\n\n    //if current movie does not have a youtube_id on the backend\n  \t  \n    //else\n      //get trailer from backend \n      //set this.props.trailer to that youtube_id\n      //** if this cant be done set up conditional render. setstate trailer: youtube_id. pass state to MovieInfo instead of trailer prop **\n  }\n\n  componentDidUpdate(prevProps){\n\n  \tif (this.props.currentMovie.Title !== prevProps.currentMovie.Title)\n  \t{\n      let apiMovieID = this.props.movieID + ((this.props.streamID-1)*41)    \n      adapter.getYoutubeID(this.props.streamID, apiMovieID).then(movie => console.log(movie))\n  \t}\n  }\n\n  logMovie = (selectedMovie) => {\n        this.setState({\n          selectedMovie: selectedMovie\n        })       \n      if(selectedMovie === null){\n        //if youtube_id on api is empty\n        //not getting updated trailer here\n        console.log('youtube_id null')\n        this.fetchTrailer()\n      }\n      else {\n        console.log('youtube_id has value and state set')\n      }\n  }\n\n\n  trailerPath = (passedMovie) =>{\n\n    \n    if (this.props.trailer.length > 0 && this.props.trailer !== \"kJQP7kiw5Fk\" && passedMovie === null){ \n      console.log(passedMovie)\n      adapter.updateYoutubeID(passedMovie.stream_id,passedMovie.id,this.props.trailer).then(data => data)\n      console.log('trailer updated on backend') \n    }\n    else if (this.props.trailer === 'kJQP7kiw5Fk') {\n      console.log('error loading video from youtube')\n    }\n    else {\n      console.log('trailer was loaded from backend')\n    }\n  }\n\n  fetchTrailer = () => {\n  \tthis.props.fetchTrailers(this.props.currentMovie.Title,this.props.currentMovie.Year)\n  }\n\n  handler = (trailer) => {\n    //pass to MovieList\n    this.props.trailerID(trailer)\n  }\n\n  handleLoading = () => {\n    console.log(this.state.selectedMovie)\n    if(this.props.loading) \n    {\n      return <div>Loading Movies...</div>\n    } \n    else {\n      return (\n      \t<div>\n      \t\t<MovieInfo path={this.trailerPath} selectedMovie = {this.state.selectedMovie} currentMovie={this.props.currentMovie} trailer={this.props.trailer} handler={this.handler}/>\n      \t</div>\n      )\n    }\n  }\n\n  render() {\n    return (\n    <div className= \"Info\">\n    \t<div className=\"banner-3\">{this.props.currentMovie.Title.toUpperCase()}</div>\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailer,\n    loading: state.TrailersReducer.loading\n  }\n}\n\n  const adapter = {\n    getYoutubeID: (stream_id, movie_id) => {\n      return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    .then(resp => resp.json())     \n    },\n\n    updateYoutubeID: (stream_id, movie_id, youtube_id) => {\n      return fetch(`https://cors-anywhere-dd.herokuapp.com/https://river-api.herokuapp.com/streams/${stream_id}/movies/${movie_id}`, {\n        method: 'PATCH',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({stream_id, movie_id, youtube_id})\n      })\n    .then(resp => resp.json())       \n    }\n  }\n\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}