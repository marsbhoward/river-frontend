{"ast":null,"code":"var _jsxFileName = \"/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions';\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLoading = () => {\n      if (this.props.loading) {\n        console.log(this.props.trailer);\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, \"Loading Movies...\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, React.createElement(MovieInfo, {\n          currentMovie: this.props.currentMovie,\n          trailer: this.props.currentMovie.Title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }));\n      }\n    };\n  }\n\n  componentDidMount() {\n    console.log(this);\n    this.props.fetchTrailers(this.props.currentMovie.Title);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"MovieInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, this.handleLoading());\n  }\n\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailers,\n    loading: state.TrailersReducer.loading\n  };\n};\n\nexport default connect(mapDispatchToProps, {\n  fetchTrailers\n})(InfoPage);","map":{"version":3,"sources":["/Users/marshoward/Development/code/river-frontend/src/containers/InfoPage.js"],"names":["React","Component","connect","fetchTrailers","MovieInfo","InfoPage","handleLoading","props","loading","console","log","trailer","currentMovie","Title","componentDidMount","render","mapDispatchToProps","state","TrailersReducer","trailers"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAO/BK,aAP+B,GAOf,MAAM;AACpB,UAAG,KAAKC,KAAL,CAAWC,OAAd,EAAuB;AACtBC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWI,OAAvB;AACC,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD,OAHD,MAGO;AACL,eACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,SAAD;AAAW,UAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWK,YAApC;AAAkD,UAAA,OAAO,EAAE,KAAKL,KAAL,CAAWK,YAAX,CAAwBC,KAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,CADA;AAKD;AACF,KAlB8B;AAAA;;AAC/BC,EAAAA,iBAAiB,GAAG;AACpBL,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,SAAKH,KAAL,CAAWJ,aAAX,CAAyB,KAAKI,KAAL,CAAWK,YAAX,CAAwBC,KAAjD;AACC;;AAgBDE,EAAAA,MAAM,GAAG;AACP,WACA;AAAK,MAAA,SAAS,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKT,aAAL,EADF,CADA;AAKD;;AA1B8B;;AA6BjC,MAAMU,kBAAkB,GAAGC,KAAK,IAAI;AAClC,SAAO;AACLN,IAAAA,OAAO,EAAEM,KAAK,CAACC,eAAN,CAAsBC,QAD1B;AAELX,IAAAA,OAAO,EAAES,KAAK,CAACC,eAAN,CAAsBV;AAF1B,GAAP;AAID,CALD;;AAOA,eAAeN,OAAO,CAACc,kBAAD,EAAqB;AAACb,EAAAA;AAAD,CAArB,CAAP,CAA6CE,QAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTrailers } from '../actions/trailerActions'\nimport MovieInfo from '../components/MovieInfo';\n\nclass InfoPage extends Component {  \n  componentDidMount() {\n  console.log(this); \n  this.props.fetchTrailers(this.props.currentMovie.Title)\t\n  }\n\n\n  handleLoading = () => {\n    if(this.props.loading) {\n    \tconsole.log(this.props.trailer)\n      return <div>Loading Movies...</div>\n    } else {\n      return (\n      <div>\n      <MovieInfo currentMovie={this.props.currentMovie} trailer={this.props.currentMovie.Title}/>\n      </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n    <div className= \"MovieInfo\">\n    \t{this.handleLoading()}\n\t</div>\n \t);\n  }\n}\n\nconst mapDispatchToProps = state => {\n  return {\n    trailer: state.TrailersReducer.trailers,\n    loading: state.TrailersReducer.loading\n  }\n}\n\nexport default connect(mapDispatchToProps, {fetchTrailers})(InfoPage)"]},"metadata":{},"sourceType":"module"}